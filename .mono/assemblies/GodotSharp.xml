<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GodotSharp</name>
    </assembly>
    <members>
        <member name="P:Godot.Basis.x">
            <summary>
            Returns the basis matrix’s x vector.
            This is equivalent to <see cref="P:Godot.Basis.Column0"/>.
            </summary>
        </member>
        <member name="P:Godot.Basis.y">
            <summary>
            Returns the basis matrix’s y vector.
            This is equivalent to <see cref="P:Godot.Basis.Column1"/>.
            </summary>
        </member>
        <member name="P:Godot.Basis.z">
            <summary>
            Returns the basis matrix’s z vector.
            This is equivalent to <see cref="P:Godot.Basis.Column2"/>.
            </summary>
        </member>
        <member name="T:Godot.Node">
            <summary>
            <para>Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.</para>
            <para>A tree of nodes is called a scene. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.</para>
            <para>Scene tree: The <see cref="T:Godot.SceneTree"/> contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its <see cref="M:Godot.Node._EnterTree"/> callback is triggered. Child nodes are always added after their parent node, i.e. the <see cref="M:Godot.Node._EnterTree"/> callback of a parent node will be triggered before its child's.</para>
            <para>Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective <see cref="M:Godot.Node._Ready"/> callbacks are triggered. For groups of nodes, the <see cref="M:Godot.Node._Ready"/> callback is called in reverse order, starting with the children and moving up to the parent nodes.</para>
            <para>This means that when adding a node to the scene tree, the following order will be used for the callbacks: <see cref="M:Godot.Node._EnterTree"/> of the parent, <see cref="M:Godot.Node._EnterTree"/> of the children, <see cref="M:Godot.Node._Ready"/> of the children and finally <see cref="M:Godot.Node._Ready"/> of the parent (recursively for the entire scene tree).</para>
            <para>Processing: Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback <see cref="M:Godot.Node._Process(System.Single)"/>, toggled with <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>) happens as fast as possible and is dependent on the frame rate, so the processing time delta is passed as an argument. Physics processing (callback <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>, toggled with <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.</para>
            <para>Nodes can also process input events. When present, the <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI <see cref="T:Godot.Control"/> nodes), ensuring that the node only receives the events that were meant for it.</para>
            <para>To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the <see cref="P:Godot.Node.Owner"/> property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.</para>
            <para>Finally, when a node is freed with <see cref="M:Godot.Object.Free"/> or <see cref="M:Godot.Node.QueueFree"/>, it will also free all its children.</para>
            <para>Groups: Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See <see cref="M:Godot.Node.AddToGroup(System.String,System.Boolean)"/>, <see cref="M:Godot.Node.IsInGroup(System.String)"/> and <see cref="M:Godot.Node.RemoveFromGroup(System.String)"/>. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on <see cref="T:Godot.SceneTree"/>.</para>
            <para>Networking with nodes: After connecting to a server (or making one, see <see cref="T:Godot.NetworkedMultiplayerENet"/>) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call Godot will use its <see cref="T:Godot.NodePath"/> (make sure node names are the same on all peers). Also take a look at the high-level networking tutorial and corresponding demos.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationEnterTree">
            <summary>
            <para>Notification received when the node enters a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationExitTree">
            <summary>
            <para>Notification received when the node is about to exit a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationMovedInParent">
            <summary>
            <para>Notification received when the node is moved in the parent.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationReady">
            <summary>
            <para>Notification received when the node is ready. See <see cref="M:Godot.Node._Ready"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPaused">
            <summary>
            <para>Notification received when the node is paused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationUnpaused">
            <summary>
            <para>Notification received when the node is unpaused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPhysicsProcess">
            <summary>
            <para>Notification received every frame when the physics process flag is set (see <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationProcess">
            <summary>
            <para>Notification received every frame when the process flag is set (see <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationParented">
            <summary>
            <para>Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationUnparented">
            <summary>
            <para>Notification received when a node is unparented (parent removed it from the list of children).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInstanced">
            <summary>
            <para>Notification received when the node is instanced.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationDragBegin">
            <summary>
            <para>Notification received when a drag begins.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationDragEnd">
            <summary>
            <para>Notification received when a drag ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPathChanged">
            <summary>
            <para>Notification received when the node's <see cref="T:Godot.NodePath"/> changed.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationTranslationChanged">
            <summary>
            <para>Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like <see cref="M:Godot.Object.Tr(System.String)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInternalProcess">
            <summary>
            <para>Notification received every frame when the internal process flag is set (see <see cref="M:Godot.Node.SetProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInternalPhysicsProcess">
            <summary>
            <para>Notification received every frame when the internal physics process flag is set (see <see cref="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Inherit">
            <summary>
            <para>Inherits pause mode from the node's parent. For the root node, it is equivalent to PAUSE_MODE_STOP. Default.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Stop">
            <summary>
            <para>Stop processing when the <see cref="T:Godot.SceneTree"/> is paused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Process">
            <summary>
            <para>Continue to process regardless of the <see cref="T:Godot.SceneTree"/> pause state.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Signals">
            <summary>
            <para>Duplicate the node's signals.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Groups">
            <summary>
            <para>Duplicate the node's groups.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Scripts">
            <summary>
            <para>Duplicate the node's scripts.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.UseInstancing">
            <summary>
            <para>Duplicate using instancing.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.PauseMode">
            <summary>
            <para>Pause mode. How the node will behave if the <see cref="T:Godot.SceneTree"/> is paused.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Name">
            <summary>
            <para>The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Filename">
            <summary>
            <para>When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Owner">
            <summary>
            <para>The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using <see cref="T:Godot.PackedScene"/>) all the nodes it owns will be saved with it. This allows for the creation of complex <see cref="T:Godot.SceneTree"/>s, with instancing and subinstancing.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Multiplayer">
            <summary>
            <para>The <see cref="T:Godot.MultiplayerAPI"/> instance associated with this node. Either the <see cref="P:Godot.Node.CustomMultiplayer"/>, or the default SceneTree one (if inside tree).</para>
            </summary>
        </member>
        <member name="P:Godot.Node.CustomMultiplayer">
            <summary>
            <para>The override to the default <see cref="T:Godot.MultiplayerAPI"/>. Set to null to use the default SceneTree one.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._EnterTree">
            <summary>
            <para>Called when the node enters the <see cref="T:Godot.SceneTree"/> (e.g. upon instancing, scene changing, or after calling <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/> in a script). If the node has children, its <see cref="M:Godot.Node._EnterTree"/> callback will be called first, and then that of the children.</para>
            <para>Corresponds to the NOTIFICATION_ENTER_TREE notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._ExitTree">
            <summary>
            <para>Called when the node is about to leave the <see cref="T:Godot.SceneTree"/> (e.g. upon freeing, scene changing, or after calling <see cref="M:Godot.Node.RemoveChild(Godot.Node)"/> in a script). If the node has children, its <see cref="M:Godot.Node._ExitTree"/> callback will be called last, after all its children have left the tree.</para>
            <para>Corresponds to the NOTIFICATION_EXIT_TREE notification in <see cref="M:Godot.Object._Notification(System.Int32)"/> and signal <c>tree_exiting</c>. To get notified when the node has already left the active tree, connect to the <c>tree_exited</c></para>
            </summary>
        </member>
        <member name="M:Godot.Node._GetConfigurationWarning">
            <summary>
            <para>The string returned from this method is displayed as a warning in the "Scene Dock" if the script that overrides it is a <c>tool</c> script.</para>
            <para>Returning an empty string produces no warning.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Input(Godot.InputEvent)">
            <summary>
            <para>Called when there is an input event. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.SceneTree.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> and <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> are usually a better fit as they allow the GUI to intercept the events first.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._PhysicsProcess(System.Single)">
            <summary>
            <para>Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the <c>delta</c> variable should be constant.</para>
            <para>It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>.</para>
            <para>Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Process(System.Single)">
            <summary>
            <para>Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the <c>delta</c> time since the previous frame is not constant.</para>
            <para>It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>.</para>
            <para>Corresponds to the NOTIFICATION_PROCESS notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Ready">
            <summary>
            <para>Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their <see cref="M:Godot.Node._Ready"/> callbacks get triggered first, and the parent node will receive the ready notification afterwards.</para>
            <para>Corresponds to the NOTIFICATION_READY notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>. See also the <c>onready</c> keyword for variables.</para>
            <para>Usually used for initialization. For even earlier initialization, <see cref="M:Godot.Object._Init"/> may be used. Also see <see cref="M:Godot.Node._EnterTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledInput(Godot.InputEvent)">
            <summary>
            <para>Called when an <see cref="T:Godot.InputEvent"/> hasn't been consumed by <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> or any GUI. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.SceneTree.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, this and <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> are usually a better fit than <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> as they allow the GUI to intercept the events first.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)">
            <summary>
            <para>Called when an <see cref="T:Godot.InputEventKey"/> hasn't been consumed by <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> or any GUI. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.SceneTree.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, this and <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> are usually a better fit than <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> as they allow the GUI to intercept the events first.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddChildBelowNode(Godot.Node,Godot.Node,System.Boolean)">
            <summary>
            <para>Adds a child node. The child is placed below the given node in the list of children.</para>
            <para>Setting "legible_unique_name" <c>true</c> creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddChild(Godot.Node,System.Boolean)">
            <summary>
            <para>Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.</para>
            <para>Setting "legible_unique_name" <c>true</c> creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveChild(Godot.Node)">
            <summary>
            <para>Removes a child node. The node is NOT deleted and must be deleted manually.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildCount">
            <summary>
            <para>Returns the number of child nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildren">
            <summary>
            <para>Returns an array of references to node's children.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChild(System.Int32)">
            <summary>
            <para>Returns a child node by its index (see <see cref="M:Godot.Node.GetChildCount"/>). This method is often used for iterating all children of a node.</para>
            <para>To access a child node via its name, use <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.HasNode(Godot.NodePath)">
            <summary>
            <para>Returns <c>true</c> if the node that the <see cref="T:Godot.NodePath"/> points to exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNode(Godot.NodePath)">
            <summary>
            <para>Fetches a node. The <see cref="T:Godot.NodePath"/> can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a <c>null instance</c> is returned and attempts to access it will result in an "Attempt to call &lt;method&gt; on a null instance." error.</para>
            <para>Note: Fetching absolute paths only works when the node is inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>).</para>
            <para>Example: Assume your current node is Character and the following tree:</para>
            <para><code>
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            </code></para>
            <para>Possible paths are:</para>
            <para><code>
            get_node("Sword")
            get_node("Backpack/Dagger")
            get_node("../Swamp/Alligator")
            get_node("/root/MyGame")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNodeOrNull(Godot.NodePath)">
            <summary>
            <para>Similar to <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>, but does not raise an error when <c>path</c> does not point to a valid <c>Node</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetParent">
            <summary>
            <para>Returns the parent node of the current node, or an empty <c>Node</c> if the node lacks a parent.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.FindNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Finds a descendant of this node whose name matches <c>mask</c> as in <c>String.match</c> (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.</para>
            <para>If <c>owned</c> is <c>true</c>, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through script, because those scenes don't have an owner.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.FindParent(System.String)">
            <summary>
            <para>Finds the first parent of the current node whose name matches <c>mask</c> as in <c>String.match</c> (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.HasNodeAndResource(Godot.NodePath)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Node.GetNodeAndResource(Godot.NodePath)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Node.IsInsideTree">
            <summary>
            <para>Returns <c>true</c> if this node is currently inside a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsAParentOf(Godot.Node)">
            <summary>
            <para>Returns <c>true</c> if the given node is a direct or indirect child of the current node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsGreaterThan(Godot.Node)">
            <summary>
            <para>Returns <c>true</c> if the given node occurs later in the scene hierarchy than the current node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPath">
            <summary>
            <para>Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPathTo(Godot.Node)">
            <summary>
            <para>Returns the relative <see cref="T:Godot.NodePath"/> from this node to the specified <c>node</c>. Both nodes must be in the same scene or the function will fail.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddToGroup(System.String,System.Boolean)">
            <summary>
            <para>Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>). See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            <para><c>persistent</c> option is used when packing node to <see cref="T:Godot.PackedScene"/> and saving to file. Non-persistent groups aren't stored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveFromGroup(System.String)">
            <summary>
            <para>Removes a node from a group. See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsInGroup(System.String)">
            <summary>
            <para>Returns <c>true</c> if this node is in the specified group. See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.MoveChild(Godot.Node,System.Int32)">
            <summary>
            <para>Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetGroups">
            <summary>
            <para>Returns an array listing the groups that the node is a member of.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Raise">
            <summary>
            <para>Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs (<see cref="T:Godot.Control"/> nodes), because their order of drawing depends on their order in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveAndSkip">
            <summary>
            <para>Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetIndex">
            <summary>
            <para>Returns the node's index, i.e. its position among the siblings of its parent.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTree">
            <summary>
            <para>Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/> function. Example output:</para>
            <para><code>
            TheGame
            TheGame/Menu
            TheGame/Menu/Label
            TheGame/Menu/Camera2D
            TheGame/SplashScreen
            TheGame/SplashScreen/Camera2D
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTreePretty">
            <summary>
            <para>Similar to <see cref="M:Godot.Node.PrintTree"/>, this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees. Example output:</para>
            <para><code>
             ┖╴TheGame
                ┠╴Menu
                ┃  ┠╴Label
                ┃  ┖╴Camera2D
                ┖-SplashScreen
                   ┖╴Camera2D
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateNotification(System.Int32)">
            <summary>
            <para>Notifies the current node and all its children recursively by calling notification() on all of them.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateCall(System.String,Godot.Collections.Array,System.Boolean)">
            <summary>
            <para>Calls the given method (if present) with the arguments given in <c>args</c> on this node and recursively on all its children. If the parent_first argument is <c>true</c> then the method will be called on the current node first, then on all children. If it is <c>false</c> then the children will be called first.</para>
            <param name="args">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcess(System.Boolean)">
            <summary>
            <para>Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see <see cref="T:Godot.OS"/> to change) interval (and the <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> callback will be called if exists). Enabled automatically if <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPhysicsProcessDeltaTime">
            <summary>
            <para>Returns the time elapsed since the last physics-bound frame (see <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>). This is always a constant value in physics processing unless the frames per second is changed in <see cref="T:Godot.OS"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessing">
            <summary>
            <para>Returns <c>true</c> if physics processing is enabled (see <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetProcessDeltaTime">
            <summary>
            <para>Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcess(System.Boolean)">
            <summary>
            <para>Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the <see cref="M:Godot.Node._Process(System.Single)"/> callback will be called if exists). Enabled automatically if <see cref="M:Godot.Node._Process(System.Single)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessPriority(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessing">
            <summary>
            <para>Returns <c>true</c> if processing is enabled (see <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInput(System.Boolean)">
            <summary>
            <para>Enables or disables input processing. This is not required for GUI controls! Enabled automatically if <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing input (see <see cref="M:Godot.Node.SetProcessInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)">
            <summary>
            <para>Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a <see cref="T:Godot.Control"/>). Enabled automatically if <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing unhandled input (see <see cref="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)">
            <summary>
            <para>Enables unhandled key input processing. Enabled automatically if <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledKeyInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing unhandled key input (see <see cref="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.CanProcess">
            <summary>
            <para>Returns <c>true</c> if the node can process while the scene tree is paused (see <see cref="P:Godot.Node.PauseMode"/>). Always returns <c>true</c> if the scene tree is not paused, and <c>false</c> if the node is not in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintStrayNodes">
            <summary>
            <para>Prints all stray nodes (nodes outside the <see cref="T:Godot.SceneTree"/>). Used for debugging. Works only in debug builds.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPositionInParent">
            <summary>
            <para>Returns the node's order in the scene tree branch. For example, if called on the first child node the position is <c>0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetDisplayFolded(System.Boolean)">
            <summary>
            <para>Sets the folded state of the node in the Scene dock.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsDisplayedFolded">
            <summary>
            <para>Returns <c>true</c> if the node is folded (collapsed) in the Scene dock.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInternal(System.Boolean)">
            <summary>
            <para>Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal <see cref="M:Godot.Node._Process(System.Single)"/> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (<see cref="M:Godot.Node.SetProcess(System.Boolean)"/>). Only useful for advanced uses to manipulate built-in nodes behaviour.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInternal">
            <summary>
            <para>Returns <c>true</c> if internal processing is enabled (see <see cref="M:Godot.Node.SetProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)">
            <summary>
            <para>Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (<see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>). Only useful for advanced uses to manipulate built-in nodes behaviour.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessingInternal">
            <summary>
            <para>Returns <c>true</c> if internal physics processing is enabled (see <see cref="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetTree">
            <summary>
            <para>Returns the <see cref="T:Godot.SceneTree"/> that contains this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Duplicate(System.Int32)">
            <summary>
            <para>Duplicates the node, returning a new node.</para>
            <para>You can fine-tune the behavior using the <c>flags</c> (see <see cref="T:Godot.Node.DuplicateFlags"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.ReplaceBy(Godot.Node,System.Boolean)">
            <summary>
            <para>Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetSceneInstanceLoadPlaceholder(System.Boolean)">
            <summary>
            <para>Sets whether this is an instance load placeholder. See <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetSceneInstanceLoadPlaceholder">
            <summary>
            <para>Returns <c>true</c> if this is an instance load placeholder. See <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetViewport">
            <summary>
            <para>Returns the node's <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.QueueFree">
            <summary>
            <para>Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to <see cref="M:Godot.Object.Free"/>. Use <see cref="M:Godot.Object.IsQueuedForDeletion"/> to check whether a node will be deleted at the end of the frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RequestReady">
            <summary>
            <para>Requests that <c>_ready</c> be called again.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the <c>master</c> and <c>puppet</c> keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If <c>recursive</c>, the given peer is recursively set as the master for all children of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNetworkMaster">
            <summary>
            <para>Returns the peer ID of the network master for this node. See <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsNetworkMaster">
            <summary>
            <para>Returns <c>true</c> if the local system is the master of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)">
            <summary>
            <para>Changes the RPC mode for the given <c>method</c> to the given <c>mode</c>. See <see cref="T:Godot.MultiplayerAPI.RPCMode"/>. An alternative is annotating methods and properties with the corresponding keywords (<c>remote</c>, <c>master</c>, <c>puppet</c>, <c>remotesync</c>, <c>mastersync</c>, <c>puppetsync</c>). By default, methods are not exposed to networking (and RPCs). Also see <see cref="M:Godot.Node.Rset(System.String,System.Object)"/> and <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> for properties.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)">
            <summary>
            <para>Changes the RPC mode for the given <c>property</c> to the given <c>mode</c>. See <see cref="T:Godot.MultiplayerAPI.RPCMode"/>. An alternative is annotating methods and properties with the corresponding keywords (<c>remote</c>, <c>master</c>, <c>puppet</c>, <c>remotesync</c>, <c>mastersync</c>, <c>puppetsync</c>). By default, properties are not exposed to networking (and RPCs). Also see <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> and <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> for methods.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Rpc(System.String,System.Object[])">
            <summary>
            <para>Sends a remote procedure call request for the given <c>method</c> to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same <see cref="T:Godot.NodePath"/>, including the exact same node name. Behaviour depends on the RPC configuration for the given method, see <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/>. Methods are not exposed to RPCs by default. Also see <see cref="M:Godot.Node.Rset(System.String,System.Object)"/> and <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> for properties. Returns an empty <c>Variant</c>. Note that you can only safely use RPCs on clients after you received the <c>connected_to_server</c> signal from the <see cref="T:Godot.SceneTree"/>. You also need to keep track of the connection state, either by the <see cref="T:Godot.SceneTree"/> signals like <c>server_disconnected</c> or by checking <c>SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliable(System.String,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> using an unreliable protocol. Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcId(System.Int32,System.String,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> to a specific peer identified by <c>peer_id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliableId(System.Int32,System.String,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> to a specific peer identified by <c>peer_id</c> using an unreliable protocol (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Rset(System.String,System.Object)">
            <summary>
            <para>Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/>. Also see <see cref="M:Godot.Node.Rpc(System.String,System.Object[])"/> for RPCs for methods, most information applies to this method as well.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetId(System.Int32,System.String,System.Object)">
            <summary>
            <para>Remotely changes the property's value on a specific peer identified by <c>peer_id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliable(System.String,System.Object)">
            <summary>
            <para>Remotely changes the property's value on other peers (and locally) using an unreliable protocol.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliableId(System.Int32,System.String,System.Object)">
            <summary>
            <para>Remotely changes property's value on a specific peer identified by <c>peer_id</c> using an unreliable protocol (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.Object">
            <summary>
            <para>Base class for all non built-in types. Everything which is not a built-in type starts the inheritance chain from this class.</para>
            <para>Objects can be constructed from scripting languages, using <c>Object.new()</c> in GDScript, <c>new Object</c> in C#, or the "Construct Object" node in VisualScript.</para>
            <para>Objects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the <see cref="M:Godot.Object.Free"/> function from the script or delete from C++).</para>
            <para>Some derivatives add memory management, such as <see cref="T:Godot.Reference"/> (which keeps a reference count and deletes itself automatically when no longer referenced) and <see cref="T:Godot.Node"/>, which deletes the children tree when deleted.</para>
            <para>Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in <see cref="M:Godot.Object._GetPropertyList"/> and handled in <see cref="M:Godot.Object._Get(System.String)"/> and <see cref="M:Godot.Object._Set(System.String,System.Object)"/>. However, scripting languages and C++ have simpler means to export them.</para>
            <para>Objects also receive notifications (<see cref="M:Godot.Object._Notification(System.Int32)"/>). Notifications are a simple way to notify the object about simple events, so they can all be handled together.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.NotificationPostinitialize">
            <summary>
            <para>Called right when the object is initialized. Not available in script.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.NotificationPredelete">
            <summary>
            <para>Called before the object is about to be deleted.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Deferred">
            <summary>
            <para>Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Persist">
            <summary>
            <para>Persisting connections are saved when the object is serialized to file.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Oneshot">
            <summary>
            <para>One shot connections disconnect themselves after emission.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.ReferenceCounted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Object._Get(System.String)">
            <summary>
            <para>Returns the given property. Returns <c>null</c> if the <c>property</c> does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._GetPropertyList">
            <summary>
            <para>Returns the object's property list as an <see cref="T:Godot.Collections.Array"/> of dictionaries. Dictionaries must contain: name:String, type:int (see TYPE_* enum in <c>@GlobalScope</c>) and optionally: hint:int (see PROPERTY_HINT_* in <c>@GlobalScope</c>), hint_string:String, usage:int (see PROPERTY_USAGE_* in <c>@GlobalScope</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Init">
            <summary>
            <para>The virtual method called upon initialization.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Notification(System.Int32)">
            <summary>
            <para>Notify the object internally using an ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Set(System.String,System.Object)">
            <summary>
            <para>Sets a property. Returns <c>true</c> if the <c>property</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Free">
            <summary>
            <para>Deletes the object from memory.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetClass">
            <summary>
            <para>Returns the object's class as a <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsClass(System.String)">
            <summary>
            <para>Returns <c>true</c> if the object inherits from the given <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Set(System.String,System.Object)">
            <summary>
            <para>Set property into the object.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Get(System.String)">
            <summary>
            <para>Returns a <c>Variant</c> for a <c>property</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetIndexed(Godot.NodePath,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Object.GetIndexed(Godot.NodePath)">
            <summary>
            <para>Get indexed object property by String.</para>
            <para>Property indices get accessed with colon separation, for example: <c>position:x</c></para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetPropertyList">
            <summary>
            <para>Returns the list of properties as an <see cref="T:Godot.Collections.Array"/> of dictionaries. Dictionaries contain: name:String, type:int (see TYPE_* enum in <c>@GlobalScope</c>) and optionally: hint:int (see PROPERTY_HINT_* in <c>@GlobalScope</c>), hint_string:String, usage:int (see PROPERTY_USAGE_* in <c>@GlobalScope</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMethodList">
            <summary>
            <para>Returns the object's methods and their signatures as an <see cref="T:Godot.Collections.Array"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Notification(System.Int32,System.Boolean)">
            <summary>
            <para>Notify the object of something.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetInstanceId">
            <summary>
            <para>Returns the object's unique instance ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetScript(Godot.Reference)">
            <summary>
            <para>Set a script into the object, scripts extend the object functionality.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetScript">
            <summary>
            <para>Returns the object's <see cref="T:Godot.Script"/> or <c>null</c> if one doesn't exist.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetMeta(System.String,System.Object)">
            <summary>
            <para>Set a metadata into the object. Metadata is serialized. Metadata can be anything.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMeta(System.String)">
            <summary>
            <para>Returns the object's metadata for the given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.HasMeta(System.String)">
            <summary>
            <para>Returns <c>true</c> if a metadata is found with the given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMetaList">
            <summary>
            <para>Returns the object's metadata as a <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.AddUserSignal(System.String,Godot.Collections.Array)">
            <summary>
            <para>Adds a user-defined <c>signal</c>. Arguments are optional, but can be added as an <see cref="T:Godot.Collections.Array"/> of dictionaries, each containing "name" and "type" (from <c>@GlobalScope</c> TYPE_*).</para>
            <param name="arguments">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Object.HasUserSignal(System.String)">
            <summary>
            <para>Returns <c>true</c> if the given user-defined <c>signal</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.EmitSignal(System.String,System.Object[])">
            <summary>
            <para>Emits the given <c>signal</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Call(System.String,System.Object[])">
            <summary>
            <para>Calls the <c>method</c> on the object and returns a result. Pass parameters as a comma separated list.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.CallDeferred(System.String,System.Object[])">
            <summary>
            <para>Calls the <c>method</c> on the object during idle time and returns a result. Pass parameters as a comma separated list.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetDeferred(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Object.Callv(System.String,Godot.Collections.Array)">
            <summary>
            <para>Calls the <c>method</c> on the object and returns a result. Pass parameters as an <see cref="T:Godot.Collections.Array"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.HasMethod(System.String)">
            <summary>
            <para>Returns <c>true</c> if the object contains the given <c>method</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalList">
            <summary>
            <para>Returns the list of signals as an <see cref="T:Godot.Collections.Array"/> of dictionaries.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalConnectionList(System.String)">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of connections for the given <c>signal</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetIncomingConnections">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of dictionaries with information about signals that are connected to the object.</para>
            <para>Inside each <see cref="T:Godot.Collections.Dictionary"/> there are 3 fields:</para>
            <para>- "source" is a reference to signal emitter.</para>
            <para>- "signal_name" is name of connected signal.</para>
            <para>- "method_name" is a name of method to which signal is connected.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Connect(System.String,Godot.Object,System.String,Godot.Collections.Array,System.Int32)">
            <summary>
            <para>Connects a <c>signal</c> to a <c>method</c> on a <c>target</c> object. Pass optional <c>binds</c> to the call. Use <c>flags</c> to set deferred or one shot connections. See <c>CONNECT_*</c> constants. A <c>signal</c> can only be connected once to a <c>method</c>. It will throw an error if already connected. To avoid this, first use <see cref="M:Godot.Object.IsConnected(System.String,Godot.Object,System.String)"/> to check for existing connections.</para>
            <param name="binds">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Object.Disconnect(System.String,Godot.Object,System.String)">
            <summary>
            <para>Disconnects a <c>signal</c> from a <c>method</c> on the given <c>target</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsConnected(System.String,Godot.Object,System.String)">
            <summary>
            <para>Returns <c>true</c> if a connection exists for a given <c>signal</c>, <c>target</c>, and <c>method</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetBlockSignals(System.Boolean)">
            <summary>
            <para>If set to true, signal emission is blocked.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsBlockingSignals">
            <summary>
            <para>Returns <c>true</c> if signal emission blocking is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.PropertyListChangedNotify">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Object.SetMessageTranslation(System.Boolean)">
            <summary>
            <para>Define whether the object can translate strings (with calls to <see cref="M:Godot.Object.Tr(System.String)"/>). Default is true.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.CanTranslateMessages">
            <summary>
            <para>Returns <c>true</c> if the object can translate strings.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Tr(System.String)">
            <summary>
            <para>Translate a message. Only works if message translation is enabled (which it is by default). See <see cref="M:Godot.Object.SetMessageTranslation(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsQueuedForDeletion">
            <summary>
            <para>Returns <c>true</c> if the <c>queue_free</c> method was called for the object.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceLoader">
            <summary>
            <para>Resource Loader. This is a static object accessible as <c>ResourceLoader</c>. GDScript has a simplified load() function, though.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.LoadInteractive(System.String,System.String)">
            <summary>
            <para>Load a resource interactively, the returned object allows to load with high granularity.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Load(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetRecognizedExtensionsForType(System.String)">
            <summary>
            <para>Return the list of recognized extensions for a resource type.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.SetAbortOnMissingResources(System.Boolean)">
            <summary>
            <para>Change the behavior on missing sub-resources. Default is to abort load.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetDependencies(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.HasCached(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Exists(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Has(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GD.Spkey">
            <summary>
            <para>Scancodes with this bit applied are non printable.</para>
            </summary>
        </member>
        <member name="F:Godot.Margin.Left">
            <summary>
            <para>Left margin, used usually for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/> derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Margin.Top">
            <summary>
            <para>Top margin, used usually for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/> derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Margin.Right">
            <summary>
            <para>Right margin, used usually for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/> derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Margin.Bottom">
            <summary>
            <para>Bottom margin, used usually for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/> derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Corner.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Corner.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Orientation.Vertical">
            <summary>
            <para>General vertical alignment, used usually for <see cref="T:Godot.Separator"/>, <see cref="T:Godot.ScrollBar"/>, <see cref="T:Godot.Slider"/>, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.Orientation.Horizontal">
            <summary>
            <para>General horizontal alignment, used usually for <see cref="T:Godot.Separator"/>, <see cref="T:Godot.ScrollBar"/>, <see cref="T:Godot.Slider"/>, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Left">
            <summary>
            <para>Horizontal left alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Center">
            <summary>
            <para>Horizontal center alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Right">
            <summary>
            <para>Horizontal right alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Top">
            <summary>
            <para>Vertical top alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Center">
            <summary>
            <para>Vertical center alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Bottom">
            <summary>
            <para>Vertical bottom alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Escape">
            <summary>
            <para>Escape Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Tab">
            <summary>
            <para>Tab Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backtab">
            <summary>
            <para>Shift-Tab Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backspace">
            <summary>
            <para>Backspace Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Enter">
            <summary>
            <para>Return Key (On Main Keyboard)</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpEnter">
            <summary>
            <para>Enter Key (On Numpad)</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Insert">
            <summary>
            <para>Insert Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Delete">
            <summary>
            <para>Delete Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pause">
            <summary>
            <para>Pause Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Print">
            <summary>
            <para>Printscreen Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sysreq">
            <summary>
            <para>System Request Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Clear">
            <summary>
            <para>Clear Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Home">
            <summary>
            <para>Home Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.End">
            <summary>
            <para>End Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Left">
            <summary>
            <para>Left Arrow Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Up">
            <summary>
            <para>Up Arrow Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Right">
            <summary>
            <para>Right Arrow Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Down">
            <summary>
            <para>Down Arrow Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pageup">
            <summary>
            <para>Pageup Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pagedown">
            <summary>
            <para>Pagedown Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Shift">
            <summary>
            <para>Shift Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Control">
            <summary>
            <para>Control Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Meta">
            <summary>
            <para>Meta Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Alt">
            <summary>
            <para>Alt Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Capslock">
            <summary>
            <para>Capslock Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numlock">
            <summary>
            <para>Numlock Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Scrolllock">
            <summary>
            <para>Scrolllock Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F1">
            <summary>
            <para>F1 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F2">
            <summary>
            <para>F2 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F3">
            <summary>
            <para>F3 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F4">
            <summary>
            <para>F4 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F5">
            <summary>
            <para>F5 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F6">
            <summary>
            <para>F6 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F7">
            <summary>
            <para>F7 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F8">
            <summary>
            <para>F8 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F9">
            <summary>
            <para>F9 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F10">
            <summary>
            <para>F10 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F11">
            <summary>
            <para>F11 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F12">
            <summary>
            <para>F12 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F13">
            <summary>
            <para>F13 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F14">
            <summary>
            <para>F14 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F15">
            <summary>
            <para>F15 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F16">
            <summary>
            <para>F16 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpMultiply">
            <summary>
            <para>Multiply Key on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpDivide">
            <summary>
            <para>Divide Key on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpSubtract">
            <summary>
            <para>Subtract Key on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpPeriod">
            <summary>
            <para>Period Key on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpAdd">
            <summary>
            <para>Add Key on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp0">
            <summary>
            <para>Number 0 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp1">
            <summary>
            <para>Number 1 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp2">
            <summary>
            <para>Number 2 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp3">
            <summary>
            <para>Number 3 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp4">
            <summary>
            <para>Number 4 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp5">
            <summary>
            <para>Number 5 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp6">
            <summary>
            <para>Number 6 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp7">
            <summary>
            <para>Number 7 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp8">
            <summary>
            <para>Number 8 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp9">
            <summary>
            <para>Number 9 on Numpad</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperL">
            <summary>
            <para>Left Super Key (Windows Key)</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperR">
            <summary>
            <para>Right Super Key (Windows Key)</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Menu">
            <summary>
            <para>Context menu key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperL">
            <summary>
            <para>Left Hyper Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperR">
            <summary>
            <para>Right Hyper Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Help">
            <summary>
            <para>Help key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionL">
            <summary>
            <para>Left Direction Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionR">
            <summary>
            <para>Right Direction Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Back">
            <summary>
            <para>Back key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Forward">
            <summary>
            <para>Forward key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Stop">
            <summary>
            <para>Stop key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Refresh">
            <summary>
            <para>Refresh key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumedown">
            <summary>
            <para>Volume down key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumemute">
            <summary>
            <para>Mute volume key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumeup">
            <summary>
            <para>Volume up key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassboost">
            <summary>
            <para>Bass Boost Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassup">
            <summary>
            <para>Bass Up Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassdown">
            <summary>
            <para>Bass Down Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebleup">
            <summary>
            <para>Treble Up Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebledown">
            <summary>
            <para>Treble Down Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaplay">
            <summary>
            <para>Media play key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediastop">
            <summary>
            <para>Media stop key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaprevious">
            <summary>
            <para>Previous song key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Medianext">
            <summary>
            <para>Next song key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediarecord">
            <summary>
            <para>Media record key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Homepage">
            <summary>
            <para>Home page key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Favorites">
            <summary>
            <para>Favorites key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Search">
            <summary>
            <para>Search key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Standby">
            <summary>
            <para>Standby Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Openurl">
            <summary>
            <para>Open URL / Launch Browser Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmail">
            <summary>
            <para>Launch Mail Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmedia">
            <summary>
            <para>Launch Media Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch0">
            <summary>
            <para>Launch Shortcut 0 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch1">
            <summary>
            <para>Launch Shortcut 1 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch2">
            <summary>
            <para>Launch Shortcut 2 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch3">
            <summary>
            <para>Launch Shortcut 3 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch4">
            <summary>
            <para>Launch Shortcut 4 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch5">
            <summary>
            <para>Launch Shortcut 5 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch6">
            <summary>
            <para>Launch Shortcut 6 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch7">
            <summary>
            <para>Launch Shortcut 7 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch8">
            <summary>
            <para>Launch Shortcut 8 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch9">
            <summary>
            <para>Launch Shortcut 9 Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launcha">
            <summary>
            <para>Launch Shortcut A Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchb">
            <summary>
            <para>Launch Shortcut B Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchc">
            <summary>
            <para>Launch Shortcut C Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchd">
            <summary>
            <para>Launch Shortcut D Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launche">
            <summary>
            <para>Launch Shortcut E Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchf">
            <summary>
            <para>Launch Shortcut F Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Unknown">
            <summary>
            <para>Unknown Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Space">
            <summary>
            <para>Space Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclam">
            <summary>
            <para>! key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quotedbl">
            <summary>
            <para>" key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numbersign">
            <summary>
            <para># key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Dollar">
            <summary>
            <para>$ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Percent">
            <summary>
            <para>% key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ampersand">
            <summary>
            <para>&amp; key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Apostrophe">
            <summary>
            <para>' key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenleft">
            <summary>
            <para>( key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenright">
            <summary>
            <para>) key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asterisk">
            <summary>
            <para>* key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plus">
            <summary>
            <para>+ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Comma">
            <summary>
            <para>, key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Minus">
            <summary>
            <para>- key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Period">
            <summary>
            <para>. key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Slash">
            <summary>
            <para>/ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key0">
            <summary>
            <para>Number 0</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key1">
            <summary>
            <para>Number 1</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key2">
            <summary>
            <para>Number 2</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key3">
            <summary>
            <para>Number 3</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key4">
            <summary>
            <para>Number 4</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key5">
            <summary>
            <para>Number 5</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key6">
            <summary>
            <para>Number 6</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key7">
            <summary>
            <para>Number 7</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key8">
            <summary>
            <para>Number 8</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key9">
            <summary>
            <para>Number 9</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Colon">
            <summary>
            <para>: key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Semicolon">
            <summary>
            <para>; key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Less">
            <summary>
            <para>Lower than key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Equal">
            <summary>
            <para>= key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Greater">
            <summary>
            <para>Greater than key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Question">
            <summary>
            <para>? key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.At">
            <summary>
            <para>@ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.A">
            <summary>
            <para>A Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.B">
            <summary>
            <para>B Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.C">
            <summary>
            <para>C Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.D">
            <summary>
            <para>D Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.E">
            <summary>
            <para>E Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F">
            <summary>
            <para>F Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.G">
            <summary>
            <para>G Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.H">
            <summary>
            <para>H Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.I">
            <summary>
            <para>I Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.J">
            <summary>
            <para>J Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.K">
            <summary>
            <para>K Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.L">
            <summary>
            <para>L Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.M">
            <summary>
            <para>M Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.N">
            <summary>
            <para>N Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.O">
            <summary>
            <para>O Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.P">
            <summary>
            <para>P Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Q">
            <summary>
            <para>Q Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.R">
            <summary>
            <para>R Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.S">
            <summary>
            <para>S Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.T">
            <summary>
            <para>T Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.U">
            <summary>
            <para>U Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.V">
            <summary>
            <para>V Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.W">
            <summary>
            <para>W Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.X">
            <summary>
            <para>X Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Y">
            <summary>
            <para>Y Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Z">
            <summary>
            <para>Z Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketleft">
            <summary>
            <para>[ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backslash">
            <summary>
            <para>\ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketright">
            <summary>
            <para>] key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciicircum">
            <summary>
            <para>^ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Underscore">
            <summary>
            <para>_ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quoteleft">
            <summary>
            <para>Left Quote Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceleft">
            <summary>
            <para>{ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bar">
            <summary>
            <para>| key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceright">
            <summary>
            <para>} key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciitilde">
            <summary>
            <para>~ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Nobreakspace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclamdown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cent">
            <summary>
            <para>¢ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sterling">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.KeyList.Currency">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yen">
            <summary>
            <para>Yen Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Brokenbar">
            <summary>
            <para>¦ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Section">
            <summary>
            <para>§ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Diaeresis">
            <summary>
            <para>¨ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Copyright">
            <summary>
            <para>© key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ordfeminine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotleft">
            <summary>
            <para>« key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Notsign">
            <summary>
            <para>» key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Hyphen">
            <summary>
            <para>‐ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Registered">
            <summary>
            <para>® key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Macron">
            <summary>
            <para>Macron Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Degree">
            <summary>
            <para>° key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plusminus">
            <summary>
            <para>± key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Twosuperior">
            <summary>
            <para>² key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threesuperior">
            <summary>
            <para>³ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acute">
            <summary>
            <para>´ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mu">
            <summary>
            <para>µ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Paragraph">
            <summary>
            <para>Paragraph Key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Periodcentered">
            <summary>
            <para>· key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cedilla">
            <summary>
            <para>¬ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onesuperior">
            <summary>
            <para>¹ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Masculine">
            <summary>
            <para>♂ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotright">
            <summary>
            <para>» key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onequarter">
            <summary>
            <para>¼ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onehalf">
            <summary>
            <para>½ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threequarters">
            <summary>
            <para>¾ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Questiondown">
            <summary>
            <para>¿ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Agrave">
            <summary>
            <para>à key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aacute">
            <summary>
            <para>á key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acircumflex">
            <summary>
            <para>â key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Atilde">
            <summary>
            <para>ã key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Adiaeresis">
            <summary>
            <para>ä key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aring">
            <summary>
            <para>å key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ae">
            <summary>
            <para>æ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ccedilla">
            <summary>
            <para>ç key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Egrave">
            <summary>
            <para>è key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eacute">
            <summary>
            <para>é key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ecircumflex">
            <summary>
            <para>ê key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ediaeresis">
            <summary>
            <para>ë key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Igrave">
            <summary>
            <para>ì key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Iacute">
            <summary>
            <para>í key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Icircumflex">
            <summary>
            <para>î key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Idiaeresis">
            <summary>
            <para>ë key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eth">
            <summary>
            <para>ð key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ntilde">
            <summary>
            <para>ñ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ograve">
            <summary>
            <para>ò key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Oacute">
            <summary>
            <para>ó key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ocircumflex">
            <summary>
            <para>ô key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Otilde">
            <summary>
            <para>õ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Odiaeresis">
            <summary>
            <para>ö key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Multiply">
            <summary>
            <para>× key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ooblique">
            <summary>
            <para>ø key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ugrave">
            <summary>
            <para>ù key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Uacute">
            <summary>
            <para>ú key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ucircumflex">
            <summary>
            <para>û key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Udiaeresis">
            <summary>
            <para>ü key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yacute">
            <summary>
            <para>ý key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Thorn">
            <summary>
            <para>þ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ssharp">
            <summary>
            <para>ß key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Division">
            <summary>
            <para>÷ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ydiaeresis">
            <summary>
            <para>ÿ key</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.CodeMask">
            <summary>
            <para>Key Code Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.ModifierMask">
            <summary>
            <para>Modifier Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskShift">
            <summary>
            <para>Shift Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskAlt">
            <summary>
            <para>Alt Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskMeta">
            <summary>
            <para>Meta Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCtrl">
            <summary>
            <para>CTRL Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCmd">
            <summary>
            <para>CMD Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskKpad">
            <summary>
            <para>Keypad Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskGroupSwitch">
            <summary>
            <para>Group Switch Key Mask</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Left">
            <summary>
            <para>Left Mouse Button</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Right">
            <summary>
            <para>Right Mouse Button</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Middle">
            <summary>
            <para>Middle Mouse Button</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Xbutton1">
            <summary>
            <para>Extra Mouse Button 1</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Xbutton2">
            <summary>
            <para>Extra Mouse Button 2</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelUp">
            <summary>
            <para>Mouse wheel up</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelDown">
            <summary>
            <para>Mouse wheel down</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelLeft">
            <summary>
            <para>Mouse wheel left button</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelRight">
            <summary>
            <para>Mouse wheel right button</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskLeft">
            <summary>
            <para>Left Mouse Button Mask</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskRight">
            <summary>
            <para>Right Mouse Button Mask</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskMiddle">
            <summary>
            <para>Middle Mouse Button Mask</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskXbutton1">
            <summary>
            <para>Extra Mouse Button 1 Mask</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskXbutton2">
            <summary>
            <para>Extra Mouse Button 2 Mask</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button0">
            <summary>
            <para>Joypad Button 0</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button1">
            <summary>
            <para>Joypad Button 1</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button2">
            <summary>
            <para>Joypad Button 2</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button3">
            <summary>
            <para>Joypad Button 3</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button4">
            <summary>
            <para>Joypad Button 4</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button5">
            <summary>
            <para>Joypad Button 5</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button6">
            <summary>
            <para>Joypad Button 6</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button7">
            <summary>
            <para>Joypad Button 7</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button8">
            <summary>
            <para>Joypad Button 8</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button9">
            <summary>
            <para>Joypad Button 9</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button10">
            <summary>
            <para>Joypad Button 10</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button11">
            <summary>
            <para>Joypad Button 11</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button12">
            <summary>
            <para>Joypad Button 12</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button13">
            <summary>
            <para>Joypad Button 13</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button14">
            <summary>
            <para>Joypad Button 14</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button15">
            <summary>
            <para>Joypad Button 15</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.ButtonMax">
            <summary>
            <para>Joypad Button 16</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyCircle">
            <summary>
            <para>DUALSHOCK circle button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyX">
            <summary>
            <para>DUALSHOCK X button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonySquare">
            <summary>
            <para>DUALSHOCK square button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyTriangle">
            <summary>
            <para>DUALSHOCK triangle button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxB">
            <summary>
            <para>XBOX controller B button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxA">
            <summary>
            <para>XBOX controller A button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxX">
            <summary>
            <para>XBOX controller X button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxY">
            <summary>
            <para>XBOX controller Y button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsA">
            <summary>
            <para>DualShock controller A button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsB">
            <summary>
            <para>DualShock controller B button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsX">
            <summary>
            <para>DualShock controller X button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsY">
            <summary>
            <para>DualShock controller Y button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Select">
            <summary>
            <para>Joypad Button Select</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Start">
            <summary>
            <para>Joypad Button Start</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadUp">
            <summary>
            <para>Joypad DPad Up</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadDown">
            <summary>
            <para>Joypad DPad Down</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadLeft">
            <summary>
            <para>Joypad DPad Left</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadRight">
            <summary>
            <para>Joypad DPad Right</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L">
            <summary>
            <para>Joypad Left Shoulder Button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L2">
            <summary>
            <para>Joypad Left Trigger</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L3">
            <summary>
            <para>Joypad Left Stick Click</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R">
            <summary>
            <para>Joypad Right Shoulder Button</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R2">
            <summary>
            <para>Joypad Right Trigger</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R3">
            <summary>
            <para>Joypad Right Stick Click</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis0">
            <summary>
            <para>Joypad Left Stick Horizontal Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis1">
            <summary>
            <para>Joypad Left Stick Vertical Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis2">
            <summary>
            <para>Joypad Right Stick Horizontal Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis3">
            <summary>
            <para>Joypad Right Stick Vertical Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis6">
            <summary>
            <para>Joypad Left Trigger Analog Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis7">
            <summary>
            <para>Joypad Right Trigger Analog Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis9">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AxisMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogLx">
            <summary>
            <para>Joypad Left Stick Horizontal Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogLy">
            <summary>
            <para>Joypad Left Stick Vertical Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogRx">
            <summary>
            <para>Joypad Right Stick Horizontal Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogRy">
            <summary>
            <para>Joypad Right Stick Vertical Axis</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogL2">
            <summary>
            <para>Joypad Left Analog Trigger</para>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogR2">
            <summary>
            <para>Joypad Right Analog Trigger</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.NoteOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.NoteOn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.Aftertouch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ControlChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ProgramChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ChannelPressure">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.PitchBend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Error.Ok">
            <summary>
            <para>Functions that return Error return OK when no error occurred. Most functions don't return errors and/or just print errors to STDOUT.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Failed">
            <summary>
            <para>Generic error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unavailable">
            <summary>
            <para>Unavailable error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unconfigured">
            <summary>
            <para>Unconfigured error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unauthorized">
            <summary>
            <para>Unauthorized error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ParameterRangeError">
            <summary>
            <para>Parameter range error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.OutOfMemory">
            <summary>
            <para>Out of memory (OOM) error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileNotFound">
            <summary>
            <para>File: Not found error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadDrive">
            <summary>
            <para>File: Bad drive error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadPath">
            <summary>
            <para>File: Bad path error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileNoPermission">
            <summary>
            <para>File: No permission error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileAlreadyInUse">
            <summary>
            <para>File: Already in use error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantOpen">
            <summary>
            <para>File: Can't open error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantWrite">
            <summary>
            <para>File: Can't write error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantRead">
            <summary>
            <para>File: Can't read error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileUnrecognized">
            <summary>
            <para>File: Unrecognized error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCorrupt">
            <summary>
            <para>File: Corrupt error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileMissingDependencies">
            <summary>
            <para>File: Missing dependencies error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileEof">
            <summary>
            <para>File: End of file (EOF) error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantOpen">
            <summary>
            <para>Can't open error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantCreate">
            <summary>
            <para>Can't create error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ParseError">
            <summary>
            <para>Parse error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.QueryFailed">
            <summary>
            <para>Query failed error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyInUse">
            <summary>
            <para>Already in use error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Locked">
            <summary>
            <para>Locked error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Timeout">
            <summary>
            <para>Timeout error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantAcquireResource">
            <summary>
            <para>Can't acquire resource error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidData">
            <summary>
            <para>Invalid data error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidParameter">
            <summary>
            <para>Invalid parameter error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyExists">
            <summary>
            <para>Already exists error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DoesNotExist">
            <summary>
            <para>Does not exist error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantRead">
            <summary>
            <para>Database: Read error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantWrite">
            <summary>
            <para>Database: Write error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CompilationFailed">
            <summary>
            <para>Compilation failed error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.MethodNotFound">
            <summary>
            <para>Method not found error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.LinkFailed">
            <summary>
            <para>Linking failed error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ScriptFailed">
            <summary>
            <para>Script failed error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CyclicLink">
            <summary>
            <para>Cycling link (import cycle) error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Busy">
            <summary>
            <para>Busy error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Help">
            <summary>
            <para>Help error</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Bug">
            <summary>
            <para>Bug error</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.None">
            <summary>
            <para>No hint for edited property.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Range">
            <summary>
            <para>Hints that the string is a range, defined as "min,max" or "min,max,step". This is valid for integers and floats.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpRange">
            <summary>
            <para>Hints that the string is an exponential range, defined as "min,max" or "min,max,step". This is valid for integers and floats.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Enum">
            <summary>
            <para>Property hint for an enumerated value, like "Hello,Something,Else". This is valid for integer, float and string properties.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpEasing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Length">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.KeyAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Flags">
            <summary>
            <para>Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like "Bit0,Bit1,Bit2,Bit3,,Bit5". Valid only for integers.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dRender">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dPhysics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dRender">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dPhysics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.File">
            <summary>
            <para>String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like "*.doc".</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Dir">
            <summary>
            <para>String property is a directory (so pop up a file dialog when edited).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalDir">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ResourceType">
            <summary>
            <para>String property is a resource, so open the resource popup menu when edited.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.MultilineText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.PlaceholderText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ColorNoAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossy">
            <summary>
            <para>Hints that the image is compressed using lossy compression.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossless">
            <summary>
            <para>Hints that the image is compressed using lossless compression.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Storage">
            <summary>
            <para>Property will be used as storage (default).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Editor">
            <summary>
            <para>Property will be visible in editor (default).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.EditorHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checkable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Internationalized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Group">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.NoInstanceState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.RestartIfChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.ScriptVariable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Default">
            <summary>
            <para>Default usage (storage and editor).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.DefaultIntl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Noeditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Normal">
            <summary>
            <para>Flag for normal method</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Editor">
            <summary>
            <para>Flag for editor method</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Noscript">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Const">
            <summary>
            <para>Flag for constant method</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Virtual">
            <summary>
            <para>Flag for virtual method</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.FromScript">
            <summary>
            <para>Flag for method from script</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Default">
            <summary>
            <para>Default method flags</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Nil">
            <summary>
            <para>Variable is of type nil (only applied for null).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Bool">
            <summary>
            <para>Variable is of type <see cref="T:System.Boolean"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Int">
            <summary>
            <para>Variable is of type <see cref="T:System.Int32"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Real">
            <summary>
            <para>Variable is of type <see cref="T:System.Single"/>/real.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.String">
            <summary>
            <para>Variable is of type <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rect2">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform2d">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Plane">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Plane"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Quat">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Quat"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Aabb">
            <summary>
            <para>Variable is of type <see cref="T:Godot.AABB"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Basis">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Basis"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Color">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.NodePath">
            <summary>
            <para>Variable is of type <see cref="T:Godot.NodePath"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rid">
            <summary>
            <para>Variable is of type <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Object">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Dictionary">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Collections.Dictionary"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Collections.Array"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.RawArray">
            <summary>
            <para>Variable is of type <see cref="T:System.Byte"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.IntArray">
            <summary>
            <para>Variable is of type <see cref="T:System.Int32"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.RealArray">
            <summary>
            <para>Variable is of type <see cref="T:System.Single"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.StringArray">
            <summary>
            <para>Variable is of type <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.ColorArray">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Max">
            <summary>
            <para>Marker for end of type constants.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Equal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.NotEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Less">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.LessEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Greater">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.GreaterEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Subtract">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Multiply">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Divide">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Positive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Module">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.StringConcat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitAnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitOr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitXor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitNegate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.And">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Or">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Xor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Not">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.In">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Max">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Single,System.Single)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, b).
            </summary>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Int32,System.Int32)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, b).
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.Length(System.String)">
            <summary>
            Return the length of the string in characters.
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog">
            <summary>
            <para>This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.</para>
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogText">
            <summary>
            <para>The text displayed by this dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogHideOnOk">
            <summary>
            <para>If <c>true</c>, the dialog is hidden when the OK button is pressed. You can set it to <c>false</c> if you want to do e.g. input validation when receiving the <c>confirmed</c> signal, and handle hiding the dialog in your own logic. Default value: <c>true</c>.</para>
            <para>Note: Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example <see cref="T:Godot.FileDialog"/> defaults to <c>false</c>, and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such this property can't be used in <see cref="T:Godot.FileDialog"/> to disable hiding the dialog when pressing OK.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetOk">
            <summary>
            <para>Return the OK Button.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetLabel">
            <summary>
            <para>Return the label used for built-in text.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddButton(System.String,System.Boolean,System.String)">
            <summary>
            <para>Adds a button with label text and a custom action to the dialog and returns the created button. action will be passed to the <c>custom_action</c> signal when pressed.</para>
            <para>If <c>true</c>, right will place the button to the right of any sibling buttons. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddCancel(System.String)">
            <summary>
            <para>Adds a button with label name and a cancel action to the dialog and returns the created button.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.RegisterTextEnter(Godot.Node)">
            <summary>
            <para>Registers a <see cref="T:Godot.LineEdit"/> in the dialog. When the enter key is pressed, the dialog will be accepted.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite">
            <summary>
            <para>Animations are created using a <see cref="T:Godot.SpriteFrames"/> resource, which can be configured in the editor via the SpriteFrames panel.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Frames">
            <summary>
            <para>The <see cref="T:Godot.SpriteFrames"/> resource containing the animation(s).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Animation">
            <summary>
            <para>The current animation from the <c>frames</c> resource. If this value changes, the <c>frame</c> counter is reset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Frame">
            <summary>
            <para>The displayed animation frame's index.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.SpeedScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Playing">
            <summary>
            <para>If <c>true</c>, the <see cref="P:Godot.AnimatedSprite.Animation"/> is currently playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Centered">
            <summary>
            <para>If <c>true</c>, texture will be centered. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.Play(System.String,System.Boolean)">
            <summary>
            <para>Play the animation set in parameter. If no parameter is provided, the current animation is played. Property <c>backwards</c> plays the animation in reverse if set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.Stop">
            <summary>
            <para>Stop the current animation (does not reset the frame counter).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.IsPlaying">
            <summary>
            <para>Return true if an animation if currently being played.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite3D">
            <summary>
            <para>Animations are created using a <see cref="T:Godot.SpriteFrames"/> resource, which can be configured in the editor via the SpriteFrames panel.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frames">
            <summary>
            <para>The <see cref="T:Godot.SpriteFrames"/> resource containing the animation(s).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Animation">
            <summary>
            <para>The current animation from the <c>frames</c> resource. If this value changes, the <c>frame</c> counter is reset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frame">
            <summary>
            <para>The displayed animation frame's index.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Playing">
            <summary>
            <para>If <c>true</c>, the <see cref="P:Godot.AnimatedSprite3D.Animation"/> is currently playing.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Play(System.String)">
            <summary>
            <para>Play the animation set in parameter. If no parameter is provided, the current animation is played.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Stop">
            <summary>
            <para>Stop the current animation (does not reset the frame counter).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.IsPlaying">
            <summary>
            <para>Return true if an animation if currently being played.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedTexture">
            <summary>
            <para><c>AnimatedTexture</c> is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike <see cref="T:Godot.AnimationPlayer"/> or <see cref="T:Godot.AnimatedSprite"/>, it isn't a <see cref="T:Godot.Node"/>, but has the advantage of being usable anywhere a <see cref="T:Godot.Texture"/> resource can be used, e.g. in a <see cref="T:Godot.TileSet"/>.</para>
            <para>The playback of the animation is controlled by the <see cref="P:Godot.AnimatedTexture.Fps"/> property as well as each frame's optional delay (see <see cref="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)"/>). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame.</para>
            <para><c>AnimatedTexture</c> currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimatedTexture.MaxFrames">
            <summary>
            <para>The maximum number of frames supported by <c>AnimatedTexture</c>. If you need more frames in your animation, use <see cref="T:Godot.AnimationPlayer"/> or <see cref="T:Godot.AnimatedSprite"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Frames">
            <summary>
            <para>Number of frames to use in the animation. While you can create the frames independently with <see cref="M:Godot.AnimatedTexture.SetFrameTexture(System.Int32,Godot.Texture)"/>, you need to set this value for the animation to take new frames into account. The maximum number of frames is [constant MAX_FRAMES]. Default value: 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Fps">
            <summary>
            <para>Animation speed in frames per second. This value defines the default time interval between two frames of the animation, and thus the overall duration of the animation loop based on the <see cref="P:Godot.AnimatedTexture.Frames"/> property. A value of 0 means no predefined number of frames per second, the animation will play according to each frame's frame delay (see <see cref="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)"/>). Default value: 4.</para>
            <para>For example, an animation with 8 frames, no frame delay and a <c>fps</c> value of 2 will run for 4 seconds, with each frame lasting 0.5 seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.SetFrameTexture(System.Int32,Godot.Texture)">
            <summary>
            <para>Assigns a <see cref="T:Godot.Texture"/> to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID <see cref="P:Godot.AnimatedTexture.Frames"/> - 1.</para>
            <para>You can define any number of textures up to [constant MAX_FRAMES], but keep in mind that only frames from 0 to <see cref="P:Godot.AnimatedTexture.Frames"/> - 1 will be part of the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.GetFrameTexture(System.Int32)">
            <summary>
            <para>Returns the given frame's <see cref="T:Godot.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)">
            <summary>
            <para>Sets an additional delay (in seconds) between this frame and the next one, that will be added to the time interval defined by <see cref="P:Godot.AnimatedTexture.Fps"/>. By default, frames have no delay defined. If a delay value is defined, the final time interval between this frame and the next will be <c>1.0 / fps + delay</c>.</para>
            <para>For example, for an animation with 3 frames, 2 FPS and a frame delay on the second frame of 1.2, the resulting playback will be:</para>
            <para><code>
            Frame 0: 0.5 s (1 / fps)
            Frame 1: 1.7 s (1 / fps + 1.2)
            Frame 2: 0.5 s (1 / fps)
            Total duration: 2.7 s
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.GetFrameDelay(System.Int32)">
            <summary>
            <para>Returns the given frame's delay value.</para>
            </summary>
        </member>
        <member name="T:Godot.Animation">
            <summary>
            <para>An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.</para>
            <para><code>
            # This creates an animation that makes the node "Enemy" move to the right by
            # 100 pixels in 1 second.
            var animation = Animation.new()
            var track_index = animation.add_track(Animation.TYPE_VALUE)
            animation.track_set_path(track_index, "Enemy:position.x")
            animation.track_insert_key(track_index, 0.0, 0)
            animation.track_insert_key(track_index, 0.5, 100)
            </code></para>
            <para>Animations are just data containers, and must be added to nodes such as an <see cref="T:Godot.AnimationPlayer"/> or <see cref="T:Godot.AnimationTreePlayer"/> to be played back.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Value">
            <summary>
            <para>Value tracks set values in node properties, but only those which can be Interpolated.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Transform">
            <summary>
            <para>Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Method">
            <summary>
            <para>Method tracks call functions with given arguments per key.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Bezier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Animation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Continuous">
            <summary>
            <para>Update between keyframes.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Discrete">
            <summary>
            <para>Update at the keyframes and hold the value.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Trigger">
            <summary>
            <para>Update at the keyframes.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Capture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Nearest">
            <summary>
            <para>No interpolation (nearest value).</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Linear">
            <summary>
            <para>Linear interpolation.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Cubic">
            <summary>
            <para>Cubic interpolation.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Length">
            <summary>
            <para>The total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Loop">
            <summary>
            <para>A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Step">
            <summary>
            <para>The animation step value.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AddTrack(Godot.Animation.TrackType,System.Int32)">
            <summary>
            <para>Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.RemoveTrack(System.Int32)">
            <summary>
            <para>Remove a track by specifying the track index.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.GetTrackCount">
            <summary>
            <para>Return the amount of tracks in the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetType(System.Int32)">
            <summary>
            <para>Get the type of a track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetPath(System.Int32)">
            <summary>
            <para>Get the path of a track. for more information on the path format, see <see cref="M:Godot.Animation.TrackSetPath(System.Int32,Godot.NodePath)"/></para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetPath(System.Int32,Godot.NodePath)">
            <summary>
            <para>Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by ":".</para>
            <para>Example: "character/skeleton:ankle" or "character/mesh:transform/local".</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.FindTrack(Godot.NodePath)">
            <summary>
            <para>Return the index of the specified track. If the track is not found, return -1.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveUp(System.Int32)">
            <summary>
            <para>Move a track up.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveDown(System.Int32)">
            <summary>
            <para>Move a track down.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSwap(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetImported(System.Int32,System.Boolean)">
            <summary>
            <para>Set the given track as imported or not.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsImported(System.Int32)">
            <summary>
            <para>Return true if the given track is imported. Else, return false.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>Enables/disables the given track. Tracks are enabled by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsEnabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the track at index <c>idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInsertKey(System.Int32,System.Single,Godot.Vector3,Godot.Quat,Godot.Vector3)">
            <summary>
            <para>Insert a transform key for a transform track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackInsertKey(System.Int32,System.Single,System.Object,System.Single)">
            <summary>
            <para>Insert a generic key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKey(System.Int32,System.Int32)">
            <summary>
            <para>Remove a key by index in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKeyAtPosition(System.Int32,System.Single)">
            <summary>
            <para>Remove a key by position (seconds) in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyValue(System.Int32,System.Int32,System.Object)">
            <summary>
            <para>Set the value of an existing key.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyTransition(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Set the transition curve (easing) for a specific key (see built-in math function "ease").</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTransition(System.Int32,System.Int32)">
            <summary>
            <para>Return the transition curve (easing) for a specific key (see built-in math function "ease").</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyCount(System.Int32)">
            <summary>
            <para>Return the amount of keys in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyValue(System.Int32,System.Int32)">
            <summary>
            <para>Return the value of a given key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTime(System.Int32,System.Int32)">
            <summary>
            <para>Return the time at which the key is located.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackFindKey(System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Find the key index by time in a given track. Optionally, only find it if the exact time is given.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationType(System.Int32,Godot.Animation.InterpolationType)">
            <summary>
            <para>Set the interpolation type of a given track, from the INTERPOLATION_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationType(System.Int32)">
            <summary>
            <para>Return the interpolation type of a given track, from the INTERPOLATION_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationLoopWrap(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the track at <c>idx</c> wraps the interpolation loop.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationLoopWrap(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the track at <c>idx</c> wraps the interpolation loop. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInterpolate(System.Int32,System.Single)">
            <summary>
            <para>Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position (<see cref="T:Godot.Vector3"/>), rotation (<see cref="T:Godot.Quat"/>) and scale (<see cref="T:Godot.Vector3"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackSetUpdateMode(System.Int32,Godot.Animation.UpdateMode)">
            <summary>
            <para>Set the update mode (UPDATE_*) of a value track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetUpdateMode(System.Int32)">
            <summary>
            <para>Return the update mode of a value track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Return all the key indices of a value track, given a position and delta time.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Return all the key indices of a method track, given a position and delta time.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetName(System.Int32,System.Int32)">
            <summary>
            <para>Return the method name of a method track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetParams(System.Int32,System.Int32)">
            <summary>
            <para>Return the arguments values to be called on a method track for a given key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackInsertKey(System.Int32,System.Single,System.Single,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            
            <param name="inHandle">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="outHandle">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyValue(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyInHandle(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyOutHandle(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyValue(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyInHandle(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyOutHandle(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackInterpolate(System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackInsertKey(System.Int32,System.Single,Godot.Resource,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyStream(System.Int32,System.Int32,Godot.Resource)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyStartOffset(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyEndOffset(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyStream(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyStartOffset(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyEndOffset(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackInsertKey(System.Int32,System.Single,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackSetKeyAnimation(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackGetKeyAnimation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Animation.Clear">
            <summary>
            <para>Clear the animation (clear all tracks and reset all).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.CopyTrack(System.Int32,Godot.Animation)">
            <summary>
            <para>Adds a new track that is a copy of the given track from <c>to_animation</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNode">
            <summary>
            <para>Base resource for <see cref="T:Godot.AnimationTree"/> nodes. In general it's not used directly but you can create custom ones with custom blending formulas.</para>
            <para>Inherit this when creating nodes mainly for use in <see cref="T:Godot.AnimationNodeBlendTree"/>, otherwise <see cref="T:Godot.AnimationRootNode"/> should be used instead.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Ignore">
            <summary>
            <para>Do not use filtering.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Pass">
            <summary>
            <para>Paths matching the filter will be allowed to pass.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Stop">
            <summary>
            <para>Paths matching the filter will be discarded.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Blend">
            <summary>
            <para>Paths matching the filter will be blended (by the blend value).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNode.FilterEnabled">
            <summary>
            <para>Return whether filtering is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetCaption">
            <summary>
            <para>Get the text caption for this node (used by some editors)</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetChildByName(System.String)">
            <summary>
            <para>Get the a child node by index (used by editors inheriting from <see cref="T:Godot.AnimationRootNode"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetChildNodes">
            <summary>
            <para>Get all children nodes, in order as a name:node dictionary. Only useful when inheriting <see cref="T:Godot.AnimationRootNode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameterDefaultValue(System.String)">
            <summary>
            <para>Get the default value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameterList">
            <summary>
            <para>Get the property information for parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. Format is similar to <see cref="M:Godot.Object.GetPropertyList"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.HasFilter">
            <summary>
            <para>Return true whether you want the blend tree editor to display filter editing on this node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.Process(System.Single,System.Boolean)">
            <summary>
            <para>Called when a custom node is processed. The argument "time" is relative, unless "seek" is true (in which case it is absolute).</para>
            <para>Here, call the <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, <see cref="M:Godot.AnimationNode.BlendNode(System.String,Godot.AnimationNode,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/> or <see cref="M:Godot.AnimationNode.BlendAnimation(System.String,System.Single,System.Single,System.Boolean,System.Single)"/> functions.</para>
            <para>You can also use <see cref="M:Godot.AnimationNode.GetParameter(System.String)"/> and <see cref="M:Godot.AnimationNode.SetParameter(System.String,System.Object)"/> to modify local memory.</para>
            <para>This function returns the time left for the current animation to finish (if unsure, just pass  the value from the main blend being called).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetInputCount">
            <summary>
            <para>Amount of inputs in this node, only useful for nodes that go into <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetInputName(System.Int32)">
            <summary>
            <para>Get the name of an input by index.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.AddInput(System.String)">
            <summary>
            <para>Add an input to the node. This is only useful for nodes created for use in an <see cref="T:Godot.AnimationNodeBlendTree"/></para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.RemoveInput(System.Int32)">
            <summary>
            <para>Remove an input, call this only when inactive.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.SetFilterPath(Godot.NodePath,System.Boolean)">
            <summary>
            <para>Add/Remove a path for the filter.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.IsPathFiltered(Godot.NodePath)">
            <summary>
            <para>Return true wether a given path is filtered.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendAnimation(System.String,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            <para>Blend an animation by "blend" amount (name must be valid in the linked <see cref="T:Godot.AnimationPlayer"/>). A time and delta mas be passed, as well as whether seek happened.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendNode(System.String,Godot.AnimationNode,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)">
            <summary>
            <para>Blend another animaiton node (in case this node contains children animation nodes). This function is only useful if you inherit from <see cref="T:Godot.AnimationRootNode"/> instead, else editors will not display your node for addition.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)">
            <summary>
            <para>Blend an input. This is only useful for nodes created for an <see cref="T:Godot.AnimationNodeBlendTree"/>. Time is a delta, unless "seek" is true, in which case it is absolute. A filter mode may be optionally passed.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.SetParameter(System.String,System.Object)">
            <summary>
            <para>Set a custom parameter. These are used as local storage, because resources can be reused across the tree or scenes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameter(System.String)">
            <summary>
            <para>Get the value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAdd2.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAdd3.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAnimation.Animation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlend2.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlend3.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.MinSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.MaxSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.Snap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.ValueLabel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.AddBlendPoint(Godot.AnimationRootNode,System.Single,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.SetBlendPointPosition(System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointPosition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.SetBlendPointNode(System.Int32,Godot.AnimationRootNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointNode(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.RemoveBlendPoint(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.Interpolated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.Discrete">
            <summary>
            <para>Useful for frame-by-frame 2D animations.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.DiscreteCarry">
            <summary>
            <para>Keep the current play position when switching between discrete animations.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.AutoTriangles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.MinSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.MaxSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.Snap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.XLabel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.YLabel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.BlendMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.SetBlendPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointPosition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.SetBlendPointNode(System.Int32,Godot.AnimationRootNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointNode(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.RemoveBlendPoint(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.AddTriangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetTrianglePoint(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.RemoveTriangle(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetTriangleCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionOk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoInput">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoInputIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoOutput">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorSameNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorConnectionExists">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendTree.GraphOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.AddNode(System.String,Godot.AnimationNode,System.Nullable{Godot.Vector2})">
            <summary>
            
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.GetNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.RemoveNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.RenameNode(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.HasNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.ConnectNode(System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.DisconnectNode(System.String,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.SetNodePosition(System.String,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.GetNodePosition(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeOneShot.MixMode.Blend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeOneShot.MixMode.Add">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.FadeinTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.FadeoutTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.Autorestart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.AutorestartDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.AutorestartRandomDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeOneShot.SetMixMode(Godot.AnimationNodeOneShot.MixMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeOneShot.GetMixMode">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Godot.AnimationNodeStateMachine" -->
        <member name="M:Godot.AnimationNodeStateMachine.AddNode(System.String,Godot.AnimationNode,System.Nullable{Godot.Vector2})">
            <summary>
            
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RenameNode(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.HasNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNodeName(Godot.AnimationNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetNodePosition(System.String,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNodePosition(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.HasTransition(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.AddTransition(System.String,System.String,Godot.AnimationNodeStateMachineTransition)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionFrom(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionTo(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveTransitionByIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveTransition(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetStartNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetStartNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetEndNode(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetEndNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetGraphOffset(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetGraphOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Travel(System.String)">
            <summary>
            <para>Transition from the current state to another one, while visiting all the intermediate ones. This is done via the A* algorithm.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Start(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.IsPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.GetCurrentNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.GetTravelPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.Immediate">
            <summary>
            <para>Switch to the next state immediately. The current state will end and blend into the beginning of the new one.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.Sync">
            <summary>
            <para>Switch to the next state immediately, but will seek the new state to the playback position of the old state.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.AtEnd">
            <summary>
            <para>Wait for the current state playback to end, then switch to the beginning of the next state animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.SwitchMode">
            <summary>
            <para>The transition type.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance">
            <summary>
            <para>Turn on the transition automatically when this state is reached. This works best with <c>SWITCH_MODE_AT_END</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.AdvanceCondition">
            <summary>
            <para>Turn on auto advance when this condition is set. This is a custom text field that can be filled with a variable name. The variable can be modified from code.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.XfadeTime">
            <summary>
            <para>The time to cross-fade between this state and the next.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.Priority">
            <summary>
            <para>Lower priority transitions are preferred when travelling through the tree via <see cref="M:Godot.AnimationNodeStateMachinePlayback.Travel(System.String)"/> or <see cref="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.Disabled">
            <summary>
            <para>Don't use this transition during <see cref="M:Godot.AnimationNodeStateMachinePlayback.Travel(System.String)"/> or <see cref="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.InputCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.XfadeTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input0__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input0__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input1__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input1__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input2__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input2__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input3__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input3__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input4__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input4__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input5__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input5__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input6__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input6__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input7__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input7__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input8__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input8__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input9__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input9__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input10__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input10__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input11__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input11__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input12__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input12__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input13__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input13__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input14__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input14__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input15__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input15__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input16__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input16__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input17__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input17__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input18__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input18__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input19__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input19__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input20__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input20__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input21__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input21__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input22__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input22__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input23__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input23__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input24__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input24__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input25__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input25__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input26__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input26__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input27__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input27__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input28__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input28__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input29__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input29__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input30__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input30__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input31__name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.Input31__autoAdvance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer">
            <summary>
            <para>An animation player is used for general purpose playback of <see cref="T:Godot.Animation"/> resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Physics">
            <summary>
            <para>Process animation during the physics process. This is especially useful when animating physics bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Idle">
            <summary>
            <para>Process animation during the idle process.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Manual">
            <summary>
            <para>Do not process animation. Use the 'advance' method to process the animation manually.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.RootNode">
            <summary>
            <para>The node from which node path references will travel. Default value: <c>".."</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimation">
            <summary>
            <para>The name of the current animation, "" if not playing anything. When being set, does not restart the animation. See also <see cref="M:Godot.AnimationPlayer.Play(System.String,System.Single,System.Single,System.Boolean)"/>. Default value: <c>""</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.AssignedAnimation">
            <summary>
            <para>If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also <see cref="P:Godot.AnimationPlayer.CurrentAnimation"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.Autoplay">
            <summary>
            <para>The name of the animation to play when the scene loads. Default value: <c>""</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationLength">
            <summary>
            <para>The length (in seconds) of the currently being played animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationPosition">
            <summary>
            <para>The position (in seconds) of the currently playing animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackProcessMode">
            <summary>
            <para>The process notification in which to update animations. Default value: <c>ANIMATION_PROCESS_IDLE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackDefaultBlendTime">
            <summary>
            <para>The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackActive">
            <summary>
            <para>If <c>true</c>, updates animations in response to process-related notifications. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackSpeed">
            <summary>
            <para>The speed scaling ratio. For instance, if this value is 1 then the animation plays at normal speed. If it's 0.5 then it plays at half speed. If it's 2 then it plays at double speed. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AddAnimation(System.String,Godot.Animation)">
            <summary>
            <para>Adds <c>animation</c> to the player accessible with the key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RemoveAnimation(System.String)">
            <summary>
            <para>Remove the animation with key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RenameAnimation(System.String,System.String)">
            <summary>
            <para>Rename an existing animation with key <c>name</c> to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.HasAnimation(System.String)">
            <summary>
            <para>Returns <c>true</c> if the <c>AnimationPlayer</c> stores an <see cref="T:Godot.Animation"/> with key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimation(System.String)">
            <summary>
            <para>Returns the <see cref="T:Godot.Animation"/> with key <c>name</c> or <c>null</c> if not found.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimationList">
            <summary>
            <para>Returns the list of stored animation names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationSetNext(System.String,System.String)">
            <summary>
            <para>Triggers the <c>anim_to</c> animation when the <c>anim_from</c> animation completes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationGetNext(System.String)">
            <summary>
            <para>Returns the name of the next animation in the queue.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.SetBlendTime(System.String,System.String,System.Single)">
            <summary>
            <para>Specify a blend time (in seconds) between two animations, referenced by their names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetBlendTime(System.String,System.String)">
            <summary>
            <para>Get the blend time (in seconds) between two animations, referenced by their names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Play(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            <para>Play the animation with key <c>name</c>. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.</para>
            <para>If the animation has been paused by <c>stop(true)</c> it will be resumed. Calling <c>play()</c> without arguments will also resume the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.PlayBackwards(System.String,System.Single)">
            <summary>
            <para>Play the animation with key <c>name</c> in reverse.</para>
            <para>If the animation has been paused by <c>stop(true)</c> it will be resumed backwards. Calling <c>play_backwards()</c> without arguments will also resume the animation backwards.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Stop(System.Boolean)">
            <summary>
            <para>Stop the currently playing animation. If <c>reset</c> is <c>true</c>, the animation position is reset to <c>0</c> and the playback speed is reset to <c>1.0</c>.</para>
            <para>If <c>reset</c> is <c>false</c>, then calling <c>play()</c> without arguments or <c>play("same_as_before")</c> will resume the animation. Works the same for the <c>play_backwards()</c> method.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if playing an animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Queue(System.String)">
            <summary>
            <para>Queue an animation for playback once the current one is done.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearQueue">
            <summary>
            <para>Clears all queued, unplayed animations.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetPlayingSpeed">
            <summary>
            <para>Get the actual playing speed of current animation or 0 if not playing. This speed is the <c>playback_speed</c> property multiplied by <c>custom_speed</c> argument specified when calling the <c>play</c> method.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.FindAnimation(Godot.Animation)">
            <summary>
            <para>Returns the name of <c>animation</c> or empty string if not found.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearCaches">
            <summary>
            <para><c>AnimationPlayer</c> caches animated nodes. It may not notice if a node disappears, so clear_caches forces it to update the cache again.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Seek(System.Single,System.Boolean)">
            <summary>
            <para>Seek the animation to the <c>seconds</c> point in time (in seconds). If <c>update</c> is <c>true</c>, the animation updates too, otherwise it updates at process time. Events between the current frame and <c>seconds</c> are skipped.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Advance(System.Single)">
            <summary>
            <para>Shifts position in the animation timeline. Delta is the time in seconds to shift. Events between the current frame and <c>delta</c> are handled.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Physics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Manual">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.TreeRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.AnimPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.Active">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.ProcessMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.RootMotionTrack">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationTree.GetRootMotionTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationTree.RenameParameter(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationTree.Advance(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AnimationTreePlayer">
            <summary>
            <para>A node graph tool for blending multiple animations bound to an <see cref="T:Godot.AnimationPlayer"/>. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.</para>
            <para>It takes <see cref="T:Godot.Animation"/>s from an <see cref="T:Godot.AnimationPlayer"/> node and mixes them depending on the graph.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.AnimationProcessMode.Physics">
            <summary>
            <para>Process animation during the physics process. This is especially useful when animating physics bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.AnimationProcessMode.Idle">
            <summary>
            <para>Process animation during the idle process.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Output">
            <summary>
            <para>Output node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Animation">
            <summary>
            <para>Animation node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Oneshot">
            <summary>
            <para>OneShot node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Mix">
            <summary>
            <para>Mix node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Blend2">
            <summary>
            <para>Blend2 node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Blend3">
            <summary>
            <para>Blend3 node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Blend4">
            <summary>
            <para>Blend4 node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Timescale">
            <summary>
            <para>TimeScale node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Timeseek">
            <summary>
            <para>TimeSeek node.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTreePlayer.NodeType.Transition">
            <summary>
            <para>Transition node.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.PlaybackProcessMode">
            <summary>
            <para>The thread in which to update animations. Default value: <c>ANIMATION_PROCESS_IDLE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.MasterPlayer">
            <summary>
            <para>The path to the <see cref="T:Godot.AnimationPlayer"/> from which this <c>AnimationTreePlayer</c> binds animations to animation nodes.</para>
            <para>Once set, Animation nodes can be added to the AnimationTreePlayer.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.BasePath">
            <summary>
            <para>The node from which to relatively access other nodes. Default value: <c>".."</c>.</para>
            <para>It accesses the Bones, so it should point to the same Node the AnimationPlayer would point its Root Node at.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.Active">
            <summary>
            <para>If <c>true</c>, the <c>AnimationTreePlayer</c> is able to play animations. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AddNode(Godot.AnimationTreePlayer.NodeType,System.String)">
            <summary>
            <para>Adds a <c>type</c> node to the graph with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeExists(System.String)">
            <summary>
            <para>Check if a node exists (by name).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeRename(System.String,System.String)">
            <summary>
            <para>Rename a node in the graph.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetType(System.String)">
            <summary>
            <para>Get the node type, will return from NODE_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetInputCount(System.String)">
            <summary>
            <para>Return the input count for a given node. Different types of nodes have different amount of inputs.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetInputSource(System.String,System.Int32)">
            <summary>
            <para>Return the input source for a given node input.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetAnimation(System.String,Godot.Animation)">
            <summary>
            <para>Binds a new <see cref="T:Godot.Animation"/> from the <see cref="P:Godot.AnimationTreePlayer.MasterPlayer"/> to the <c>AnimationTreePlayer</c>'s animation node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeGetAnimation(System.String)">
            <summary>
            <para>Returns the <see cref="T:Godot.AnimationPlayer"/>'s <see cref="T:Godot.Animation"/> bound to the <c>AnimationTreePlayer</c>'s animation node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetMasterAnimation(System.String,System.String)">
            <summary>
            <para>Binds the <see cref="T:Godot.Animation"/> named <c>source</c> from <see cref="P:Godot.AnimationTreePlayer.MasterPlayer"/> to the animation node <c>id</c>. Recalculates caches.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeGetMasterAnimation(System.String)">
            <summary>
            <para>Returns the name of the <see cref="P:Godot.AnimationTreePlayer.MasterPlayer"/>'s <see cref="T:Godot.Animation"/> bound to this animation node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeGetPosition(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, the animation node with ID <c>id</c> turns off the track modifying the property at <c>path</c>. The modified node's children continue to animate.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFadeinTime(System.String,System.Single)">
            <summary>
            <para>Sets fade in time of a OneShot node given its name and value in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetFadeinTime(System.String)">
            <summary>
            <para>Returns fade in time of a OneShot node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFadeoutTime(System.String,System.Single)">
            <summary>
            <para>Sets fade out time of a OneShot node given its name and value in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetFadeoutTime(System.String)">
            <summary>
            <para>Returns fade out time of a OneShot node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestart(System.String,System.Boolean)">
            <summary>
            <para>Sets autorestart property of a OneShot node given its name and value.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestartDelay(System.String,System.Single)">
            <summary>
            <para>Sets autorestart delay of a OneShot node given its name and value in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestartRandomDelay(System.String,System.Single)">
            <summary>
            <para>Sets autorestart random delay of a OneShot node given its name and value in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeHasAutorestart(System.String)">
            <summary>
            <para>Returns whether a OneShot node will auto restart given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetAutorestartDelay(System.String)">
            <summary>
            <para>Returns autostart delay of a OneShot node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetAutorestartRandomDelay(System.String)">
            <summary>
            <para>Returns autostart random delay of a OneShot node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeStart(System.String)">
            <summary>
            <para>Starts a OneShot node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeStop(System.String)">
            <summary>
            <para>Stops the OneShot node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeIsActive(System.String)">
            <summary>
            <para>Returns whether a OneShot node is active given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, the oneshot node with ID <c>id</c> turns off the track modifying the property at <c>path</c>. The modified node's children continue to animate.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.MixNodeSetAmount(System.String,System.Single)">
            <summary>
            <para>Sets mix amount of a Mix node given its name and value.</para>
            <para>A Mix node adds input b to input a by a the amount given by ratio.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.MixNodeGetAmount(System.String)">
            <summary>
            <para>Returns mix amount of a Mix node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeSetAmount(System.String,System.Single)">
            <summary>
            <para>Sets the blend amount of a Blend2 node given its name and value.</para>
            <para>A Blend2 Node blends two animations with the amount between 0 and 1.</para>
            <para>At 0, Output is input a.</para>
            <para>Towards 1, the influence of a gets lessened, the influence of b gets raised.</para>
            <para>At 1, Output is input b.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeGetAmount(System.String)">
            <summary>
            <para>Returns the blend amount of a Blend2 node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, the blend2 node with ID <c>id</c> turns off the track modifying the property at <c>path</c>. The modified node's children continue to animate.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend3NodeSetAmount(System.String,System.Single)">
            <summary>
            <para>Sets the blend amount of a Blend3 node given its name and value.</para>
            <para>A Blend3 Node blends three animations with the amount between -1 and 1.</para>
            <para>At -1, Output is input b-.</para>
            <para>From -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0.</para>
            <para>At 0, Output is input a.</para>
            <para>From 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0.</para>
            <para>At 1, Output is input b+.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend3NodeGetAmount(System.String)">
            <summary>
            <para>Returns the blend amount of a Blend3 node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend4NodeSetAmount(System.String,Godot.Vector2)">
            <summary>
            <para>Sets the blend amount of a Blend4 node given its name and value.</para>
            <para>A Blend4 Node blends two pairs of animations.</para>
            <para>The two pairs are blended like blend2 and then added together.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend4NodeGetAmount(System.String)">
            <summary>
            <para>Returns the blend amount of a Blend4 node given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimescaleNodeSetScale(System.String,System.Single)">
            <summary>
            <para>Sets the time scale of the TimeScale node with name <c>id</c> to <c>scale</c>.</para>
            <para>The timescale node is used to speed <see cref="T:Godot.Animation"/>s up if the scale is above 1 or slow them down if it is below 1.</para>
            <para>If applied after a blend or mix, affects all input animations to that blend or mix.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimescaleNodeGetScale(System.String)">
            <summary>
            <para>Returns time scale value of the TimeScale node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimeseekNodeSeek(System.String,System.Single)">
            <summary>
            <para>Sets the time seek value of the TimeSeek node with name <c>id</c> to <c>seconds</c></para>
            <para>This functions as a seek in the <see cref="T:Godot.Animation"/> or the blend or mix of <see cref="T:Godot.Animation"/>s input in it.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetInputCount(System.String,System.Int32)">
            <summary>
            <para>Resizes the number of inputs available for the transition node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetInputCount(System.String)">
            <summary>
            <para>Returns the number of inputs for the transition node with name <c>id</c>. You can add inputs by rightclicking on the transition node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeDeleteInput(System.String,System.Int32)">
            <summary>
            <para>Deletes the input at <c>input_idx</c> for the transition node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetInputAutoAdvance(System.String,System.Int32,System.Boolean)">
            <summary>
            <para>The transition node with name <c>id</c> advances to its next input automatically when the input at <c>input_idx</c> completes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeHasInputAutoAdvance(System.String,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the input at <c>input_idx</c> on transition node with name <c>id</c> is set to automatically advance to the next input upon completion.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetXfadeTime(System.String,System.Single)">
            <summary>
            <para>The transition node with name <c>id</c> sets its cross fade time to <c>time_sec</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetXfadeTime(System.String)">
            <summary>
            <para>Returns the cross fade time for the transition node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetCurrent(System.String,System.Int32)">
            <summary>
            <para>The transition node with name <c>id</c> sets its current input at <c>input_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetCurrent(System.String)">
            <summary>
            <para>Returns the index of the currently evaluated input for the transition node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeSetPosition(System.String,Godot.Vector2)">
            <summary>
            <para>Sets position of a node in the graph given its name and position.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetPosition(System.String)">
            <summary>
            <para>Returns position of a node in the graph given its name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.RemoveNode(System.String)">
            <summary>
            <para>Removes the animation node with name <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.ConnectNodes(System.String,System.String,System.Int32)">
            <summary>
            <para>Connects node <c>id</c> to <c>dst_id</c> at the specified input slot.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AreNodesConnected(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns whether node <c>id</c> and <c>dst_id</c> are connected at the specified slot.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.DisconnectNodes(System.String,System.Int32)">
            <summary>
            <para>Disconnects nodes connected to <c>id</c> at the specified input slot.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.GetNodeList">
            <summary>
            <para>Returns a <see cref="T:System.String"/> containing the name of all nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Advance(System.Single)">
            <summary>
            <para>Shifts position in the animation timeline. Delta is the time in seconds to shift. Events between the current frame and <c>delta</c> are handled.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Reset">
            <summary>
            <para>Resets this <c>AnimationTreePlayer</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.RecomputeCaches">
            <summary>
            <para>Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.</para>
            </summary>
        </member>
        <member name="T:Godot.Area">
            <summary>
            <para>3D area that detects <see cref="T:Godot.CollisionObject"/> nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).</para>
            </summary>
        </member>
        <member name="F:Godot.Area.SpaceOverrideEnum.Disabled">
            <summary>
            <para>This area does not affect gravity/damping.</para>
            </summary>
        </member>
        <member name="F:Godot.Area.SpaceOverrideEnum.Combine">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area.Priority"/> order).</para>
            </summary>
        </member>
        <member name="F:Godot.Area.SpaceOverrideEnum.CombineReplace">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area.Priority"/> order), ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area.SpaceOverrideEnum.Replace">
            <summary>
            <para>This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area.SpaceOverrideEnum.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damping calculated so far (in <see cref="P:Godot.Area.Priority"/> order), but keeps calculating the rest of the areas.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.SpaceOverride">
            <summary>
            <para>Override mode for gravity and damping calculations within this area. See <see cref="T:Godot.Area.SpaceOverrideEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.GravityPoint">
            <summary>
            <para>If <c>true</c>, gravity is calculated from a point (set via <see cref="P:Godot.Area.GravityVec"/>). Also see <see cref="P:Godot.Area.SpaceOverride"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.GravityDistanceScale">
            <summary>
            <para>The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.GravityVec">
            <summary>
            <para>The area's gravity vector (not normalized). If gravity is a point (see <see cref="P:Godot.Area.GravityPoint"/>), this will be the point of attraction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.Gravity">
            <summary>
            <para>The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.LinearDamp">
            <summary>
            <para>The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from <c>0</c> (no damping) to <c>1</c> (full damping).</para>
            </summary>
        </member>
        <member name="P:Godot.Area.AngularDamp">
            <summary>
            <para>The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from <c>0</c> (no damping) to <c>1</c> (full damping).</para>
            </summary>
        </member>
        <member name="P:Godot.Area.Priority">
            <summary>
            <para>The area's priority. Higher priority areas are processed first. Default value: 0.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.Monitoring">
            <summary>
            <para>If <c>true</c>, the area detects bodies or areas entering and exiting it. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.Monitorable">
            <summary>
            <para>If <c>true</c>, other monitoring areas can detect this area. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.CollisionLayer">
            <summary>
            <para>The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also <see cref="P:Godot.Area.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.CollisionMask">
            <summary>
            <para>The physics layers this area scans to determine collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.AudioBusOverride">
            <summary>
            <para>If <c>true</c>, the area's audio bus overrides the default audio bus. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.AudioBusName">
            <summary>
            <para>The name of the area's audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusEnable">
            <summary>
            <para>If <c>true</c>, the area applies reverb to its associated audio.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusName">
            <summary>
            <para>The reverb bus name to use for this area's associated audio.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusAmount">
            <summary>
            <para>The degree to which this area applies reverb to its associated audio. Ranges from <c>0</c> to <c>1</c> with <c>0.1</c> precision.</para>
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusUniformity">
            <summary>
            <para>The degree to which this area's reverb is a uniform effect. Ranges from <c>0</c> to <c>1</c> with <c>0.1</c> precision.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the collision mask. This simplifies editing which <c>Area</c> layers this <c>Area</c> scans.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the layer mask. This simplifies editing this <c>Area</c>'s layers.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the layer mask.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.GetOverlappingBodies">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.PhysicsBody"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.GetOverlappingAreas">
            <summary>
            <para>Returns a list of intersecting <c>Area</c>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.OverlapsBody(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given body overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area.OverlapsArea(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given area overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D">
            <summary>
            <para>2D area that detects <see cref="T:Godot.CollisionObject2D"/> nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Disabled">
            <summary>
            <para>This area does not affect gravity/damping.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Combine">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order).</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.CombineReplace">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order), ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Replace">
            <summary>
            <para>This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damping calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order), but keeps calculating the rest of the areas.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.SpaceOverride">
            <summary>
            <para>Override mode for gravity and damping calculations within this area. See <see cref="T:Godot.Area2D.SpaceOverrideEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityPoint">
            <summary>
            <para>If <c>true</c>, gravity is calculated from a point (set via <see cref="P:Godot.Area2D.GravityVec"/>). Also see <see cref="P:Godot.Area2D.SpaceOverride"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityDistanceScale">
            <summary>
            <para>The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityVec">
            <summary>
            <para>The area's gravity vector (not normalized). If gravity is a point (see <see cref="P:Godot.Area2D.GravityPoint"/>), this will be the point of attraction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Gravity">
            <summary>
            <para>The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.LinearDamp">
            <summary>
            <para>The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from <c>0</c> (no damping) to <c>1</c> (full damping).</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AngularDamp">
            <summary>
            <para>The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from <c>0</c> (no damping) to <c>1</c> (full damping).</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Priority">
            <summary>
            <para>The area's priority. Higher priority areas are processed first. Default value: 0.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitoring">
            <summary>
            <para>If <c>true</c>, the area detects bodies or areas entering and exiting it. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitorable">
            <summary>
            <para>If <c>true</c>, other monitoring areas can detect this area. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionLayer">
            <summary>
            <para>The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also <see cref="P:Godot.Area2D.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionMask">
            <summary>
            <para>The physics layers this area scans to determine collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusOverride">
            <summary>
            <para>If <c>true</c>, the area's audio bus overrides the default audio bus. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusName">
            <summary>
            <para>The name of the area's audio bus.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Return an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Return an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingBodies">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.PhysicsBody2D"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingAreas">
            <summary>
            <para>Returns a list of intersecting <c>Area2D</c>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsBody(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given body overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsArea(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given area overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.ArrayMesh">
            <summary>
            <para>The <c>ArrayMesh</c> is used to construct a <see cref="T:Godot.Mesh"/> by specifying the attributes as arrays. The most basic example is the creation of a single triangle</para>
            <para><code>
            var vertices = PoolVector3Array()
            vertices.push_back(Vector3(0, 1, 0))
            vertices.push_back(Vector3(1, 0, 0))
            vertices.push_back(Vector3(0, 0, 1))
            # Initialize the ArrayMesh.
            var arr_mesh = ArrayMesh.new()
            var arrays = []
            arrays.resize(ArrayMesh.ARRAY_MAX)
            arrays[ArrayMesh.ARRAY_VERTEX] = vertices
            # Create the Mesh.
            arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
            var m = MeshInstance.new()
            m.mesh = arr_mesh
            </code></para>
            <para>The <c>MeshInstance</c> is ready to be added to the SceneTree to be shown.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.NoIndexArray">
            <summary>
            <para>Default value used for index_array_len when no indices are present.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayWeightsSize">
            <summary>
            <para>Amount of weights/bone indices per vertex (always 4).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Vertex">
            <summary>
            <para>Array format will include vertices (mandatory).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Normal">
            <summary>
            <para>Array format will include normals</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Tangent">
            <summary>
            <para>Array format will include tangents</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Color">
            <summary>
            <para>Array format will include a color array.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.TexUv">
            <summary>
            <para>Array format will include UVs.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.TexUv2">
            <summary>
            <para>Array format will include another set of UVs.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Bones">
            <summary>
            <para>Array format will include bone indices.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Weights">
            <summary>
            <para>Array format will include bone weights.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayFormat.Index">
            <summary>
            <para>Index array will be used.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Vertex">
            <summary>
            <para>Vertex array (array of <see cref="T:Godot.Vector3"/> vertices).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Normal">
            <summary>
            <para>Normal array (array of <see cref="T:Godot.Vector3"/> normals).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Tangent">
            <summary>
            <para>Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Color">
            <summary>
            <para>Vertex array (array of <see cref="T:Godot.Color"/> colors).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.TexUv">
            <summary>
            <para>UV array (array of <see cref="T:Godot.Vector3"/> UVs or float array of groups of 2 floats (u,v)).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.TexUv2">
            <summary>
            <para>Second UV array (array of <see cref="T:Godot.Vector3"/> UVs or float array of groups of 2 floats (u,v)).</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Bones">
            <summary>
            <para>Array of bone indices, as a float array. Each element in groups of 4 floats.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Weights">
            <summary>
            <para>Array of bone weights, as a float array. Each element in groups of 4 floats.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Index">
            <summary>
            <para><see cref="T:Godot.Collections.Array"/> of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.</para>
            <para>For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.</para>
            </summary>
        </member>
        <member name="F:Godot.ArrayMesh.ArrayType.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.BlendShapeMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.CustomAabb">
            <summary>
            <para>An overriding bounding box for this mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddBlendShape(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeCount">
            <summary>
            <para>Returns the number of blend shapes that the <c>ArrayMesh</c> holds.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeName(System.Int32)">
            <summary>
            <para>Returns the name of the blend shape at this index.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.ClearBlendShapes">
            <summary>
            <para>Remove all blend shapes from this <c>ArrayMesh</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)">
            <summary>
            <para>Creates a new surface.</para>
            <para>Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. See <see cref="T:Godot.Mesh"/> for details. (As a note, when using indices, it is recommended to only use points, lines or triangles). <see cref="M:Godot.Mesh.GetSurfaceCount"/> will become the <c>surf_idx</c> for this new surface.</para>
            <para>The <c>arrays</c> argument is an array of arrays. See <see cref="T:Godot.ArrayMesh.ArrayType"/> for the values used in this array. For example, <c>arrays[0]</c> is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for <c>ARRAY_INDEX</c> if it is used.</para>
            <para>Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.</para>
            <para>Godot uses clockwise winding order for front faces of triangle primitive modes.</para>
            <param name="blendShapes">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceRemove(System.Int32)">
            <summary>
            <para>Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceUpdateRegion(System.Int32,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayLen(System.Int32)">
            <summary>
            <para>Return the length in vertices of the vertex array in the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayIndexLen(System.Int32)">
            <summary>
            <para>Return the length in indices of the index array in the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetFormat(System.Int32)">
            <summary>
            <para>Return the format mask of the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetPrimitiveType(System.Int32)">
            <summary>
            <para>Return the primitive type of the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceSetMaterial(System.Int32,Godot.Material)">
            <summary>
            <para>Set a <see cref="T:Godot.Material"/> for a given surface. Surface will be rendered using this material.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceFindByName(System.String)">
            <summary>
            <para>Return the index of the first surface with this name held within this <c>ArrayMesh</c>. If none are found -1 is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceSetName(System.Int32,System.String)">
            <summary>
            <para>Set a name for a given surface.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetName(System.Int32)">
            <summary>
            <para>Get the name assigned to this surface.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.RegenNormalmaps">
            <summary>
            <para>Will regenerate normal maps for the <c>ArrayMesh</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.LightmapUnwrap(Godot.Transform,System.Single)">
            <summary>
            <para>Will perform a UV unwrap on the <c>ArrayMesh</c> to prepare the mesh for lightmapping.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRAnchor">
            <summary>
            <para>The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.</para>
            <para>This node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised.</para>
            <para>Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRAnchor.AnchorId">
            <summary>
            <para>The anchor's id. You can set this before the anchor itself exists. The first anchor gets an id of <c>1</c>, the second an id of <c>2</c>, etc. When anchors get removed, the engine can then assign the corresponding id to new anchors. The most common situation where anchors 'disappear' is when the AR server identifies that two anchors represent different parts of the same plane and merges them.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetAnchorName">
            <summary>
            <para>Returns the name given to this anchor.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetIsActive">
            <summary>
            <para>Returns true if the anchor is being tracked and false if no anchor with this id is currently known.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetSize">
            <summary>
            <para>Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetPlane">
            <summary>
            <para>Returns a plane aligned with our anchor; handy for intersection testing.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRCamera">
            <summary>
            <para>This is a helper spatial node for our camera; note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes.</para>
            <para>The position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the ARVR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRController">
            <summary>
            <para>This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.</para>
            <para>Controllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add ARVRController nodes to your scene.</para>
            <para>The position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child nodes to visualise the controller.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRController.ControllerId">
            <summary>
            <para>The controller's id.</para>
            <para>A controller id of 0 is unbound and will always result in an inactive node. Controller id 1 is reserved for the first controller that identifies itself as the left hand controller and id 2 is reserved for the first controller that identifies itself as the right hand controller.</para>
            <para>For any other controller that the <see cref="T:Godot.ARVRServer"/> detects, we continue with controller id 3.</para>
            <para>When a controller is turned off, its slot is freed. This ensures controllers will keep the same id even when controllers with lower ids are turned off.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRController.Rumble">
            <summary>
            <para>The degree to which the tracker rumbles. Ranges from <c>0.0</c> to <c>1.0</c> with precision <c>.01</c>. If changed, updates <see cref="P:Godot.ARVRPositionalTracker.Rumble"/> accordingly.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetControllerName">
            <summary>
            <para>If active, returns the name of the associated controller if provided by the AR/VR SDK used.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetJoystickId">
            <summary>
            <para>Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.IsButtonPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the button at index <c>button</c> is pressed.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetJoystickAxis(System.Int32)">
            <summary>
            <para>Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetIsActive">
            <summary>
            <para>Returns <c>true</c> if the bound controller is active. ARVR systems attempt to track active controllers.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetHand">
            <summary>
            <para>Returns the hand holding this controller, if known. See TRACKER_* constants in <see cref="T:Godot.ARVRPositionalTracker"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRInterface">
            <summary>
            <para>This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.</para>
            <para>Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through ARVRServer.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Tracking_status.NormalTracking">
            <summary>
            <para>Tracking is behaving as expected.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Tracking_status.ExcessiveMotion">
            <summary>
            <para>Tracking is hindered by excessive motion, player is moving faster then tracking can keep up.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Tracking_status.InsufficientFeatures">
            <summary>
            <para>Tracking is hindered by insufficient features, it's too dark (for camera based tracking), player is blocked, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Tracking_status.UnknownTracking">
            <summary>
            <para>We don't know the status of the tracking or this interface does not provide feedback.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Tracking_status.NotTracking">
            <summary>
            <para>Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.)</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Eyes.Mono">
            <summary>
            <para>Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Eyes.Left">
            <summary>
            <para>Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Eyes.Right">
            <summary>
            <para>Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Capabilities.None">
            <summary>
            <para>No ARVR capabilities.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Capabilities.Mono">
            <summary>
            <para>This interface can work with normal rendering output (non-HMD based AR).</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Capabilities.Stereo">
            <summary>
            <para>This interface supports stereoscopic rendering.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Capabilities.Ar">
            <summary>
            <para>This interface support AR (video background and real world tracking).</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRInterface.Capabilities.External">
            <summary>
            <para>This interface outputs to an external device, if the main viewport is used the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of get_render_targetsize. Using a separate viewport node frees up the main viewport for other purposes.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.InterfaceIsPrimary">
            <summary>
            <para>Is this our primary interface?</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.InterfaceIsInitialized">
            <summary>
            <para>Has this interface been initialized?</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.ArIsAnchorDetectionEnabled">
            <summary>
            <para>On an AR interface, is our anchor detection enabled?</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetName">
            <summary>
            <para>Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetCapabilities">
            <summary>
            <para>Returns a combination of flags providing information about the capabilities of this interface.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.Initialize">
            <summary>
            <para>Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.</para>
            <para>After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.</para>
            <para>Note that you must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot such as for mobile VR.</para>
            <para>If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively you can add a separate viewport node to your scene and enable AR/VR on that viewport and it will be used to output to the HMD leaving you free to do anything you like in the main window such as using a separate camera as a spectator camera or render out something completely different.</para>
            <para>While currently not used you can activate additional interfaces, you may wish to do this if you want to track controllers from other platforms. However at this point in time only one interface can render to an HMD.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.Uninitialize">
            <summary>
            <para>Turns the interface off.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetTrackingStatus">
            <summary>
            <para>If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetRenderTargetsize">
            <summary>
            <para>Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.IsStereo">
            <summary>
            <para>Returns true if the current output of this interface is in stereo.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRInterfaceGDNative">
            <summary>
            <para>This is a wrapper class for GDNative implementations of the ARVR interface. To use a GDNative ARVR interface simply instantiate this object and set your GDNative library containing the ARVR interface implementation.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVROrigin">
            <summary>
            <para>This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.</para>
            <para>There should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.</para>
            <para>It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.</para>
            <para>So say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVROrigin.WorldScale">
            <summary>
            <para>Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.</para>
            <para>Note that this method is a passthrough to the <see cref="T:Godot.ARVRServer"/> itself.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRPositionalTracker">
            <summary>
            <para>An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally.</para>
            <para>As controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer</para>
            <para>The ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRPositionalTracker.TrackerHand.HandUnknown">
            <summary>
            <para>The hand this tracker is held in is unknown or not applicable.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRPositionalTracker.TrackerHand.LeftHand">
            <summary>
            <para>This tracker is the left hand controller.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRPositionalTracker.TrackerHand.RightHand">
            <summary>
            <para>This tracker is the right hand controller.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRPositionalTracker.Rumble">
            <summary>
            <para>The degree to which the tracker rumbles. Ranges from <c>0.0</c> to <c>1.0</c> with precision <c>.01</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetType">
            <summary>
            <para>Returns the tracker's type.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetName">
            <summary>
            <para>Returns the controller or anchor point's name if available.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetJoyId">
            <summary>
            <para>If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTracksOrientation">
            <summary>
            <para>Returns <c>true</c> if this device tracks orientation.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetOrientation">
            <summary>
            <para>Returns the controller's orientation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTracksPosition">
            <summary>
            <para>Returns <c>true</c> if this device tracks position.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetPosition">
            <summary>
            <para>Returns the world-space controller position.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetHand">
            <summary>
            <para>Returns the hand holding this tracker, if known. See TRACKER_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTransform(System.Boolean)">
            <summary>
            <para>Returns the transform combining this device's orientation and position.</para>
            </summary>
        </member>
        <member name="T:Godot.ARVRServer">
            <summary>
            <para>The AR/VR Server is the heart of our AR/VR solution and handles all the processing.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.RotationMode.ResetFullRotation">
            <summary>
            <para>Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.RotationMode.ResetButKeepTilt">
            <summary>
            <para>Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.RotationMode.DontResetRotation">
            <summary>
            <para>Does not reset the orientation of the HMD, only the position of the player gets centered.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.Controller">
            <summary>
            <para>Our tracker tracks the location of a controller.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.Basestation">
            <summary>
            <para>Our tracker tracks the location of a base station.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.Anchor">
            <summary>
            <para>Our tracker tracks the location and size of an AR anchor.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.AnyKnown">
            <summary>
            <para>Used internally to filter trackers of any known type.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.Unknown">
            <summary>
            <para>Used internally if we haven't set the tracker type yet.</para>
            </summary>
        </member>
        <member name="F:Godot.ARVRServer.TrackerType.Any">
            <summary>
            <para>Used internally to select all trackers.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRServer.WorldScale">
            <summary>
            <para>Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.</para>
            </summary>
        </member>
        <member name="P:Godot.ARVRServer.PrimaryInterface">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetReferenceFrame">
            <summary>
            <para>Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.CenterOnHmd(Godot.ARVRServer.RotationMode,System.Boolean)">
            <summary>
            <para>This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.</para>
            <para>For platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.</para>
            <para>For platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.</para>
            <para>This method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.</para>
            <para>For this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.</para>
            <para>You should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetHmdTransform">
            <summary>
            <para>Returns the primary interface's transformation.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterfaceCount">
            <summary>
            <para>Get the number of interfaces currently registered with the AR/VR server. If your game supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try an initialize each interface and use the first one that returns true.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterface(System.Int32)">
            <summary>
            <para>Get the interface registered at a given index in our list of interfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterfaces">
            <summary>
            <para>Returns a list of available interfaces with both id and name of the interface.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.FindInterface(System.String)">
            <summary>
            <para>Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetTrackerCount">
            <summary>
            <para>Get the number of trackers currently registered.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetTracker(System.Int32)">
            <summary>
            <para>Get the positional tracker at the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetLastProcessUsec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetLastCommitUsec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetLastFrameUsec">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AStar">
            <summary>
            <para>A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.</para>
            <para>You must add points manually with <see cref="M:Godot.AStar.AddPoint(System.Int32,Godot.Vector3,System.Single)"/> and create segments manually with <see cref="M:Godot.AStar.ConnectPoints(System.Int32,System.Int32,System.Boolean)"/>. So you can test if there is a path between two points with the <see cref="M:Godot.AStar.ArePointsConnected(System.Int32,System.Int32)"/> function, get the list of existing ids in the found path with <see cref="M:Godot.AStar.GetIdPath(System.Int32,System.Int32)"/>, or the points list with <see cref="M:Godot.AStar.GetPointPath(System.Int32,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar._ComputeCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when computing the cost between two connected points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when estimating the cost between a point and the path's ending point.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetAvailablePointId">
            <summary>
            <para>Returns the next available point id with no point associated to it.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.AddPoint(System.Int32,Godot.Vector3,System.Single)">
            <summary>
            <para>Adds a new point at the given position with the given identifier. The algorithm prefers points with lower <c>weight_scale</c> to form a path. The <c>id</c> must be 0 or larger, and the <c>weight_scale</c> must be 1 or larger.</para>
            <para><code>
            var as = AStar.new()
            as.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1
            </code></para>
            <para>If there already exists a point for the given id, its position and weight scale are updated to the given values.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the point associated with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position for the point with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointWeightScale(System.Int32)">
            <summary>
            <para>Returns the weight scale of the point associated with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointWeightScale(System.Int32,System.Single)">
            <summary>
            <para>Sets the <c>weight_scale</c> for the point with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point associated with the given id from the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.HasPoint(System.Int32)">
            <summary>
            <para>Returns whether a point associated with the given id exists.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPoints">
            <summary>
            <para>Returns an array of all points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.IsPointDisabled(System.Int32)">
            <summary>
            <para>Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointConnections(System.Int32)">
            <summary>
            <para>Returns an array with the ids of the points that form the connect with the given point.</para>
            <para><code>
            var as = AStar.new()
            as.add_point(1, Vector3(0, 0, 0))
            as.add_point(2, Vector3(0, 1, 0))
            as.add_point(3, Vector3(1, 1, 0))
            as.add_point(4, Vector3(2, 0, 0))
            
            as.connect_points(1, 2, true)
            as.connect_points(1, 3, true)
            
            var neighbors = as.get_point_connections(1) # returns [2, 3]
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.AStar.ConnectPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Creates a segment between the given points. If <c>bidirectional</c> is <c>false</c>, only movement from <c>id</c> to <c>to_id</c> is allowed, not the reverse direction.</para>
            <para><code>
            var as = AStar.new()
            as.add_point(1, Vector3(1, 1, 0))
            as.add_point(2, Vector3(0, 5, 0))
            as.connect_points(1, 2, false)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.AStar.DisconnectPoints(System.Int32,System.Int32)">
            <summary>
            <para>Deletes the segment between the given points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.ArePointsConnected(System.Int32,System.Int32)">
            <summary>
            <para>Returns whether there is a connection/segment between the given points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.Clear">
            <summary>
            <para>Clears all the points and segments.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPoint(Godot.Vector3)">
            <summary>
            <para>Returns the id of the closest point to <c>to_position</c>. Returns -1 if there are no points in the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPositionInSegment(Godot.Vector3)">
            <summary>
            <para>Returns the closest position to <c>to_position</c> that resides inside a segment between two connected points.</para>
            <para><code>
            var as = AStar.new()
            as.add_point(1, Vector3(0, 0, 0))
            as.add_point(2, Vector3(0, 5, 0))
            as.connect_points(1, 2)
            var res = as.get_closest_position_in_segment(Vector3(3, 3, 0)) # returns (0, 3, 0)
            </code></para>
            <para>The result is in the segment that goes from <c>y = 0</c> to <c>y = 5</c>. It's the closest position in the segment to the given point.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetIdPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            <para><code>
            var as = AStar.new()
            as.add_point(1, Vector3(0, 0, 0))
            as.add_point(2, Vector3(0, 1, 0), 1) # default weight is 1
            as.add_point(3, Vector3(1, 1, 0))
            as.add_point(4, Vector3(2, 0, 0))
            
            as.connect_points(1, 2, false)
            as.connect_points(2, 3, false)
            as.connect_points(4, 3, false)
            as.connect_points(1, 4, false)
            as.connect_points(5, 4, false)
            
            var res = as.get_id_path(1, 3) # returns [1, 2, 3]
            </code></para>
            <para>If you change the 2nd point's weight to 3, then the result will be <c>[1, 4, 3]</c> instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.</para>
            </summary>
        </member>
        <member name="T:Godot.AtlasTexture">
            <summary>
            <para><see cref="T:Godot.Texture"/> resource aimed at managing big textures files that pack multiple smaller textures. Consists of a <see cref="T:Godot.Texture"/>, a margin that defines the border width,</para>
            <para>and a region that defines the actual area of the AtlasTexture.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Atlas">
            <summary>
            <para>The texture that contains the atlas. Can be any <see cref="T:Godot.Texture"/> subtype.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Region">
            <summary>
            <para>The AtlasTexture's used region.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Margin">
            <summary>
            <para>The margin around the region. The <see cref="T:Godot.Rect2"/>'s 'size' parameter ('w' and 'h' in the editor) resizes the texture so it fits within the margin.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.FilterClip">
            <summary>
            <para>If <c>true</c>, clips the area outside of the region to avoid bleeding of the surrounding texture pixels.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioBusLayout">
            <summary>
            <para>Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between buses. See <see cref="T:Godot.AudioServer"/> for usage.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffect">
            <summary>
            <para>Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectAmplify">
            <summary>
            <para>Increases or decreases the volume being routed through the audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectAmplify.VolumeDb">
            <summary>
            <para>Amount of amplification. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandLimitFilter">
            <summary>
            <para>Limits the frequencies in a range around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows frequencies outside of this range to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandPassFilter">
            <summary>
            <para>Attenuates the frequencies inside of a range around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and cuts frequencies outside of this band.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectChorus">
            <summary>
            <para>Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.VoiceCount">
            <summary>
            <para>The amount of voices in the effect.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Dry">
            <summary>
            <para>The effect's raw signal.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Wet">
            <summary>
            <para>The effect's processed signal.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__delayMs">
            <summary>
            <para>The voice's signal delay.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__rateHz">
            <summary>
            <para>The voice's filter rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__depthMs">
            <summary>
            <para>The voice filter's depth.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__levelDb">
            <summary>
            <para>The voice's volume.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__cutoffHz">
            <summary>
            <para>The voice's cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__pan">
            <summary>
            <para>The voice's pan level.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__delayMs">
            <summary>
            <para>The voice's signal delay.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__rateHz">
            <summary>
            <para>The voice's filter rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__depthMs">
            <summary>
            <para>The voice filter's depth.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__levelDb">
            <summary>
            <para>The voice's volume.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__cutoffHz">
            <summary>
            <para>The voice's cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__pan">
            <summary>
            <para>The voice's pan level.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__delayMs">
            <summary>
            <para>The voice's signal delay.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__rateHz">
            <summary>
            <para>The voice's filter rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__depthMs">
            <summary>
            <para>The voice filter's depth.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__levelDb">
            <summary>
            <para>The voice's volume.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__cutoffHz">
            <summary>
            <para>The voice's cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__pan">
            <summary>
            <para>The voice's pan level.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__delayMs">
            <summary>
            <para>The voice's signal delay.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__rateHz">
            <summary>
            <para>The voice's filter rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__depthMs">
            <summary>
            <para>The voice filter's depth.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__levelDb">
            <summary>
            <para>The voice's volume.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__cutoffHz">
            <summary>
            <para>The voice's cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__pan">
            <summary>
            <para>The voice's pan level.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectCompressor">
            <summary>
            <para>Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).</para>
            <para>Compressor has many uses in the mix:</para>
            <para>- In the Master bus to compress the whole output (Although a <see cref="T:Godot.AudioEffectLimiter"/> is probably better)</para>
            <para>- In voice channels to ensure they sound as balanced as possible.</para>
            <para>- Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard.</para>
            <para>- Accentuates transients by using a wider attack, making effects sound more punchy.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Threshold">
            <summary>
            <para>The level above which compression is applied to the audio. Value can range from -60 to 0. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Ratio">
            <summary>
            <para>Amount of compression applied to the audio once it passes the threshold level. The higher the ratio the more the loud parts of the audio will be compressed. Value can range from 1 to 48. Default value: <c>4</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Gain">
            <summary>
            <para>Gain applied to the output signal.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.AttackUs">
            <summary>
            <para>Compressor's reaction time when the signal exceeds the threshold. Value can range from 20 to 2000. Default value: <c>20ms</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.ReleaseMs">
            <summary>
            <para>Compressor's delay time to stop reducing the signal after the signal level falls below the threshold. Value can range from 20 to 2000. Default value: <c>250ms</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Mix">
            <summary>
            <para>Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Sidechain">
            <summary>
            <para>Reduce the sound level using another audio bus for threshold detection.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDelay">
            <summary>
            <para>Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Dry">
            <summary>
            <para>Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__active">
            <summary>
            <para>If <c>true</c>, <c>tap1</c> will be enabled. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__delayMs">
            <summary>
            <para>Tap1 delay time in milliseconds. Default value: <c>250ms</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__levelDb">
            <summary>
            <para>Sound level for <c>tap1</c>. Default value: <c>-6 dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__pan">
            <summary>
            <para>Pan position for <c>tap1</c>. Value can range from -1 (fully left) to 1 (fully right). Default value: <c>0.2</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__active">
            <summary>
            <para>If <c>true</c>, <c>tap2</c> will be enabled. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__delayMs">
            <summary>
            <para>Tap2 delay time in milliseconds. Default value: <c>500ms</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__levelDb">
            <summary>
            <para>Sound level for <c>tap2</c>. Default value: <c>-12 dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__pan">
            <summary>
            <para>Pan position for <c>tap2</c>. Value can range from -1 (fully left) to 1 (fully right). Default value: <c>-0.4</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__active">
            <summary>
            <para>If <c>true</c>, feedback is enabled. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__delayMs">
            <summary>
            <para>Feedback delay time in milliseconds. Default value: <c>340</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__levelDb">
            <summary>
            <para>Sound level for <c>tap1</c>. Default value: <c>-6 dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__lowpass">
            <summary>
            <para>Low-pass filter for feedback. Frequencies below the Low Cut value are filtered out of the source signal. Default value: <c>16000</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDistortion">
            <summary>
            <para>Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape.</para>
            <para>By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Clip">
            <summary>
            <para>Digital distortion effect which cuts off peaks at the top and bottom of the waveform.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Atan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Lofi">
            <summary>
            <para>Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Overdrive">
            <summary>
            <para>Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Waveshape">
            <summary>
            <para>Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Mode">
            <summary>
            <para>Distortion type. Default value: <c>MODE_CLIP</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PreGain">
            <summary>
            <para>Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.KeepHfHz">
            <summary>
            <para>High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: <c>16000</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Drive">
            <summary>
            <para>Distortion power. Value can range from 0 to 1. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PostGain">
            <summary>
            <para>Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ">
            <summary>
            <para>AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.SetBandGainDb(System.Int32,System.Single)">
            <summary>
            <para>Sets band's gain at the specified index, in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandGainDb(System.Int32)">
            <summary>
            <para>Returns the band's gain at the specified index, in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandCount">
            <summary>
            <para>Returns the number of bands of the equalizer.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ10">
            <summary>
            <para>Frequency bands :</para>
            <para>Band 1 : 31 Hz</para>
            <para>Band 2 : 62 Hz</para>
            <para>Band 3 : 125 Hz</para>
            <para>Band 4 : 250 Hz</para>
            <para>Band 5 : 500 Hz</para>
            <para>Band 6 : 1000 Hz</para>
            <para>Band 7 : 2000 Hz</para>
            <para>Band 8 : 4000 Hz</para>
            <para>Band 9 : 8000 Hz</para>
            <para>Band 10 : 16000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ6"/>, <see cref="T:Godot.AudioEffectEQ21"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ21">
            <summary>
            <para>Frequency bands :</para>
            <para>Band 1 : 22 Hz</para>
            <para>Band 2 : 32 Hz</para>
            <para>Band 3 : 44 Hz</para>
            <para>Band 4 : 63 Hz</para>
            <para>Band 5 : 90 Hz</para>
            <para>Band 6 : 125 Hz</para>
            <para>Band 7 : 175 Hz</para>
            <para>Band 8 : 250 Hz</para>
            <para>Band 9 : 350 Hz</para>
            <para>Band 10 : 500 Hz</para>
            <para>Band 11 : 700 Hz</para>
            <para>Band 12 : 1000 Hz</para>
            <para>Band 13 : 1400 Hz</para>
            <para>Band 14 : 2000 Hz</para>
            <para>Band 15 : 2800 Hz</para>
            <para>Band 16 : 4000 Hz</para>
            <para>Band 17 : 5600 Hz</para>
            <para>Band 18 : 8000 Hz</para>
            <para>Band 19 : 11000 Hz</para>
            <para>Band 20 : 16000 Hz</para>
            <para>Band 21 : 22000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ6"/>, <see cref="T:Godot.AudioEffectEQ10"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ6">
            <summary>
            <para>Frequency bands :</para>
            <para>Band 1 : 32 Hz</para>
            <para>Band 2 : 100 Hz</para>
            <para>Band 3 : 320 Hz</para>
            <para>Band 4 : 1000 Hz</para>
            <para>Band 5 : 3200 Hz</para>
            <para>Band 6 : 10000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ10"/>, <see cref="T:Godot.AudioEffectEQ21"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectFilter">
            <summary>
            <para>Allows frequencies other than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> to pass.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectFilter.FilterDB.Filter6db">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectFilter.FilterDB.Filter12db">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectFilter.FilterDB.Filter18db">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectFilter.FilterDB.Filter24db">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.CutoffHz">
            <summary>
            <para>Threshold frequency for the filter.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Resonance">
            <summary>
            <para>Amount of boost in the overtones near the cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Gain">
            <summary>
            <para>Gain amount of the frequencies after the filter.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Db">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioEffectHighPassFilter">
            <summary>
            <para>Cuts frequencies lower than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows higher frequencies to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLimiter">
            <summary>
            <para>A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping.</para>
            <para>Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.CeilingDb">
            <summary>
            <para>The waveform's maximum allowed value. Value can range from -20 to -0.1. Default value: <c>-0.1dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.ThresholdDb">
            <summary>
            <para>Threshold from which the limiter begins to be active. Value can range from -30 to 0. Default value: <c>0dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.SoftClipDb">
            <summary>
            <para>Applies a gain to the limited waves. Value can range from 0 to 6. Default value: <c>2dB</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.SoftClipRatio">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLowPassFilter">
            <summary>
            <para>Cuts frequencies higher than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows lower frequencies to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectNotchFilter">
            <summary>
            <para>Attenuates frequencies in a narrow band around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and cuts frequencies outside of this range.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPanner">
            <summary>
            <para>Determines how much of an audio signal is sent to the left and right buses.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPanner.Pan">
            <summary>
            <para>Pan position. Value can range from -1 (fully left) to 1 (fully right).</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPhaser">
            <summary>
            <para>Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMinHz">
            <summary>
            <para>Determines the minimum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: <c>440hz</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMaxHz">
            <summary>
            <para>Determines the maximum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: <c>1600hz</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RateHz">
            <summary>
            <para>Adjusts the rate at which the effect sweeps up and down across the frequency range.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Feedback">
            <summary>
            <para>Output percent of modified sound. Value can range from 0.1 to 0.9. Default value: <c>0.7</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Depth">
            <summary>
            <para>Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPitchShift">
            <summary>
            <para>Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPitchShift.PitchScale">
            <summary>
            <para>Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves).</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectRecord.Format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.SetRecordingActive(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.IsRecordingActive">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.GetRecording">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioEffectReverb">
            <summary>
            <para>Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayMsec">
            <summary>
            <para>Time between the original signal and the early reflections of the reverb signal. Default value: <c>150ms</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayFeedback">
            <summary>
            <para>Output percent of predelay. Value can range from 0 to 1. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.RoomSize">
            <summary>
            <para>Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. Default value: <c>0.8</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Damping">
            <summary>
            <para>Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Spread">
            <summary>
            <para>Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Hipass">
            <summary>
            <para>High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Dry">
            <summary>
            <para>Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Wet">
            <summary>
            <para>Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. Default value: <c>0.5</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectSpectrumAnalyzer.BufferLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectSpectrumAnalyzer.TapBackPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectSpectrumAnalyzer.FftSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectSpectrumAnalyzerInstance.MagnitudeMode.Average">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioEffectSpectrumAnalyzerInstance.MagnitudeMode.Max">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioEffectSpectrumAnalyzerInstance.GetMagnitudeForFrequencyRange(System.Single,System.Single,Godot.AudioEffectSpectrumAnalyzerInstance.MagnitudeMode)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.PanPullout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.TimePulloutMs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.Surround">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioServer">
            <summary>
            <para>AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.ModeStereo">
            <summary>
            <para>Two or fewer speakers are detected.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround31">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround51">
            <summary>
            <para>A 5.1 channel surround setup detected.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround71">
            <summary>
            <para>A 7.1 channel surround setup detected.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusCount(System.Int32)">
            <summary>
            <para>Adds and removes buses to make the number of buses match <c>amount</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusCount">
            <summary>
            <para>Returns the number of available buses.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBus(System.Int32)">
            <summary>
            <para>Removes the bus at index <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBus(System.Int32)">
            <summary>
            <para>Adds a bus at <c>at_position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.MoveBus(System.Int32,System.Int32)">
            <summary>
            <para>Moves the bus from index <c>index</c> to index <c>to_index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusName(System.Int32,System.String)">
            <summary>
            <para>Sets the name of the bus at index <c>bus_idx</c> to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusName(System.Int32)">
            <summary>
            <para>Returns the name of the bus with the index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusIndex(System.String)">
            <summary>
            <para>Returns the index of the bus with the name <c>bus_name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusChannels(System.Int32)">
            <summary>
            <para>Returns the amount of channels of the bus at index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusVolumeDb(System.Int32,System.Single)">
            <summary>
            <para>Sets the volume of the bus at index <c>bus_idx</c> to <c>volume_db</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusVolumeDb(System.Int32)">
            <summary>
            <para>Returns the volume of the bus at index <c>bus_idx</c> in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSend(System.Int32,System.String)">
            <summary>
            <para>Connects the output of the bus at <c>bus_idx</c> to the bus named <c>send</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusSend(System.Int32)">
            <summary>
            <para>Returns the name of the bus that the bus at index <c>bus_idx</c> sends to.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSolo(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is in solo mode.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusSolo(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is in solo mode.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusMute(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is muted.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusMute(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is muted.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusBypassEffects(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is bypassing effects.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusBypassingEffects(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is bypassing effects.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBusEffect(System.Int32,Godot.AudioEffect,System.Int32)">
            <summary>
            <para>Adds an <see cref="T:Godot.AudioEffect"/> effect to the bus <c>bus_idx</c> at <c>at_position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBusEffect(System.Int32,System.Int32)">
            <summary>
            <para>Removes the effect at index <c>effect_idx</c> from the bus at index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffectCount(System.Int32)">
            <summary>
            <para>Returns the number of effects on the bus at <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffect(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioEffect"/> at position <c>effect_idx</c> in bus <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffectInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SwapBusEffects(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Swaps the position of two effects in bus <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusEffectEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the effect at index <c>effect_idx</c> on the bus at index <c>bus_idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusEffectEnabled(System.Int32,System.Int32)">
            <summary>
            <para>If <c>true</c>, the effect at index <c>effect_idx</c> on the bus at index <c>bus_idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeLeftDb(System.Int32,System.Int32)">
            <summary>
            <para>Returns the peak volume of the left speaker at bus index <c>bus_idx</c> and channel index <c>channel</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeRightDb(System.Int32,System.Int32)">
            <summary>
            <para>Returns the peak volume of the right speaker at bus index <c>bus_idx</c> and channel index <c>channel</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Lock">
            <summary>
            <para>Locks the audio drivers mainloop. Remember to unlock it afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Unlock">
            <summary>
            <para>Unlocks the audiodriver's main loop. After locking it always unlock it.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetSpeakerMode">
            <summary>
            <para>Returns the speaker configuration.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetMixRate">
            <summary>
            <para>Returns the sample rate at the output of the audioserver.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetDeviceList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetDevice">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetDevice(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureGetDeviceList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureGetDevice">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureSetDevice(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusLayout(Godot.AudioBusLayout)">
            <summary>
            <para>Overwrites the currently used <see cref="T:Godot.AudioBusLayout"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GenerateBusLayout">
            <summary>
            <para>Generates an <see cref="T:Godot.AudioBusLayout"/> using the available buses and effects.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStream">
            <summary>
            <para>Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via <see cref="T:Godot.AudioStreamSample"/>) and OGG (via <see cref="T:Godot.AudioStreamOGGVorbis"/>) file formats.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStream.GetLength">
            <summary>
            <para>Returns the length of the audio stream in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamGenerator.MixRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioStreamGenerator.BufferLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.PushFrame(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.CanPushBuffer(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.PushBuffer(Godot.Vector2[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.GetFramesAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.GetSkips">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.AudioStreamGeneratorPlayback.ClearBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioStreamOGGVorbis">
            <summary>
            <para>OGG Vorbis audio stream driver.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.Data">
            <summary>
            <para>Contains the audio data in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.Loop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.LoopOffset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayback">
            <summary>
            <para>Can play, loop, pause a scroll through Audio. See <see cref="T:Godot.AudioStream"/> and <see cref="T:Godot.AudioStreamOGGVorbis"/> for usage.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer">
            <summary>
            <para>Plays background audio.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Stereo">
            <summary>
            <para>The audio will be played only on the first channel.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Surround">
            <summary>
            <para>The audio will be played on all surround channels.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Center">
            <summary>
            <para>The audio will be played on the second channel, which is usually the center.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> object to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.VolumeDb">
            <summary>
            <para>Volume of sound, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.PitchScale">
            <summary>
            <para>Changes the pitch and the tempo of the audio.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when added to scene tree. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.StreamPaused">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.MixTarget">
            <summary>
            <para>If the audio configuration has more than two speakers, this sets the target channels. See <c>MIX_TARGET_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Bus">
            <summary>
            <para>Bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given position 'from_position', in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/> in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.GetStreamPlayback">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer2D">
            <summary>
            <para>Plays audio that dampens with distance from screen center.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> object to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.VolumeDb">
            <summary>
            <para>Base volume without dampening.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.PitchScale">
            <summary>
            <para>Changes the pitch and the tempo of the audio.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when added to scene tree. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.StreamPaused">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.MaxDistance">
            <summary>
            <para>Maximum distance from which audio is still hearable.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Attenuation">
            <summary>
            <para>Dampens audio over distance with this as an exponent.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Bus">
            <summary>
            <para>Bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.AreaMask">
            <summary>
            <para>Areas in which this sound plays.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given position 'from_position', in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.GetStreamPlayback">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer3D">
            <summary>
            <para>Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.InverseDistance">
            <summary>
            <para>Linear dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.InverseSquareDistance">
            <summary>
            <para>Squared dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.Logarithmic">
            <summary>
            <para>Logarithmic dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.OutOfRangeModeEnum.Mix">
            <summary>
            <para>Mix this audio in, even when it's out of range.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.OutOfRangeModeEnum.Pause">
            <summary>
            <para>Pause this audio when it gets out of range.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.Disabled">
            <summary>
            <para>Disables doppler tracking.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.IdleStep">
            <summary>
            <para>Executes doppler tracking in idle step.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.PhysicsStep">
            <summary>
            <para>Executes doppler tracking in physics step.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> object to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationModel">
            <summary>
            <para>Decides if audio should get quieter with distance linearly, quadratically or logarithmically.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitDb">
            <summary>
            <para>Base sound level unaffected by dampening, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitSize">
            <summary>
            <para>Factor for the attenuation effect.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDb">
            <summary>
            <para>Sets the absolute maximum of the soundlevel, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.PitchScale">
            <summary>
            <para>Changes the pitch and the tempo of the audio.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when added to scene tree. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.StreamPaused">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDistance">
            <summary>
            <para>Sets the distance from which the 'out_of_range_mode' takes effect. Has no effect if set to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.OutOfRangeMode">
            <summary>
            <para>Decides if audio should pause when source is outside of 'max_distance' range.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Bus">
            <summary>
            <para>Bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AreaMask">
            <summary>
            <para>Areas in which this sound plays.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleEnabled">
            <summary>
            <para>If <c>true</c>, the audio should be dampened according to the direction of the sound.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleDegrees">
            <summary>
            <para>The angle in which the audio reaches cameras undampened.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleFilterAttenuationDb">
            <summary>
            <para>dampens audio if camera is outside of 'emission_angle_degrees' and 'emission_angle_enabled' is set by this factor, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterCutoffHz">
            <summary>
            <para>Dampens audio above this frequency, in Hz.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterDb">
            <summary>
            <para>Amount how much the filter affects the loudness, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.DopplerTracking">
            <summary>
            <para>Decides in which step the Doppler effect should be calculated.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given position 'from_position', in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.GetStreamPlayback">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.AudioStreamRandomPitch">
            <summary>
            <para>Randomly varies pitch on each start.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.AudioStream">
            <summary>
            <para>The current <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.RandomPitch">
            <summary>
            <para>The intensity of random pitch variation.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamSample">
            <summary>
            <para>Plays audio, can loop.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Disabled">
            <summary>
            <para>Audio does not loop.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Forward">
            <summary>
            <para>Audio loops the data between loop_begin and loop_end playing forward only.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.PingPong">
            <summary>
            <para>Audio loops the data between loop_begin and loop_end playing back and forth.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Backward">
            <summary>
            <para>Audio loops the data between loop_begin and loop_end playing backward only.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.Format8Bits">
            <summary>
            <para>Audio codec 8 bit.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.Format16Bits">
            <summary>
            <para>Audio codec 16 bit.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.ImaAdpcm">
            <summary>
            <para>Audio codec IMA ADPCM.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Data">
            <summary>
            <para>Contains the audio data in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Format">
            <summary>
            <para>Audio format. See FORMAT_* constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopMode">
            <summary>
            <para>Loop mode. See LOOP_* constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopBegin">
            <summary>
            <para>Loop start in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopEnd">
            <summary>
            <para>Loop end in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.MixRate">
            <summary>
            <para>The sample rate for mixing this audio.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Stereo">
            <summary>
            <para>If <c>true</c>, audio is stereo. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamSample.SaveToWav(System.String)">
            <summary>
            <para>Saves the AudioStreamSample as a WAV file to <c>path</c>. Samples with IMA ADPCM format can't be saved.</para>
            <para>Note that a <c>.wav</c> extension is automatically appended to <c>path</c> if it is missing.</para>
            </summary>
        </member>
        <member name="T:Godot.BackBufferCopy">
            <summary>
            <para>Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Use <c>SCREEN_TEXTURE</c> in the <c>texture()</c> function to access the buffer.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Disabled">
            <summary>
            <para>Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Rect">
            <summary>
            <para>BackBufferCopy buffers a rectangular region.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Viewport">
            <summary>
            <para>BackBufferCopy buffers the entire screen.</para>
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.CopyMode">
            <summary>
            <para>Buffer mode. See <c>COPY_MODE_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.Rect">
            <summary>
            <para>The area covered by the BackBufferCopy. Only used if <c>copy_mode</c> is <c>COPY_MODE_RECT</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.BakedLightmap">
            <summary>
            <para>Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the <see cref="T:Godot.GIProbe"/> approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.</para>
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeQualityEnum.Low">
            <summary>
            <para>Lowest bake quality mode. Fastest to calculate.</para>
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeQualityEnum.Medium">
            <summary>
            <para>Default bake quality mode.</para>
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeQualityEnum.High">
            <summary>
            <para>Highest bake quality mode. Takes longer to calculate.</para>
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeError.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeError.NoSavePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeError.NoMeshes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeError.CantCreateImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeError.UserAborted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeModeEnum.ConeTrace">
            <summary>
            <para>Less precise but faster bake mode.</para>
            </summary>
        </member>
        <member name="F:Godot.BakedLightmap.BakeModeEnum.RayTrace">
            <summary>
            <para>More precise bake mode but can take considerably longer to bake.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeCellSize">
            <summary>
            <para>Grid subdivision size for lightmapper calculation. Default value of <c>0.25</c> will work for most cases. Increase for better lighting on small details or if your scene is very large.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeQuality">
            <summary>
            <para>Three quality modes are available. Higher quality requires more rendering time. See <see cref="T:Godot.BakedLightmap.BakeQualityEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeMode">
            <summary>
            <para>Lightmapping mode. See <see cref="T:Godot.BakedLightmap.BakeModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakePropagation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeEnergy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeHdr">
            <summary>
            <para>If <c>true</c>, lightmap can capture light values greater than <c>1.0</c>. Turning this off will result in a smaller lightmap. Default value:<c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeExtents">
            <summary>
            <para>Size of affected area.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.CaptureCellSize">
            <summary>
            <para>Grid size used for real-time capture information on dynamic objects. Cannot be larger than <see cref="P:Godot.BakedLightmap.BakeCellSize"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.ImagePath">
            <summary>
            <para>Location where lightmaps will be saved.</para>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.LightData">
            <summary>
            <para>The calculated light data.</para>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmap.Bake(Godot.Node,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmap.DebugBake">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.CellSpaceTransform">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.CellSubdiv">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Energy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Octree">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.AddUser(Godot.NodePath,Godot.Texture,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserPath(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserLightmap(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.ClearUsers">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.BaseButton">
            <summary>
            <para>BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.ActionModeEnum.Press">
            <summary>
            <para>Require just a press to consider the button clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.ActionModeEnum.Release">
            <summary>
            <para>Require a press and a subsequent release before considering the button clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Normal">
            <summary>
            <para>The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Pressed">
            <summary>
            <para>The state of buttons are pressed.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Hover">
            <summary>
            <para>The state of buttons are hovered.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Disabled">
            <summary>
            <para>The state of buttons are disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.HoverPressed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Disabled">
            <summary>
            <para>If <c>true</c>, the button is in disabled state and can't be clicked or toggled.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ToggleMode">
            <summary>
            <para>If <c>true</c>, the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ShortcutInTooltip">
            <summary>
            <para>If <c>true</c>, the button will add information about its shortcut in the tooltip.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Pressed">
            <summary>
            <para>If <c>true</c>, the button's state is pressed. Means the button is pressed down or toggled (if toggle_mode is active).</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ActionMode">
            <summary>
            <para>Determines when the button is considered clicked, one of the ACTION_MODE_* constants.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ButtonMask">
            <summary>
            <para>Binary mask to choose which mouse buttons this button will respond to.</para>
            <para>To allow both left-click and right-click, set this to 3, because it's BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.EnabledFocusMode">
            <summary>
            <para>Focus access mode to use when switching between enabled/disabled (see <see cref="P:Godot.Control.FocusMode"/> and <see cref="P:Godot.BaseButton.Disabled"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Shortcut">
            <summary>
            <para><see cref="T:Godot.ShortCut"/> associated to the button.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Group">
            <summary>
            <para><see cref="T:Godot.ButtonGroup"/> associated to the button.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Pressed">
            <summary>
            <para>Called when the button is pressed.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Toggled(System.Boolean)">
            <summary>
            <para>Called when the button is toggled (only if toggle_mode is active).</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton.IsHovered">
            <summary>
            <para>Return true if the mouse has entered the button and has not left it yet.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton.GetDrawMode">
            <summary>
            <para>Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DRAW_* enum.</para>
            </summary>
        </member>
        <member name="T:Godot.BitMap">
            <summary>
            <para>A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.Create(Godot.Vector2)">
            <summary>
            <para>Creates a bitmap with the specified size, filled with false.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.CreateFromImageAlpha(Godot.Image,System.Single)">
            <summary>
            <para>Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is equal to <c>threshold</c> or less, and true in other case.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBit(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Sets the bitmap's element at the specified position, to the specified value.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetBit(Godot.Vector2)">
            <summary>
            <para>Returns bitmap's value at the specified position.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBitRect(Godot.Rect2,System.Boolean)">
            <summary>
            <para>Sets a rectangular portion of the bitmap to the specified value.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetTrueBitCount">
            <summary>
            <para>Returns the amount of bitmap elements that are set to true.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetSize">
            <summary>
            <para>Returns bitmap's dimensions.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GrowMask(System.Int32,Godot.Rect2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.BitMap.OpaqueToPolygons(Godot.Rect2,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.BitmapFont">
            <summary>
            <para>Renders text using <c>*.fnt</c> fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see <see cref="T:Godot.DynamicFont"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Height">
            <summary>
            <para>Total font height (ascent plus descent) in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Ascent">
            <summary>
            <para>Ascent (number of pixels above the baseline).</para>
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.DistanceField">
            <summary>
            <para>If <c>true</c>, distance field hint is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Fallback">
            <summary>
            <para>The fallback font.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.CreateFromFnt(System.String)">
            <summary>
            <para>Creates a BitmapFont from the <c>*.fnt</c> file at <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddKerningPair(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Adds a kerning pair to the <c>BitmapFont</c> as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetKerningPair(System.Int32,System.Int32)">
            <summary>
            <para>Returns a kerning pair as a difference.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddTexture(Godot.Texture)">
            <summary>
            <para>Adds a texture to the <c>BitmapFont</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddChar(System.Int32,System.Int32,Godot.Rect2,System.Nullable{Godot.Vector2},System.Single)">
            <summary>
            <para>Adds a character to the font, where <c>character</c> is the unicode value, <c>texture</c> is the texture index, <c>rect</c> is the region in the texture (in pixels!), <c>align</c> is the (optional) alignment for the character and <c>advance</c> is the (optional) advance.</para>
            <param name="align">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetTextureCount">
            <summary>
            <para>Returns the number of textures in the BitmapFont atlas.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetTexture(System.Int32)">
            <summary>
            <para>Returns the font atlas texture at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetCharSize(System.Int32,System.Int32)">
            <summary>
            <para>Returns the size of a character, optionally taking kerning into account if the next character is provided.</para>
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.Clear">
            <summary>
            <para>Clears all the font data and settings.</para>
            </summary>
        </member>
        <member name="P:Godot.Bone2D.Rest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Bone2D.DefaultLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Bone2D.ApplyRest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Bone2D.GetSkeletonRest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Bone2D.GetIndexInSkeleton">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.BoneAttachment">
            <summary>
            <para>This node must be the child of a <see cref="T:Godot.Skeleton"/> node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.</para>
            </summary>
        </member>
        <member name="P:Godot.BoneAttachment.BoneName">
            <summary>
            <para>The name of the attached bone.</para>
            </summary>
        </member>
        <member name="T:Godot.BoxContainer">
            <summary>
            <para>Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.Begin">
            <summary>
            <para>Aligns children with the beginning of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.Center">
            <summary>
            <para>Aligns children with the center of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.End">
            <summary>
            <para>Aligns children with the end of the container.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxContainer.Alignment">
            <summary>
            <para>The alignment of the container's children (must be one of ALIGN_BEGIN, ALIGN_CENTER, or ALIGN_END).</para>
            </summary>
        </member>
        <member name="M:Godot.BoxContainer.AddSpacer(System.Boolean)">
            <summary>
            <para>Adds a control to the box as a spacer. If <c>true</c>, begin will insert the spacer control in front of other children.</para>
            </summary>
        </member>
        <member name="T:Godot.BoxShape">
            <summary>
            <para>3D box shape that can be a child of a <see cref="T:Godot.PhysicsBody"/> or <see cref="T:Godot.Area"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxShape.Extents">
            <summary>
            <para>The shape's half extents.</para>
            </summary>
        </member>
        <member name="T:Godot.Button">
            <summary>
            <para>Button is the standard themed button. It can contain text and an icon, and will display them according to the current <see cref="T:Godot.Theme"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Left">
            <summary>
            <para>Align the text to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Center">
            <summary>
            <para>Align the text to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Right">
            <summary>
            <para>Align the text to the right.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Text">
            <summary>
            <para>The button's text that will be displayed inside the button's area.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Icon">
            <summary>
            <para>Button's icon, if text is present the icon will be placed before the text.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Flat">
            <summary>
            <para>Flat buttons don't display decoration.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.ClipText">
            <summary>
            <para>When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. This property is disabled by default.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Align">
            <summary>
            <para>Text alignment policy for the button's text, use one of the ALIGN_* constants.</para>
            </summary>
        </member>
        <member name="T:Godot.ButtonGroup">
            <summary>
            <para>Group of <see cref="T:Godot.Button"/>. All direct and indirect children buttons become radios. Only one allows being pressed.</para>
            <para><see cref="P:Godot.BaseButton.ToggleMode"/> should be <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ButtonGroup.GetPressedButton">
            <summary>
            <para>Returns the current pressed button.</para>
            </summary>
        </member>
        <member name="M:Godot.ButtonGroup.GetButtons">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <see cref="T:Godot.Button"/>s who have this as their <c>ButtonGroup</c> (see <see cref="P:Godot.BaseButton.Group"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.Camera">
            <summary>
            <para>Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest <see cref="T:Godot.Viewport"/> node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides 3D display capabilities to a <see cref="T:Godot.Viewport"/>, and, without one, a scene registered in that <see cref="T:Godot.Viewport"/> (or higher viewports) can't be displayed.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.KeepAspectEnum.Width">
            <summary>
            <para>Preserves the horizontal aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.KeepAspectEnum.Height">
            <summary>
            <para>Preserves the vertical aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.ProjectionEnum.Perspective">
            <summary>
            <para>Perspective Projection (object's size on the screen becomes smaller when far away).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.ProjectionEnum.Orthogonal">
            <summary>
            <para>Orthogonal Projection (objects remain the same size on the screen no matter how far away they are).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.DopplerTrackingEnum.Disabled">
            <summary>
            <para>Disable Doppler effect simulation (default).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.DopplerTrackingEnum.IdleStep">
            <summary>
            <para>Simulate Doppler effect by tracking positions of objects that are changed in <c>_process</c>. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's <c>pitch shift</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera.DopplerTrackingEnum.PhysicsStep">
            <summary>
            <para>Simulate Doppler effect by tracking positions of objects that are changed in <c>_physics_process</c>. Changes in the relative velocity of this Camera compared to those objects affect how Audio is perceived (changing the Audio's <c>pitch shift</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.KeepAspect">
            <summary>
            <para>The axis to lock during <see cref="P:Godot.Camera.Fov"/>/<see cref="P:Godot.Camera.Size"/> adjustments. Can be either <c>KEEP_WIDTH</c> or <c>KEEP_HEIGHT</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.CullMask">
            <summary>
            <para>The culling mask that describes which 3D render layers are rendered by this camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Environment">
            <summary>
            <para>The <see cref="T:Godot.Environment"/> to use for this Camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.HOffset">
            <summary>
            <para>The horizontal (X) offset of the Camera viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.VOffset">
            <summary>
            <para>The vertical (Y) offset of the Camera viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.DopplerTracking">
            <summary>
            <para>If not <c>DOPPLER_TRACKING_DISABLED</c> this Camera will simulate the Doppler effect for objects changed in particular <c>_process</c> methods. Default value: <c>DOPPLER_TRACKING_DISABLED</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Projection">
            <summary>
            <para>The camera's projection mode. In <c>PROJECTION_PERSPECTIVE</c> mode, objects' z-distance from the camera's local space scales their perceived size.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Current">
            <summary>
            <para>If <c>true</c>, the ancestor <see cref="T:Godot.Viewport"/> is currently using this Camera. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Fov">
            <summary>
            <para>The camera's field of view angle (in degrees). Only applicable in perspective mode. Since <see cref="P:Godot.Camera.KeepAspect"/> locks one axis, <c>fov</c> sets the other axis' field of view angle.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Size">
            <summary>
            <para>The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since <see cref="P:Godot.Camera.KeepAspect"/> locks on axis, <c>size</c> sets the other axis' size length.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Near">
            <summary>
            <para>The distance to the near culling boundary for this Camera relative to its local z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera.Far">
            <summary>
            <para>The distance to the far culling boundary for this Camera relative to its local z-axis.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectRayNormal(Godot.Vector2)">
            <summary>
            <para>Returns a normal vector in worldspace, that is the result of projecting a point on the <see cref="T:Godot.Viewport"/> rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectLocalRayNormal(Godot.Vector2)">
            <summary>
            <para>Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectRayOrigin(Godot.Vector2)">
            <summary>
            <para>Returns a 3D position in worldspace, that is the result of projecting a point on the <see cref="T:Godot.Viewport"/> rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.UnprojectPosition(Godot.Vector3)">
            <summary>
            <para>Returns the 2D coordinate in the <see cref="T:Godot.Viewport"/> rectangle that maps to the given 3D point in worldspace.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.IsPositionBehind(Godot.Vector3)">
            <summary>
            <para>Returns <c>true</c> if the given position is behind the Camera. Note that a position which returns <c>false</c> may still be outside the Camera's field of view.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectPosition(Godot.Vector2)">
            <summary>
            <para>Returns the 3D point in worldspace that maps to the given 2D coordinate in the <see cref="T:Godot.Viewport"/> rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.SetPerspective(System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the camera projection to perspective mode, by specifying a FOV Y angle in degrees (FOV means Field of View), and the near and far clip planes in worldspace units.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.SetOrthogonal(System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the camera projection to orthogonal mode, by specifying a width and the near and far clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.MakeCurrent">
            <summary>
            <para>Makes this camera the current Camera for the <see cref="T:Godot.Viewport"/> (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.ClearCurrent(System.Boolean)">
            <summary>
            <para>If this is the current Camera, remove it from being current. If <c>enable_next</c> is true, request to make the next Camera current, if any.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.GetCameraTransform">
            <summary>
            <para>Gets the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the <see cref="T:Godot.Node"/> transform.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera.GetFrustum">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Camera.SetCullMaskBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Camera.GetCullMaskBit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Camera2D">
            <summary>
            <para>Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of <see cref="T:Godot.CanvasItem"/> based nodes.</para>
            <para>This node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from <see cref="T:Godot.Node2D"/> and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.Camera2DProcessMode.Physics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Camera2D.Camera2DProcessMode.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Camera2D.AnchorModeEnum.FixedTopLeft">
            <summary>
            <para>The camera's position is fixed so that the top-left corner is always at the origin.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.AnchorModeEnum.DragCenter">
            <summary>
            <para>The camera's position takes into account vertical/horizontal offsets and the screen size.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Offset">
            <summary>
            <para>The camera's offset, useful for looking around or camera shake animations.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.AnchorMode">
            <summary>
            <para>The Camera2D's anchor point. See <c>ANCHOR_MODE_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Rotating">
            <summary>
            <para>If <c>true</c>, the camera rotates with the target. Default value: <c>false</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Current">
            <summary>
            <para>If <c>true</c>, the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera <c>current</c> will disable this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Zoom">
            <summary>
            <para>The camera's zoom relative to the viewport. Values larger than <c>Vector2(1, 1)</c> zoom out and smaller values zoom in. For an example, use <c>Vector2(0.5, 0.5)</c> for a 2x zoom in, and <c>Vector2(4, 4)</c> for a 4x zoom out.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.CustomViewport">
            <summary>
            <para>The custom <see cref="T:Godot.Viewport"/> node attached to the <c>Camera2D</c>. If null or not a <see cref="T:Godot.Viewport"/>, uses the default viewport instead.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.ProcessMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitLeft">
            <summary>
            <para>Left scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitTop">
            <summary>
            <para>Top scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitRight">
            <summary>
            <para>Right scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitBottom">
            <summary>
            <para>Bottom scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitSmoothed">
            <summary>
            <para>If <c>true</c>, the camera smoothly stops when reaches its limits. Default value: <c>false</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginHEnabled">
            <summary>
            <para>If <c>true</c>, the camera only moves when reaching the horizontal drag margins. If <c>false</c>, the camera moves horizontally regardless of margins. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginVEnabled">
            <summary>
            <para>If <c>true</c>, the camera only moves when reaching the vertical drag margins. If <c>false</c>, the camera moves vertically regardless of margins. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingEnabled">
            <summary>
            <para>If <c>true</c>, the camera smoothly moves towards the target at <see cref="P:Godot.Camera2D.SmoothingSpeed"/>. Default value: <c>false</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingSpeed">
            <summary>
            <para>Speed in pixels per second of the camera's smoothing effect when <see cref="P:Godot.Camera2D.SmoothingEnabled"/> is <c>true</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.OffsetV">
            <summary>
            <para>The vertical offset of the camera, relative to the drag margins. Default value: <c>0</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.OffsetH">
            <summary>
            <para>The horizontal offset of the camera, relative to the drag margins. Default value: <c>0</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginLeft">
            <summary>
            <para>Left margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginTop">
            <summary>
            <para>Top margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginRight">
            <summary>
            <para>Right margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginBottom">
            <summary>
            <para>Bottom margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawScreen">
            <summary>
            <para>If <c>true</c>, draws the camera's screen rectangle in the editor. Default value: <c>false</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawLimits">
            <summary>
            <para>If <c>true</c>, draws the camera's limits rectangle in the editor. Default value: <c>true</c></para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawDragMargin">
            <summary>
            <para>If <c>true</c>, draws the camera's drag margin rectangle in the editor. Default value: <c>false</c></para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.MakeCurrent">
            <summary>
            <para>Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ClearCurrent">
            <summary>
            <para>Removes any <c>Camera2D</c> from the ancestor <see cref="T:Godot.Viewport"/>'s internal currently-assigned camera.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraPosition">
            <summary>
            <para>Return the camera position.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraScreenCenter">
            <summary>
            <para>Returns the location of the <c>Camera2D</c>'s screen-center, relative to the origin.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ForceUpdateScroll">
            <summary>
            <para>Force the camera to update scroll immediately.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ResetSmoothing">
            <summary>
            <para>Set the camera's position immediately to its current smoothing destination.</para>
            <para>This has no effect if smoothing is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.Align">
            <summary>
            <para>Align the camera to the tracked node</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem">
            <summary>
            <para>Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by <see cref="T:Godot.Control"/>, for anything GUI related, and by <see cref="T:Godot.Node2D"/> for anything 2D engine related.</para>
            <para>Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.</para>
            <para>Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).</para>
            <para>Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.</para>
            <para>Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationTransformChanged">
            <summary>
            <para>Canvas item transform has changed. Notification is only received if enabled by <see cref="M:Godot.CanvasItem.SetNotifyTransform(System.Boolean)"/> or <see cref="M:Godot.CanvasItem.SetNotifyLocalTransform(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationDraw">
            <summary>
            <para>CanvasItem is requested to draw.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationVisibilityChanged">
            <summary>
            <para>Canvas item visibility has changed.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationEnterCanvas">
            <summary>
            <para>Canvas item has entered the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationExitCanvas">
            <summary>
            <para>Canvas item has exited the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.Mix">
            <summary>
            <para>Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.Add">
            <summary>
            <para>Additive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.Sub">
            <summary>
            <para>Subtractive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.Mul">
            <summary>
            <para>Multiplicative blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.PremultAlpha">
            <summary>
            <para>Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.BlendMode.Disabled">
            <summary>
            <para>Disable blending mode. Colors including alpha are written as is. Only applicable for render targets with a transparent background. No lighting will be applied.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Visible">
            <summary>
            <para>If <c>true</c>, this <c>CanvasItem</c> is drawn. Default value: <c>true</c>. For controls that inherit <see cref="T:Godot.Popup"/>, the correct way to make them visible is to call one of the multiple popup*() functions instead.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Modulate">
            <summary>
            <para>The color applied to textures on this <c>CanvasItem</c>. Default value: <c>Color(1, 1, 1, 1)</c> (opaque "white").</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.SelfModulate">
            <summary>
            <para>The color applied to textures on this <c>CanvasItem</c>. This is not inherited by children <c>CanvasItem</c>s. Default value: <c>Color(1, 1, 1, 1)</c> (opaque "white")..</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowBehindParent">
            <summary>
            <para>If <c>true</c>, the object draws behind its parent. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowOnTop">
            <summary>
            <para>If <c>true</c>, the object draws on top of its parent. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.LightMask">
            <summary>
            <para>The rendering layers in which this <c>CanvasItem</c> responds to <see cref="T:Godot.Light2D"/> nodes. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Material">
            <summary>
            <para>The material applied to textures on this <c>CanvasItem</c>. Default value: <c>null</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.UseParentMaterial">
            <summary>
            <para>If <c>true</c>, the parent <c>CanvasItem</c>'s <see cref="P:Godot.CanvasItem.Material"/> property is used as this one's material. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem._Draw">
            <summary>
            <para>Called (if exists) to draw the canvas item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasItem">
            <summary>
            <para>Return the canvas item RID used by <see cref="T:Godot.VisualServer"/> for this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsVisibleInTree">
            <summary>
            <para>Returns <c>true</c> if the node is present in the <see cref="T:Godot.SceneTree"/>, its <see cref="P:Godot.CanvasItem.Visible"/> property is <c>true</c> and its inherited visibility is also <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Show">
            <summary>
            <para>Show the CanvasItem currently hidden. For controls that inherit <see cref="T:Godot.Popup"/>, the correct way to make them visible is to call one of the multiple popup*() functions instead.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Hide">
            <summary>
            <para>Hide the CanvasItem currently visible.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Update">
            <summary>
            <para>Queue the CanvasItem for update. <c>NOTIFICATION_DRAW</c> will be called on idle time to request redraw.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetAsToplevel(System.Boolean)">
            <summary>
            <para>Sets as top level. This means that it will not inherit transform from parent canvas items.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsSetAsToplevel">
            <summary>
            <para>Return if set as toplevel. See <see cref="M:Godot.CanvasItem.SetAsToplevel(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawLine(Godot.Vector2,Godot.Vector2,Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolyline(Godot.Vector2[],Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Draws interconnected line segments with a uniform <c>color</c> and <c>width</c> and optional antialiasing.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolylineColors(Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            <para>Draws interconnected line segments with a uniform <c>width</c>, segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between <c>points</c> and <c>colors</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultiline(Godot.Vector2[],Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Draws multiple, parallel lines with a uniform <c>color</c> and <c>width</c> and optional antialiasing.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultilineColors(Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            <para>Draws multiple, parallel lines with a uniform <c>width</c>, segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between <c>points</c> and <c>colors</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawRect(Godot.Rect2,Godot.Color,System.Boolean)">
            <summary>
            <para>Draws a colored rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawCircle(Godot.Vector2,System.Single,Godot.Color)">
            <summary>
            <para>Draws a colored circle.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTexture(Godot.Texture,Godot.Vector2,System.Nullable{Godot.Color},Godot.Texture)">
            <summary>
            <para>Draws a texture at a given position.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRect(Godot.Texture,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            <para>Draws a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRectRegion(Godot.Texture,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture,System.Boolean)">
            <summary>
            <para>Draws a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawStyleBox(Godot.StyleBox,Godot.Rect2)">
            <summary>
            <para>Draws a styled rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPrimitive(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture,System.Single,Godot.Texture)">
            <summary>
            <para>Draws a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolygon(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture,Godot.Texture,System.Boolean)">
            <summary>
            <para>Draws a polygon of any amount of points, convex or concave.</para>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawColoredPolygon(Godot.Vector2[],Godot.Color,Godot.Vector2[],Godot.Texture,Godot.Texture,System.Boolean)">
            <summary>
            <para>Draws a colored polygon of any amount of points, convex or concave.</para>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawString(Godot.Font,Godot.Vector2,System.String,System.Nullable{Godot.Color},System.Int32)">
            <summary>
            <para>Draws a string using a custom font.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawChar(Godot.Font,Godot.Vector2,System.String,System.String,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMesh(Godot.Mesh,Godot.Texture,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultimesh(Godot.MultiMesh,Godot.Texture,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransform(Godot.Vector2,System.Single,Godot.Vector2)">
            <summary>
            <para>Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransformMatrix(Godot.Transform2D)">
            <summary>
            <para>Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetTransform">
            <summary>
            <para>Get the transform matrix of this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransform">
            <summary>
            <para>Get the global transform matrix of this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransformWithCanvas">
            <summary>
            <para>Get the global transform matrix of this item in relation to the canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportTransform">
            <summary>
            <para>Get this item's transform in relation to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportRect">
            <summary>
            <para>Get the viewport's boundaries as a <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasTransform">
            <summary>
            <para>Get the transform matrix of this item's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetLocalMousePosition">
            <summary>
            <para>Get the mouse position relative to this item's position.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalMousePosition">
            <summary>
            <para>Get the global position of the mouse.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvas">
            <summary>
            <para>Return the <see cref="T:Godot.RID"/> of the <see cref="T:Godot.World2D"/> canvas where this item is in.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetWorld2d">
            <summary>
            <para>Get the <see cref="T:Godot.World2D"/> where this item is in.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, children will be updated with local transform data.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsLocalTransformNotificationEnabled">
            <summary>
            <para>Returns <c>true</c> if local transform notifications are communicated to children.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyTransform(System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, children will be updated with global transform data.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsTransformNotificationEnabled">
            <summary>
            <para>Returns <c>true</c> if global transform notifications are communicated to children.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.ForceUpdateTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeCanvasPositionLocal(Godot.Vector2)">
            <summary>
            <para>Assigns <c>screen_point</c> as this node's new local transform.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeInputLocal(Godot.InputEvent)">
            <summary>
            <para>Transformations issued by <c>event</c>'s inputs are applied in local space instead of global space.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItemMaterial">
            <summary>
            <para><c>CanvasItemMaterial</c>s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a <see cref="T:Godot.ShaderMaterial"/> to more fully customize a material's interactions with a <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.Normal">
            <summary>
            <para>Render the material using both light and non-light sensitive material properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.Unshaded">
            <summary>
            <para>Render the material as if there were no light.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.LightOnly">
            <summary>
            <para>Render the material as if there were only light.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Mix">
            <summary>
            <para>Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Add">
            <summary>
            <para>Additive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Sub">
            <summary>
            <para>Subtractive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Mul">
            <summary>
            <para>Multiplicative blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.PremultAlpha">
            <summary>
            <para>Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.BlendMode">
            <summary>
            <para>The manner in which a material's rendering is applied to underlying textures.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.LightMode">
            <summary>
            <para>The manner in which material reacts to lighting.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimHFrames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimVFrames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimLoop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CanvasLayer">
            <summary>
            <para>Canvas drawing layer. <see cref="T:Godot.CanvasItem"/> nodes that are direct or indirect children of a <c>CanvasLayer</c> will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a <c>CanvasLayer</c> with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Layer">
            <summary>
            <para>Layer index for draw order. Lower values are drawn first. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Offset">
            <summary>
            <para>The layer's base offset.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.RotationDegrees">
            <summary>
            <para>The layer's rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Rotation">
            <summary>
            <para>The layer's rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Scale">
            <summary>
            <para>The layer's scale.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Transform">
            <summary>
            <para>The layer's transform.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.CustomViewport">
            <summary>
            <para>The custom <see cref="T:Godot.Viewport"/> node assigned to the <c>CanvasLayer</c>. If null, uses the default viewport instead.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasLayer.GetCanvas">
            <summary>
            <para>Returns the RID of the canvas used by this layer.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasModulate">
            <summary>
            <para><c>CanvasModulate</c> tints the canvas elements using its assigned <c>color</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasModulate.Color">
            <summary>
            <para>The tint color to apply.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleMesh">
            <summary>
            <para>Class representing a capsule-shaped <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Radius">
            <summary>
            <para>Radius of the capsule mesh. Defaults to 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.MidHeight">
            <summary>
            <para>Height of the capsule mesh from the center point. Defaults to 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the capsule mesh. Defaults to 64.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Rings">
            <summary>
            <para>Number of rings along the height of the capsule. Defaults to 8.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape">
            <summary>
            <para>Capsule shape for collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape.Radius">
            <summary>
            <para>The capsule's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape.Height">
            <summary>
            <para>The capsule's height.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape2D">
            <summary>
            <para>Capsule shape for 2D collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Radius">
            <summary>
            <para>The capsule's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Height">
            <summary>
            <para>The capsule's height.</para>
            </summary>
        </member>
        <member name="T:Godot.CenterContainer">
            <summary>
            <para>CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.</para>
            </summary>
        </member>
        <member name="P:Godot.CenterContainer.UseTopLeft">
            <summary>
            <para>If <c>true</c>, centers children relative to the <c>CenterContainer</c>'s top left corner. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.CheckBox">
            <summary>
            <para>A checkbox allows the user to make a binary choice (choosing only one of two possible options), for example Answer 'yes' or 'no'.</para>
            </summary>
        </member>
        <member name="T:Godot.CheckButton">
            <summary>
            <para>CheckButton is a toggle button displayed as a check field.</para>
            </summary>
        </member>
        <member name="T:Godot.CircleShape2D">
            <summary>
            <para>Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.</para>
            </summary>
        </member>
        <member name="P:Godot.CircleShape2D.Radius">
            <summary>
            <para>The circle's radius.</para>
            </summary>
        </member>
        <member name="T:Godot.ClassDB">
            <summary>
            <para>Provides access to metadata stored for every available class.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetClassList">
            <summary>
            <para>Returns the names of all the classes available.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetInheritersFromClass(System.String)">
            <summary>
            <para>Returns the names of all the classes that directly or indirectly inherit from 'class'.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetParentClass(System.String)">
            <summary>
            <para>Returns the parent class of 'class'.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassExists(System.String)">
            <summary>
            <para>Returns whether the specified 'class' is available or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsParentClass(System.String,System.String)">
            <summary>
            <para>Returns whether 'inherits' is an ancestor of 'class' or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.CanInstance(System.String)">
            <summary>
            <para>Returns true if you can instance objects from the specified 'class', false in other case.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.Instance(System.String)">
            <summary>
            <para>Creates an instance of 'class'.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasSignal(System.String,System.String)">
            <summary>
            <para>Return whether 'class' or its ancestry has a signal called 'signal' or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignal(System.String,System.String)">
            <summary>
            <para>Returns the 'signal' data of 'class' or its ancestry. The returned value is a <see cref="T:Godot.Collections.Dictionary"/> with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignalList(System.String,System.Boolean)">
            <summary>
            <para>Returns an array with all the signals of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a <see cref="T:Godot.Collections.Dictionary"/> as described in <see cref="M:Godot.ClassDB.ClassGetSignal(System.String,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetPropertyList(System.String,System.Boolean)">
            <summary>
            <para>Returns an array with all the properties of 'class' or its ancestry if 'no_inheritance' is false.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetProperty(Godot.Object,System.String)">
            <summary>
            <para>Returns the value of 'property' of 'class' or its ancestry.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassSetProperty(Godot.Object,System.String,System.Object)">
            <summary>
            <para>Sets 'property' value of 'class' to 'value'.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasMethod(System.String,System.String,System.Boolean)">
            <summary>
            <para>Return whether 'class' (or its ancestry if 'no_inheritance' is false) has a method called 'method' or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetMethodList(System.String,System.Boolean)">
            <summary>
            <para>Returns an array with all the methods of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a <see cref="T:Godot.Collections.Dictionary"/> with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstantList(System.String,System.Boolean)">
            <summary>
            <para>Returns an array with the names all the integer constants of 'class' or its ancestry.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasIntegerConstant(System.String,System.String)">
            <summary>
            <para>Return whether 'class' or its ancestry has an integer constant called 'name' or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstant(System.String,System.String)">
            <summary>
            <para>Returns the value of the integer constant 'name' of 'class' or its ancestry. Always returns 0 when the constant could not be found.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetCategory(System.String)">
            <summary>
            <para>Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsClassEnabled(System.String)">
            <summary>
            <para>Returns whether this class is enabled or not.</para>
            </summary>
        </member>
        <member name="F:Godot.ClippedCamera.ProcessModeEnum.Physics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ClippedCamera.ProcessModeEnum.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera.ProcessMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera.CollisionMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera.ClipToAreas">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera.ClipToBodies">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.GetCollisionMaskBit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.AddExceptionRid(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.AddException(Godot.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.RemoveExceptionRid(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.RemoveException(Godot.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera.ClearExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CollisionObject">
            <summary>
            <para>CollisionObject is the base class for physics objects. It can hold any number of collision <see cref="T:Godot.Shape"/>s. Each shape must be assigned to a shape owner. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the <c>shape_owner_*</c> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject.InputRayPickable">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.CollisionObject"/>'s shapes will respond to <see cref="T:Godot.RayCast"/>s. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject.InputCaptureOnDrag">
            <summary>
            <para>If <c>true</c>, the <c>CollisionObject</c> will continue to receive input events as the mouse is dragged across its shapes. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject._InputEvent(Godot.Object,Godot.InputEvent,Godot.Vector3,Godot.Vector3,System.Int32)">
            <summary>
            <para>Accepts unhandled <see cref="T:Godot.InputEvent"/>s. <c>click_position</c> is the clicked location in world space and <c>click_normal</c> is the normal vector extending from the clicked surface of the <see cref="T:Godot.Shape"/> at <c>shape_idx</c>. Connect to the <c>input_event</c> signal to easily pick up these events.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.GetRid">
            <summary>
            <para>Returns the object's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.CreateShapeOwner(Godot.Object)">
            <summary>
            <para>Creates a new shape owner for the given object. Returns <c>owner_id</c> of the new owner for future reference.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.RemoveShapeOwner(System.Int32)">
            <summary>
            <para>Removes the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.GetShapeOwners">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <c>owner_id</c> identifiers. You can use these ids in other methods that take <c>owner_id</c> as an argument.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerSetTransform(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetTransform(System.Int32)">
            <summary>
            <para>Returns the shape owner's <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetOwner(System.Int32)">
            <summary>
            <para>Returns the parent object of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerSetDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, disables the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.IsShapeOwnerDisabled(System.Int32)">
            <summary>
            <para>If <c>true</c>, the shape owner and its shapes are disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerAddShape(System.Int32,Godot.Shape)">
            <summary>
            <para>Adds a <see cref="T:Godot.Shape"/> to the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShapeCount(System.Int32)">
            <summary>
            <para>Returns the number of shapes the given shape owner contains.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShape(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Shape"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShapeIndex(System.Int32,System.Int32)">
            <summary>
            <para>Returns the child index of the <see cref="T:Godot.Shape"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerRemoveShape(System.Int32,System.Int32)">
            <summary>
            <para>Removes a shape from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerClearShapes(System.Int32)">
            <summary>
            <para>Removes all shapes from the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeFindOwner(System.Int32)">
            <summary>
            <para>Returns the <c>owner_id</c> of the given shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D">
            <summary>
            <para>CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision <see cref="T:Godot.Shape2D"/>s. Each shape must be assigned to a shape owner. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the <c>shape_owner_*</c> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject2D.InputPickable">
            <summary>
            <para>If <c>true</c>, this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D._InputEvent(Godot.Object,Godot.InputEvent,System.Int32)">
            <summary>
            <para>Accepts unhandled <see cref="T:Godot.InputEvent"/>s. <c>shape_idx</c> is the child index of the clicked <see cref="T:Godot.Shape2D"/>. Connect to the <c>input_event</c> signal to easily pick up these events.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetRid">
            <summary>
            <para>Returns the object's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.CreateShapeOwner(Godot.Object)">
            <summary>
            <para>Creates a new shape owner for the given object. Returns <c>owner_id</c> of the new owner for future reference.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.RemoveShapeOwner(System.Int32)">
            <summary>
            <para>Removes the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetShapeOwners">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <c>owner_id</c> identifiers. You can use these ids in other methods that take <c>owner_id</c> as an argument.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetTransform(System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform2D"/> of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetTransform(System.Int32)">
            <summary>
            <para>Returns the shape owner's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetOwner(System.Int32)">
            <summary>
            <para>Returns the parent object of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, disables the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerDisabled(System.Int32)">
            <summary>
            <para>If <c>true</c>, the shape owner and its shapes are disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetOneWayCollision(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, collisions for the shape owner originating from this <c>CollisionObject2D</c> will not be reported to collided with <c>CollisionObject2D</c>s.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerOneWayCollisionEnabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if collisions for the shape owner originating from this <c>CollisionObject2D</c> will not be reported to collided with <c>CollisionObject2D</c>s.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetOneWayCollisionMargin(System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetShapeOwnerOneWayCollisionMargin(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerAddShape(System.Int32,Godot.Shape2D)">
            <summary>
            <para>Adds a <see cref="T:Godot.Shape2D"/> to the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeCount(System.Int32)">
            <summary>
            <para>Returns the number of shapes the given shape owner contains.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShape(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Shape2D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeIndex(System.Int32,System.Int32)">
            <summary>
            <para>Returns the child index of the <see cref="T:Godot.Shape2D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerRemoveShape(System.Int32,System.Int32)">
            <summary>
            <para>Removes a shape from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerClearShapes(System.Int32)">
            <summary>
            <para>Removes all shapes from the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeFindOwner(System.Int32)">
            <summary>
            <para>Returns the <c>owner_id</c> of the given shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon">
            <summary>
            <para>Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a <see cref="T:Godot.Shape"/> for gameplay. Properties modified during gameplay will have no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Depth">
            <summary>
            <para>Length that the resulting collision extends in either direction perpendicular to its polygon.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Disabled">
            <summary>
            <para>If true, no collision will be produced.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Polygon">
            <summary>
            <para>Array of vertices which define the polygon. Note that the returned value is a copy of the original. Methods which mutate the size or properties of the return value will not impact the original polygon. To change properties of the polygon, assign it to a temporary variable and make changes before reassigning the <c>polygon</c> member.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon2D">
            <summary>
            <para>Provides a 2D collision polygon to a <see cref="T:Godot.CollisionObject2D"/> parent. Polygon can be drawn in the editor or specified by a list of vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.CollisionPolygon2D.BuildModeEnum.Solids">
            <summary>
            <para>Collisions will include the polygon and its contained area.</para>
            </summary>
        </member>
        <member name="F:Godot.CollisionPolygon2D.BuildModeEnum.Segments">
            <summary>
            <para>Collisions will only include the polygon edges.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.BuildMode">
            <summary>
            <para>Collision build mode. Use one of the <c>BUILD_*</c> constants. Default value: <c>BUILD_SOLIDS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Polygon">
            <summary>
            <para>The polygon's list of vertices. The final point will be connected to the first. The returned value is a clone of the PoolVector2Array, not a reference.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Disabled">
            <summary>
            <para>If <c>true</c>, no collisions will be detected.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.OneWayCollision">
            <summary>
            <para>If <c>true</c>, only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.OneWayCollisionMargin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CollisionShape">
            <summary>
            <para>Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an <see cref="T:Godot.Area"/> to give it a detection shape, or add it to a <see cref="T:Godot.PhysicsBody"/> to create a solid object. IMPORTANT: this is an Editor-only helper to create shapes, use <see cref="M:Godot.CollisionObject.ShapeOwnerGetShape(System.Int32,System.Int32)"/> to get the actual shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape.Shape">
            <summary>
            <para>The actual shape owned by this collision shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape.Disabled">
            <summary>
            <para>A disabled collision shape has no effect in the world.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionShape.ResourceChanged(Godot.Resource)">
            <summary>
            <para>If this method exists within a script it will be called whenever the shape resource has been modified.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionShape.MakeConvexFromBrothers">
            <summary>
            <para>Sets the collision shape's shape to the addition of all its convexed <see cref="T:Godot.MeshInstance"/> siblings geometry.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionShape2D">
            <summary>
            <para>Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an <see cref="T:Godot.Area2D"/> to give it a detection shape, or add it to a <see cref="T:Godot.PhysicsBody2D"/> to create a solid object. IMPORTANT: this is an Editor-only helper to create shapes, use <see cref="M:Godot.CollisionObject2D.ShapeOwnerGetShape(System.Int32,System.Int32)"/> to get the actual shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Shape">
            <summary>
            <para>The actual shape owned by this collision shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Disabled">
            <summary>
            <para>A disabled collision shape has no effect in the world.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.OneWayCollision">
            <summary>
            <para>Sets whether this collision shape should only detect collision on one side (top or bottom).</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.OneWayCollisionMargin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ColorPicker">
            <summary>
            <para><see cref="T:Godot.Control"/> node displaying a color picker widget. It's useful for selecting a color from an RGB/RGBA colorspace.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.Color">
            <summary>
            <para>The currently selected color.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.EditAlpha">
            <summary>
            <para>If <c>true</c>, shows an alpha channel slider (transparency).</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.RawMode">
            <summary>
            <para>If <c>true</c>, allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.DeferredMode">
            <summary>
            <para>If <c>true</c>, the color will apply only after the user releases the mouse button, otherwise it will apply immediately even in mouse motion event (which can cause performance issues).</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.AddPreset(Godot.Color)">
            <summary>
            <para>Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them. Note: the presets list is only for this color picker.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.ErasePreset(Godot.Color)">
            <summary>
            <para>Remove the given color from the list of color presets of this color picker.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.GetPresets">
            <summary>
            <para>Return the list of colors in the presets of the color picker.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton">
            <summary>
            <para>Encapsulates a <see cref="T:Godot.ColorPicker"/> making it accessible by pressing a button. Pressing the button will toggle the <see cref="T:Godot.ColorPicker"/> visibility.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.Color">
            <summary>
            <para>The currently selected color.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.EditAlpha">
            <summary>
            <para>If <c>true</c>, the alpha channel in the displayed <see cref="T:Godot.ColorPicker"/> will be visible. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPicker">
            <summary>
            <para>Returns the <see cref="T:Godot.ColorPicker"/> that this node toggles.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPopup">
            <summary>
            <para>Returns the control's <see cref="T:Godot.PopupPanel"/> which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorRect">
            <summary>
            <para>Displays a colored rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorRect.Color">
            <summary>
            <para>The fill color.</para>
            <para><code>
            $ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect's color to red.
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape">
            <summary>
            <para>Concave polygon shape resource, which can be set into a <see cref="T:Godot.PhysicsBody"/> or area. This shape is created by feeding a list of triangles.</para>
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape.SetFaces(Godot.Vector3[])">
            <summary>
            <para>Set the faces (an array of triangles).</para>
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape.GetFaces">
            <summary>
            <para>Return the faces (an array of triangles).</para>
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape2D">
            <summary>
            <para>Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for <see cref="T:Godot.RigidBody2D"/> nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.</para>
            <para>The main difference between a <see cref="T:Godot.ConvexPolygonShape2D"/> and a <c>ConcavePolygonShape2D</c> is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.ConcavePolygonShape2D.Segments">
            <summary>
            <para>The array of points that make up the <c>ConcavePolygonShape2D</c>'s line segments.</para>
            </summary>
        </member>
        <member name="T:Godot.ConeTwistJoint">
            <summary>
            <para>The joint can rotate the bodies across an axis defined by the local x-axes of the <see cref="T:Godot.Joint"/>.</para>
            <para>The twist axis is initiated as the x-axis of the <see cref="T:Godot.Joint"/>.</para>
            <para>Once the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected allong the swing axis.</para>
            <para>Could be defined as looseness in the <c>ConeTwistJoint</c>.</para>
            <para>If below 0.05, this behaviour is locked. Default value: <c>PI/4</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.Softness">
            <summary>
            <para>The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint.Param.Max">
            <summary>
            <para>End flag of PARAM_* constants, used internally.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected allong the swing axis.</para>
            <para>Could be defined as looseness in the <c>ConeTwistJoint</c>.</para>
            <para>If below 0.05, this behaviour is locked. Default value: <c>PI/4</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Softness">
            <summary>
            <para>The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="T:Godot.ConfigFile">
            <summary>
            <para>This helper class can be used to store <c>Variant</c> values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:</para>
            <para><code>
            [section]
            some_key=42
            string_example="Hello World!"
            a_vector=Vector3( 1, 0, 2 )
            </code></para>
            <para>The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.</para>
            <para>The following example shows how to parse an INI-style file from the system, read its contents and store new values in it:</para>
            <para><code>
            var config = ConfigFile.new()
            var err = config.load("user://settings.cfg")
            if err == OK: # if not, something went wrong with the file loading
                # Look for the display/width pair, and default to 1024 if missing
                var screen_width = config.get_value("display", "width", 1024)
                # Store a variable if and only if it hasn't been defined yet
                if not config.has_section_key("audio", "mute"):
                    config.set_value("audio", "mute", false)
                # Save the changes by overwriting the previous file
                config.save("user://settings.cfg")
            </code></para>
            <para>Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.SetValue(System.String,System.String,System.Object)">
            <summary>
            <para>Assigns a value to the specified key of the specified section. If the section and/or the key do not exist, they are created. Passing a <c>null</c> value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetValue(System.String,System.String,System.Object)">
            <summary>
            <para>Returns the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional <c>default</c> argument, or <c>null</c> if it is omitted.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSection(System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified section exists.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSectionKey(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified section-key pair exists.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSections">
            <summary>
            <para>Returns an array of all defined section identifiers.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSectionKeys(System.String)">
            <summary>
            <para>Returns an array of all defined key identifiers in the specified section.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.EraseSection(System.String)">
            <summary>
            <para>Deletes the specified section along with all the key-value pairs inside.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Load(System.String)">
            <summary>
            <para>Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object which the method was called on. Returns one of the <c>OK</c>, <c>FAILED</c> or <c>ERR_*</c> constants listed in <c>@GlobalScope</c>. If the load was successful, the return value is <c>OK</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Save(System.String)">
            <summary>
            <para>Saves the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure. Returns one of the <c>OK</c>, <c>FAILED</c> or <c>ERR_*</c> constants listed in <c>@GlobalScope</c>. If the load was successful, the return value is <c>OK</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.ConfirmationDialog">
            <summary>
            <para>Dialog for confirmation of actions. This dialog inherits from <see cref="T:Godot.AcceptDialog"/>, but has by default an OK and Cancel button (in host OS order).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfirmationDialog.GetCancel">
            <summary>
            <para>Return the cancel button.</para>
            </summary>
        </member>
        <member name="T:Godot.Container">
            <summary>
            <para>Base node for containers. A <c>Container</c> contains other controls and automatically arranges them in a certain way.</para>
            <para>A Control can inherit this to create custom container classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Container.NotificationSortChildren">
            <summary>
            <para>Notification for when sorting the children, it must be obeyed immediately.</para>
            </summary>
        </member>
        <member name="M:Godot.Container.QueueSort">
            <summary>
            <para>Queue resort of the contained children. This is called automatically anyway, but can be called upon request.</para>
            </summary>
        </member>
        <member name="M:Godot.Container.FitChildInRect(Godot.Control,Godot.Rect2)">
            <summary>
            <para>Fit a child control in a given rect. This is mainly a helper for creating custom container classes.</para>
            </summary>
        </member>
        <member name="T:Godot.Control">
            <summary>
            <para>Base class for all User Interface or UI related nodes. <c>Control</c> features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.</para>
            <para>For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from <c>Control</c> and <see cref="T:Godot.Container"/> nodes.</para>
            <para>User Interface nodes and input</para>
            <para>Godot sends input events to the scene's root node first, by calling <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>. <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls <see cref="M:Godot.MainLoop._InputEvent(Godot.InputEvent)"/>. Call <see cref="M:Godot.Control.AcceptEvent"/> so no other node receives the event. Once you accepted an input, it becomes handled so <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> will not process it.</para>
            <para>Only one <c>Control</c> node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call <see cref="M:Godot.Control.GrabFocus"/>. <c>Control</c> nodes lose focus when another node grabs it, or if you hide the node in focus.</para>
            <para>Set <see cref="P:Godot.Control.MouseFilter"/> to [constant MOUSE_FILTER_IGNORE] to tell a <c>Control</c> node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.</para>
            <para><see cref="T:Godot.Theme"/> resources change the Control's appearance. If you change the <see cref="T:Godot.Theme"/> on a <c>Control</c> node, it affects all of its children. To override some of the theme's parameters, call one of the <c>add_*_override</c> methods, like <see cref="M:Godot.Control.AddFontOverride(System.String,Godot.Font)"/>. You can override the theme with the inspector.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationResized">
            <summary>
            <para>Sent when the node changes size. Use <see cref="P:Godot.Control.RectSize"/> to get the new size.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationMouseEnter">
            <summary>
            <para>Sent when the mouse pointer enters the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationMouseExit">
            <summary>
            <para>Sent when the mouse pointer exits the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationFocusEnter">
            <summary>
            <para>Sent when the node grabs focus.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationFocusExit">
            <summary>
            <para>Sent when the node loses focus.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationThemeChanged">
            <summary>
            <para>Sent when the node's <see cref="P:Godot.Control.Theme"/> changes, right before Godot redraws the control. Happens when you call one of the <c>add_*_override</c> methods.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationModalClose">
            <summary>
            <para>Sent when an open modal dialog closes. See <see cref="M:Godot.Control.ShowModal(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationScrollBegin">
            <summary>
            <para>Sent when this node is inside a <see cref="T:Godot.ScrollContainer"/> which has begun being scrolled.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationScrollEnd">
            <summary>
            <para>Sent when this node is inside a <see cref="T:Godot.ScrollContainer"/> which has stopped being scrolled.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.Anchor.Begin">
            <summary>
            <para>Snaps one of the 4 anchor's sides to the origin of the node's <c>Rect</c>, in the top left. Use it with one of the <c>anchor_*</c> member variables, like <see cref="P:Godot.Control.AnchorLeft"/>. To change all 4 anchors at once, use <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.Anchor.End">
            <summary>
            <para>Snaps one of the 4 anchor's sides to the end of the node's <c>Rect</c>, in the bottom right. Use it with one of the <c>anchor_*</c> member variables, like <see cref="P:Godot.Control.AnchorLeft"/>. To change all 4 anchors at once, use <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.None">
            <summary>
            <para>The node cannot grab focus. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.Click">
            <summary>
            <para>The node can only grab focus on mouse clicks. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.All">
            <summary>
            <para>The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.Minsize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Stop">
            <summary>
            <para>The control will receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> if clicked on. And the control will receive the <c>mouse_entered</c> and <c>mouse_exited</c> signals. These events are automatically marked as handled and they will not propagate further to other controls. This also results in blocking signals in other controls.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Pass">
            <summary>
            <para>The control will receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> if clicked on. And the control will receive the <c>mouse_entered</c> and <c>mouse_exited</c> signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. Even if no control handled it at all, the event will still be handled automatically, so unhandled input will not be fired.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Ignore">
            <summary>
            <para>The control will not receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>. Also the control will not receive the <c>mouse_entered</c> nor <c>mouse_exited</c> signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Arrow">
            <summary>
            <para>Show the system's arrow mouse cursor when the user hovers the node. Use with <see cref="P:Godot.Control.MouseDefaultCursorShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Ibeam">
            <summary>
            <para>Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.PointingHand">
            <summary>
            <para>Show the system's pointing hand mouse cursor when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Cross">
            <summary>
            <para>Show the system's cross mouse cursor when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Wait">
            <summary>
            <para>Show the system's wait mouse cursor, often an hourglass, when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Busy">
            <summary>
            <para>Show the system's busy mouse cursor when the user hovers the node. Often an hourglass.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Drag">
            <summary>
            <para>Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.CanDrop">
            <summary>
            <para>Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Forbidden">
            <summary>
            <para>Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Vsize">
            <summary>
            <para>Show the system's vertical resize mouse cursor when the user hovers the node. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Hsize">
            <summary>
            <para>Show the system's horizontal resize mouse cursor when the user hovers the node. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Bdiagsize">
            <summary>
            <para>Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Fdiagsize">
            <summary>
            <para>Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of <c>CURSOR_BDIAGSIZE</c>. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Move">
            <summary>
            <para>Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Vsplit">
            <summary>
            <para>Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as <c>CURSOR_VSIZE</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Hsplit">
            <summary>
            <para>Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as <c>CURSOR_HSIZE</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Help">
            <summary>
            <para>Show the system's help mouse cursor when the user hovers the node, a question mark.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.Begin">
            <summary>
            <para>The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.End">
            <summary>
            <para>The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.Both">
            <summary>
            <para>The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.Fill">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to expand the bounds of this node to fill all the available space without pushing any other node. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.Expand">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See <see cref="P:Godot.Control.SizeFlagsStretchRatio"/>. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ExpandFill">
            <summary>
            <para>Sets the node's size flags to both fill and expand. See the 2 constants above for more information.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ShrinkCenter">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ShrinkEnd">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopLeft">
            <summary>
            <para>Snap all 4 anchors to the top-left of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopRight">
            <summary>
            <para>Snap all 4 anchors to the top-right of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomLeft">
            <summary>
            <para>Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomRight">
            <summary>
            <para>Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterLeft">
            <summary>
            <para>Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterTop">
            <summary>
            <para>Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterRight">
            <summary>
            <para>Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterBottom">
            <summary>
            <para>Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.Center">
            <summary>
            <para>Snap all 4 anchors to the center of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.LeftWide">
            <summary>
            <para>Snap all 4 anchors to the left edge of the parent control. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopWide">
            <summary>
            <para>Snap all 4 anchors to the top edge of the parent control. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.RightWide">
            <summary>
            <para>Snap all 4 anchors to the right edge of the parent control. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomWide">
            <summary>
            <para>Snap all 4 anchors to the bottom edge of the parent control. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.VcenterWide">
            <summary>
            <para>Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.HcenterWide">
            <summary>
            <para>Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.Wide">
            <summary>
            <para>Snap all 4 anchors to the respective corners of the parent control. Set all 4 margins to 0 after you applied this preset and the <c>Control</c> will fit its parent control. This is equivalent to to the "Full Rect" layout option in the editor. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorLeft">
            <summary>
            <para>Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left margin updates when the node moves or changes size. You can use one of the <c>ANCHOR_*</c> constants for convenience.Default value: <c>ANCHOR_BEGIN</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorTop">
            <summary>
            <para>Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top margin updates when the node moves or changes size. You can use  one of the <c>ANCHOR_*</c> constants for convenience. Default value: <c>ANCHOR_BEGIN</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorRight">
            <summary>
            <para>Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right margin updates when the node moves or changes size. You can use one of the <c>ANCHOR_*</c> constants for convenience. Default value: <c>ANCHOR_BEGIN</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorBottom">
            <summary>
            <para>Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom margin updates when the node moves or changes size. You can use one of the <c>ANCHOR_*</c> constants for convenience. Default value: <c>ANCHOR_BEGIN</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MarginLeft">
            <summary>
            <para>Distance between the node's left edge and its parent control, based on <see cref="P:Godot.Control.AnchorLeft"/>.</para>
            <para>Margins are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Margins update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MarginTop">
            <summary>
            <para>Distance between the node's top edge and its parent control, based on <see cref="P:Godot.Control.AnchorTop"/>.</para>
            <para>Margins are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Margins update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MarginRight">
            <summary>
            <para>Distance between the node's right edge and its parent control, based on <see cref="P:Godot.Control.AnchorRight"/>.</para>
            <para>Margins are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Margins update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MarginBottom">
            <summary>
            <para>Distance between the node's bottom edge and its parent control, based on <see cref="P:Godot.Control.AnchorBottom"/>.</para>
            <para>Margins are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Margins update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.GrowHorizontal">
            <summary>
            <para>Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.GrowVertical">
            <summary>
            <para>Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectPosition">
            <summary>
            <para>The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by <see cref="P:Godot.Control.RectPivotOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectGlobalPosition">
            <summary>
            <para>The node's global position, relative to the world (usually to the top-left corner of the window).</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectSize">
            <summary>
            <para>The size of the node's bounding rectangle, in pixels. <see cref="T:Godot.Container"/> nodes update this property automatically.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectMinSize">
            <summary>
            <para>The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectRotation">
            <summary>
            <para>The node's rotation around its pivot, in degrees. See <see cref="P:Godot.Control.RectPivotOffset"/> to change the pivot's position.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectScale">
            <summary>
            <para>The node's scale, relative to its <see cref="P:Godot.Control.RectSize"/>. Change this property to scale the node around its <see cref="P:Godot.Control.RectPivotOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectPivotOffset">
            <summary>
            <para>By default, the node's pivot is its top-left corner. When you change its <see cref="P:Godot.Control.RectScale"/>, it will scale around this pivot. Set this property to <see cref="P:Godot.Control.RectSize"/> / 2 to center the pivot in the node's rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectClipContent">
            <summary>
            <para>Enables whether rendering of children should be clipped to this control's rectangle. If true, parts of a child which would be visibly outside of this control's rectangle will not be rendered.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.HintTooltip">
            <summary>
            <para>Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the <see cref="P:Godot.Control.MouseFilter"/> property is not [constant MOUSE_FILTER_IGNORE].</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourLeft">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the <c>ui_left</c> input action. The node must be a <c>Control</c>. If this property is not set, Godot will give focus to the closest <c>Control</c> to the left of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourTop">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the <c>ui_top</c> input action. The node must be a <c>Control</c>. If this property is not set, Godot will give focus to the closest <c>Control</c> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourRight">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad  by default. You can change the key by editing the <c>ui_right</c> input action. The node must be a <c>Control</c>. If this property is not set, Godot will give focus to the closest <c>Control</c> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourBottom">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the <c>ui_down</c> input action. The node must be a <c>Control</c>. If this property is not set, Godot will give focus to the closest <c>Control</c> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNext">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the <c>ui_focus_next</c> input action.</para>
            <para>If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusPrevious">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab on a keyboard by default. You can change the key by editing the <c>ui_focus_prev</c> input action.</para>
            <para>If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusMode">
            <summary>
            <para>The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MouseFilter">
            <summary>
            <para>Controls whether the control will be able to receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> and how these events should be handled. Also controls whether the control can receive the <c>mouse_entered</c>, and <c>mouse_exited</c> signals. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MouseDefaultCursorShape">
            <summary>
            <para>The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.</para>
            <para>Note: On Linux, shapes may vary depending on the cursor theme of the system.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsHorizontal">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> nodes how they should resize and place the node on the X axis. Use one of the <c>SIZE_*</c> constants to change the flags. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsVertical">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> nodes how they should resize and place the node on the Y axis. Use one of the <c>SIZE_*</c> constants to change the flags. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsStretchRatio">
            <summary>
            <para>If the node and at least one of its neighbours uses the <c>SIZE_EXPAND</c> size flag, the parent <see cref="T:Godot.Container"/> will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.Theme">
            <summary>
            <para>Changing this property replaces the current <see cref="T:Godot.Theme"/> resource this node and all its <c>Control</c> children use.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._ClipsInput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control._GetMinimumSize">
            <summary>
            <para>Returns the minimum size for this control. See <see cref="P:Godot.Control.RectMinSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._GuiInput(Godot.InputEvent)">
            <summary>
            <para>Use this method to process and accept inputs on UI elements. See <see cref="M:Godot.Control.AcceptEvent"/>.</para>
            <para>Replaces Godot 2's <c>_input_event</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._MakeCustomTooltip(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)">
            <summary>
            <para>Godot calls this method to test if <c>data</c> from a control's <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> can be dropped at <c>position</c>. <c>position</c> is local to this control.</para>
            <para>This method should only be used to test the data. Process the data in <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/>.</para>
            <para><code>
            extends Control
            
            func can_drop_data(position, data):
                # check position if it is relevant to you
                # otherwise just check data
                return typeof(data) == TYPE_DICTIONARY and data.has('expected')
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Control.DropData(Godot.Vector2,System.Object)">
            <summary>
            <para>Godot calls this method to pass you the <c>data</c> from a control's <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> result. Godot first calls <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> to test if <c>data</c> is allowed to drop at <c>position</c> where <c>position</c> is local to this control.</para>
            <para><code>
            extends ColorRect
            
            func can_drop_data(position, data):
                return typeof(data) == TYPE_DICTIONARY and data.has('color')
            
            func drop_data(position, data):
                color = data['color']
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetDragData(Godot.Vector2)">
            <summary>
            <para>Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Return null if there is no data to drag. Controls that want to receive drop data should implement <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/>. <c>position</c> is local to this control. Drag may be forced with <see cref="M:Godot.Control.ForceDrag(System.Object,Godot.Control)"/>.</para>
            <para>A preview that will follow the mouse that should represent the data can be set with <see cref="M:Godot.Control.SetDragPreview(Godot.Control)"/>. A good time to set the preview is in this method.</para>
            <para><code>
            extends Control
            
            func get_drag_data(position):
                var mydata = make_data()
                set_drag_preview(make_preview(mydata))
                return mydata
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasPoint(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.AcceptEvent">
            <summary>
            <para>Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> or <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetMinimumSize">
            <summary>
            <para>Returns the minimum size for this control. See <see cref="P:Godot.Control.RectMinSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetCombinedMinimumSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetMarginsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsAndMarginsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchor(Godot.Margin,System.Single,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorAndMargin(Godot.Margin,System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetBegin(Godot.Vector2)">
            <summary>
            <para>Sets <see cref="P:Godot.Control.MarginLeft"/> and <see cref="P:Godot.Control.MarginTop"/> at the same time.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetEnd(Godot.Vector2)">
            <summary>
            <para>Sets <see cref="P:Godot.Control.MarginRight"/> and <see cref="P:Godot.Control.MarginBottom"/> at the same time.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetRotation(System.Single)">
            <summary>
            <para>Sets the rotation (in radians).</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetBegin">
            <summary>
            <para>Returns <see cref="P:Godot.Control.MarginLeft"/> and <see cref="P:Godot.Control.MarginTop"/>. See also <see cref="P:Godot.Control.RectPosition"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetEnd">
            <summary>
            <para>Returns <see cref="P:Godot.Control.MarginRight"/> and <see cref="P:Godot.Control.MarginBottom"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetRotation">
            <summary>
            <para>Returns the rotation (in radians).</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetParentAreaSize">
            <summary>
            <para>Returns the width/height occupied in the parent control.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetRect">
            <summary>
            <para>Returns the position and size of the control relative to the top-left corner of the parent Control. See <see cref="P:Godot.Control.RectPosition"/> and <see cref="P:Godot.Control.RectSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetGlobalRect">
            <summary>
            <para>Returns the position and size of the control relative to the top-left corner of the screen. See <see cref="P:Godot.Control.RectPosition"/> and <see cref="P:Godot.Control.RectSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.ShowModal(System.Boolean)">
            <summary>
            <para>Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasFocus">
            <summary>
            <para>Returns <c>true</c> if this is the current focused control. See <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GrabFocus">
            <summary>
            <para>Steal the focus from another control and become the focused control (see <see cref="P:Godot.Control.FocusMode"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Control.ReleaseFocus">
            <summary>
            <para>Give up the focus. No other control will be able to receive keyboard input.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetFocusOwner">
            <summary>
            <para>Returns the control that has the keyboard focus or <c>null</c> if none.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddIconOverride(System.String,Godot.Texture)">
            <summary>
            <para>Overrides the <c>name</c> icon in the <see cref="P:Godot.Control.Theme"/> resource the node uses. If <c>icon</c> is empty, Godot clears the override.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddShaderOverride(System.String,Godot.Shader)">
            <summary>
            <para>Overrides the <c>name</c> shader in the <see cref="P:Godot.Control.Theme"/> resource the node uses. If <c>shader</c> is empty, Godot clears the override.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddStyleboxOverride(System.String,Godot.StyleBox)">
            <summary>
            <para>Overrides the <c>name</c> <see cref="T:Godot.StyleBox"/> in the <see cref="P:Godot.Control.Theme"/> resource the node uses. If <c>stylebox</c> is empty, Godot clears the override.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddFontOverride(System.String,Godot.Font)">
            <summary>
            <para>Overrides the <c>name</c> font in the <see cref="P:Godot.Control.Theme"/> resource the node uses. If <c>font</c> is empty, Godot clears the override.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddColorOverride(System.String,Godot.Color)">
            <summary>
            <para>Overrides the color in the <see cref="P:Godot.Control.Theme"/> resource the node uses.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddConstantOverride(System.String,System.Int32)">
            <summary>
            <para>Overrides an integer constant in the <see cref="P:Godot.Control.Theme"/> resource the node uses. If the <c>constant</c> is invalid, Godot clears the override.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetIcon(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.GetStylebox(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.GetFont(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.GetColor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.GetConstant(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasIconOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasShaderOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasStyleboxOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasFontOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasColorOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasConstantOverride(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasIcon(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasStylebox(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasFont(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasColor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.HasConstant(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.GetParentControl">
            <summary>
            <para>Returns the parent control node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetTooltip(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Returns the tooltip, which will appear when the cursor is resting over this control.</para>
            <param name="atPosition">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Control.GetCursorShape(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Returns the mouse cursor shape the control displays on mouse hover. See <see cref="T:Godot.Control.CursorShape"/>.</para>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Control.ForceDrag(System.Object,Godot.Control)">
            <summary>
            <para>Forces drag and bypasses <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> and <see cref="M:Godot.Control.SetDragPreview(Godot.Control)"/> by passing <c>data</c> and <c>preview</c>. Drag will start even if the mouse is neither over nor pressed on this control.</para>
            <para>The methods <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/> must be implemented on controls that want to receive drop data.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GrabClickFocus">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragForwarding(Godot.Control)">
            <summary>
            <para>Forwards the handling of this control's drag and drop to <c>target</c> control.</para>
            <para>Forwarding can be implemented in the target control similar to the methods <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>, <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/>, and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/> but with two differences:</para>
            <para>1. The function name must be suffixed with _fw</para>
            <para>2. The function must take an extra argument that is the control doing the forwarding</para>
            <para><code>
            # ThisControl.gd
            extends Control
            func _ready():
                set_drag_forwarding(target_control)
            
            # TargetControl.gd
            extends Control
            func can_drop_data_fw(position, data, from_control):
                return true
            
            func drop_data_fw(position, data, from_control):
                my_handle_data(data)
            
            func get_drag_data_fw(position, from_control):
                set_drag_preview(my_preview)
                return my_data()
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragPreview(Godot.Control)">
            <summary>
            <para>Shows the given control at the mouse pointer. A good time to call this method is in <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.WarpMouse(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Control.MinimumSizeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape">
            <summary>
            <para>Convex polygon shape resource, which can be added to a <see cref="T:Godot.PhysicsBody"/> or area.</para>
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape.Points">
            <summary>
            <para>The list of 3D points forming the convex polygon shape.</para>
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape2D">
            <summary>
            <para>Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).</para>
            <para>The main difference between a <c>ConvexPolygonShape2D</c> and a <see cref="T:Godot.ConcavePolygonShape2D"/> is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape2D.Points">
            <summary>
            <para>The polygon's list of vertices. Can be in either clockwise or counterclockwise order.</para>
            </summary>
        </member>
        <member name="M:Godot.ConvexPolygonShape2D.SetPointCloud(Godot.Vector2[])">
            <summary>
            <para>Based on the set of points provided, this creates and assigns the <see cref="P:Godot.ConvexPolygonShape2D.Points"/> property using the convex hull algorithm. Removing all unneeded points. See <see cref="M:Godot.Geometry.ConvexHull2d(Godot.Vector2[])"/> for details.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Flags.AlignYToVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Flags.RotateY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Flags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.EmissionShapeEnum.Point">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.EmissionShapeEnum.Sphere">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.EmissionShapeEnum.Box">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.EmissionShapeEnum.Points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.EmissionShapeEnum.DirectedPoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.InitialLinearVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.AngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.LinearAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.RadialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.TangentialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.HueVariation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.AnimSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.AnimOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.Parameter.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.DrawOrderEnum.Index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.DrawOrderEnum.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles.DrawOrderEnum.ViewDepth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Emitting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Amount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.OneShot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Preprocess">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.SpeedScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Explosiveness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Randomness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.FixedFps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.FractDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.LocalCoords">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.DrawOrder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionSphereRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionBoxExtents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionNormals">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.EmissionColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.FlagAlignY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.FlagRotateY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.FlagDisableZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Spread">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Flatness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Gravity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.InitialVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.InitialVelocityRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AngularVelocityRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AngularVelocityCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.LinearAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.LinearAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.LinearAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.RadialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.RadialAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.RadialAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.TangentialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.TangentialAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.TangentialAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.DampingRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.DampingCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AngleRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AngleCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.ScaleAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.ScaleAmountRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.ScaleAmountCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.ColorRamp">
            <summary>
            <para>Each particle's vertex color will vary along this <see cref="T:Godot.GradientTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.HueVariation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.HueVariationRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.HueVariationCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimSpeedRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimSpeedCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimOffsetRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles.AnimOffsetCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CPUParticles.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CPUParticles.ConvertFromParticles(Godot.Node)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Flags.AlignYToVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Flags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Point">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.DirectedPoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.InitialLinearVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.OrbitVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.LinearAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.RadialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.TangentialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.HueVariation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AnimSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AnimOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.DrawOrderEnum.Index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.DrawOrderEnum.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Emitting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Amount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.OneShot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Preprocess">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.SpeedScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Explosiveness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Randomness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.FixedFps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.FractDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LocalCoords">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DrawOrder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Normalmap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionSphereRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionRectExtents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionNormals">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.FlagAlignY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Spread">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Flatness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Gravity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.InitialVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.InitialVelocityRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocityRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocityCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccelRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccelCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DampingRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DampingCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngleRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngleCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmountRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmountCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ColorRamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariationRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariationCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeedRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeedCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffsetRandom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffsetCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.ConvertFromParticles(Godot.Node)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CSGBox">
            <summary>
            <para>This node allows you to create a box for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox.Width">
            <summary>
            <para>Width of the box measured from the center of the box.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox.Height">
            <summary>
            <para>Height of the box measured from the center of the box.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox.Depth">
            <summary>
            <para>Depth of the box measured from the center of the box.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox.Material">
            <summary>
            <para>The material used to render the box.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGCombiner">
            <summary>
            <para>For complex arrangements of shapes, it is sometimes needed to add structure to your CSG nodes. The CSGCombiner node allows you to create this structure. The node encapsulates the result of the CSG operations of its children. In this way, it is possible to do operations on one set of shapes that are children of one CSGCombiner node, and a set of separate operations on a second set of shapes that are children of a second CSGCombiner node, and then do an operation that takes the two end results as its input to create the final shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGCylinder">
            <summary>
            <para>This node allows you to create a cylinder (or cone) for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.Radius">
            <summary>
            <para>The radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.Height">
            <summary>
            <para>The height of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.Sides">
            <summary>
            <para>The number of sides of the cylinder, the higher this number the more detail there will be in the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.Cone">
            <summary>
            <para>If true a cone is created, the <see cref="P:Godot.CSGCylinder.Radius"/> will only apply to one side.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.SmoothFaces">
            <summary>
            <para>If true the normals of the cylinder are set to give a smooth effect making the cylinder seem rounded. When false the cylinder will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder.Material">
            <summary>
            <para>The material used to render the cylinder.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGMesh">
            <summary>
            <para>This CSG node allows you to use any mesh resource as a CSG shape, provided it is closed, does not self-intersect, does not contain internal faces and has no edges that connect to more then two faces.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGMesh.Mesh">
            <summary>
            <para>The mesh resource to use as a CSG shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGPolygon">
            <summary>
            <para>This node takes a 2D polygon shape and extrudes it to create a 3D mesh.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.PathRotationEnum.Polygon">
            <summary>
            <para>Slice is not rotated.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.PathRotationEnum.Path">
            <summary>
            <para>Slice is rotated around the up vector of the path.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.PathRotationEnum.PathFollow">
            <summary>
            <para>Slice is rotate to match the path exactly.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.ModeEnum.Depth">
            <summary>
            <para>Shape is extruded to <see cref="P:Godot.CSGPolygon.Depth"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.ModeEnum.Spin">
            <summary>
            <para>Shape is extruded by rotating it around an axis.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon.ModeEnum.Path">
            <summary>
            <para>Shape is extruded along a path set by a <see cref="T:Godot.Shape"/> set in <see cref="P:Godot.CSGPolygon.PathNode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.Polygon">
            <summary>
            <para>Point array that defines the shape that we'll extrude.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.Mode">
            <summary>
            <para>Extrusion mode.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.Depth">
            <summary>
            <para>Extrusion depth when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_DEPTH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.SpinDegrees">
            <summary>
            <para>Degrees to rotate our extrusion for each slice when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_SPIN].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.SpinSides">
            <summary>
            <para>Number of extrusion when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_SPIN].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathNode">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> object containing the path along which we extrude when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathInterval">
            <summary>
            <para>Interval at which a new extrusion slice is added along the path when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathRotation">
            <summary>
            <para>The method by which each slice is rotated along the path when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathLocal">
            <summary>
            <para>If false we extrude centered on our path, if true we extrude in relation to the position of our CSGPolygon when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathContinuousU">
            <summary>
            <para>If true the u component of our uv will continuously increase in unison with the distance traveled along our path when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.PathJoined">
            <summary>
            <para>If true the start and end of our path are joined together ensuring there is no seam when <see cref="P:Godot.CSGPolygon.Mode"/> is [constant MODE_PATH].</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.SmoothFaces">
            <summary>
            <para>Generates smooth normals so smooth shading is applied to our mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon.Material">
            <summary>
            <para>Material to use for the resulting mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPrimitive.InvertFaces">
            <summary>
            <para>Invert the faces of the mesh.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGShape">
            <summary>
            <para>This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape.OperationEnum.Union">
            <summary>
            <para>Geometry of both primitives is merged, intersecting geometry is removed.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape.OperationEnum.Intersection">
            <summary>
            <para>Only intersecting geometry remains, the rest is removed.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape.OperationEnum.Subtraction">
            <summary>
            <para>The second shape is susbtracted from the first, leaving a dent with it's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape.Operation">
            <summary>
            <para>The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape.Snap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.CSGShape.CalculateTangents">
            <summary>
            <para>Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape.UseCollision">
            <summary>
            <para>Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape.CollisionMask">
            <summary>
            <para>The physics layers this CSG shape scans for collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.IsRootShape">
            <summary>
            <para>Returns true if this is a root shape and is thus the object that is rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape.GetMeshes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CSGSphere">
            <summary>
            <para>This node allows you to create a sphere for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere.Radius">
            <summary>
            <para>Radius of the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere.RadialSegments">
            <summary>
            <para>Number of vertical slices for the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere.Rings">
            <summary>
            <para>Number of horizontal slices for the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere.SmoothFaces">
            <summary>
            <para>If true the normals of the sphere are set to give a smooth effect making the sphere seem rounded. When false the sphere will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere.Material">
            <summary>
            <para>The material used to render the sphere.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGTorus">
            <summary>
            <para>This node allows you to create a torus for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.InnerRadius">
            <summary>
            <para>The inner radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.OuterRadius">
            <summary>
            <para>The outer radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.Sides">
            <summary>
            <para>The number of slices the torus is constructed of.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.RingSides">
            <summary>
            <para>The number of edges each ring of the torus is constructed of.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.SmoothFaces">
            <summary>
            <para>If true the normals of the torus are set to give a smooth effect making the torus seem rounded. When false the torus will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus.Material">
            <summary>
            <para>The material used to render the torus.</para>
            </summary>
        </member>
        <member name="M:Godot.CSharpScript.New(System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.CubeMap">
            <summary>
            <para>A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.FlagsEnum.Mipmaps">
            <summary>
            <para>Generate mipmaps, to enable smooth zooming out of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.FlagsEnum.Repeat">
            <summary>
            <para>Repeat (instead of clamp to edge).</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.FlagsEnum.Filter">
            <summary>
            <para>Turn on magnifying filter, to enable smooth zooming in of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.FlagsEnum.Default">
            <summary>
            <para>Default flags. Generate mipmaps, repeat, and filter are enabled.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Left">
            <summary>
            <para>Identifier for the left face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Right">
            <summary>
            <para>Identifier for the right face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Bottom">
            <summary>
            <para>Identifier for the bottom face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Top">
            <summary>
            <para>Identifier for the top face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Front">
            <summary>
            <para>Identifier for the front face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Side.Back">
            <summary>
            <para>Identifier for the back face of the <c>CubeMap</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Storage.Raw">
            <summary>
            <para>Store the <c>CubeMap</c> without any compression.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Storage.CompressLossy">
            <summary>
            <para>Store the <c>CubeMap</c> with strong compression that reduces image quality.</para>
            </summary>
        </member>
        <member name="F:Godot.CubeMap.Storage.CompressLossless">
            <summary>
            <para>Store the <c>CubeMap</c> with moderate compression that doesn't reduce image quality.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMap.Flags">
            <summary>
            <para>The render flags for the <c>CubeMap</c>. See the <c>FLAG_*</c> constants for details.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMap.StorageMode">
            <summary>
            <para>The <c>CubeMap</c>'s storage mode. See <c>STORAGE_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMap.LossyStorageQuality">
            <summary>
            <para>The lossy storage quality of the <c>CubeMap</c> if the storage mode is set to STORAGE_COMPRESS_LOSSY.</para>
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetWidth">
            <summary>
            <para>Returns the <c>CubeMap</c>'s width.</para>
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetHeight">
            <summary>
            <para>Returns the <c>CubeMap</c>'s height.</para>
            </summary>
        </member>
        <member name="M:Godot.CubeMap.SetSide(Godot.CubeMap.Side,Godot.Image)">
            <summary>
            <para>Sets an <see cref="T:Godot.Image"/> for a side of the <c>CubeMap</c> using one of the <c>SIDE_*</c> constants or an integer 0-5.</para>
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetSide(Godot.CubeMap.Side)">
            <summary>
            <para>Returns an <see cref="T:Godot.Image"/> for a side of the <c>CubeMap</c> using one of the <c>SIDE_*</c> constants or an integer 0-5.</para>
            </summary>
        </member>
        <member name="T:Godot.CubeMesh">
            <summary>
            <para>Generate an axis-aligned cuboid <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.Size">
            <summary>
            <para>Size of the cuboid mesh. Defaults to (2, 2, 2).</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideWidth">
            <summary>
            <para>Number of extra edge loops inserted along the x-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideHeight">
            <summary>
            <para>Number of extra edge loops inserted along the y-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideDepth">
            <summary>
            <para>Number of extra edge loops inserted along the z-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve">
            <summary>
            <para>A curve that can be saved and re-used for other objects. By default it ranges between <c>0</c> and <c>1</c> on the y-axis and positions points relative to the <c>0.5</c> y-position.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.Free">
            <summary>
            <para>The tangent on this side of the point is user-defined.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.Linear">
            <summary>
            <para>The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.ModeCount">
            <summary>
            <para>The total number of available tangent modes.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.MinValue">
            <summary>
            <para>The minimum value the curve can reach. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.MaxValue">
            <summary>
            <para>The maximum value the curve can reach. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.BakeResolution">
            <summary>
            <para>The number of points to include in the baked (i.e. cached) curve data.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.AddPoint(Godot.Vector2,System.Single,System.Single,Godot.Curve.TangentMode,Godot.Curve.TangentMode)">
            <summary>
            <para>Adds a point to the curve. For each side, if the <c>*_mode</c> is <c>TANGENT_LINEAR</c>, the <c>*_tangent</c> angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the <c>*_tangent</c> angle if <c>*_mode</c> is set to <c>TANGENT_FREE</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point at <c>index</c> from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the curve coordinates for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointValue(System.Int32,System.Single)">
            <summary>
            <para>Assigns the vertical position <c>y</c> to the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointOffset(System.Int32,System.Single)">
            <summary>
            <para>Sets the offset from <c>0.5</c></para>
            </summary>
        </member>
        <member name="M:Godot.Curve.Interpolate(System.Single)">
            <summary>
            <para>Returns the y value for the point that would exist at x-position <c>offset</c> along the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.InterpolateBaked(System.Single)">
            <summary>
            <para>Returns the y value for the point that would exist at x-position <c>offset</c> along the curve using the baked cache. Bakes the curve's points if not already baked.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftTangent(System.Int32)">
            <summary>
            <para>Returns the left tangent angle (in degrees) for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightTangent(System.Int32)">
            <summary>
            <para>Returns the right tangent angle (in degrees) for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftMode(System.Int32)">
            <summary>
            <para>Returns the left <c>TangentMode</c> for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightMode(System.Int32)">
            <summary>
            <para>Returns the right <c>TangentMode</c> for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftTangent(System.Int32,System.Single)">
            <summary>
            <para>Sets the left tangent angle for the point at <c>index</c> to <c>tangent</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightTangent(System.Int32,System.Single)">
            <summary>
            <para>Sets the right tangent angle for the point at <c>index</c> to <c>tangent</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            <para>Sets the left <c>TangentMode</c> for the point at <c>index</c> to <c>mode</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            <para>Sets the right <c>TangentMode</c> for the point at <c>index</c> to <c>mode</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.CleanDupes">
            <summary>
            <para>Removes points that are closer than <c>CMP_EPSILON</c> (0.00001) units to their neighbor on the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.Bake">
            <summary>
            <para>Recomputes the baked cache of points for the curve.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve2D">
            <summary>
            <para>This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a <see cref="T:Godot.Path2D"/>, but can be manually sampled for other purposes.</para>
            <para>It keeps a cache of precalculated points along the curve, to speed further calculations up.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve2D.BakeInterval">
            <summary>
            <para>The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the <see cref="M:Godot.Curve2D.GetBakedPoints"/> or <see cref="M:Godot.Curve2D.GetBakedLength"/> function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.AddPoint(Godot.Vector2,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2},System.Int32)">
            <summary>
            <para>Adds a point to a curve, at <c>position</c>, with control points <c>in</c> and <c>out</c>.</para>
            <para>If <c>at_position</c> is given, the point is inserted before the point number <c>at_position</c>, moving that point (and every point after) after the inserted point. If <c>at_position</c> is not given, or is an illegal value (<c>at_position &lt;0</c> or <c>at_position &gt;= [method get_point_count]</c>), the point will be appended at the end of the point list.</para>
            <param name="in">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="out">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position for the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointIn(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointIn(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointOut(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointOut(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.RemovePoint(System.Int32)">
            <summary>
            <para>Deletes the point <c>idx</c> from the curve. Sends an error to the console if <c>idx</c> is out of bounds.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the position between the vertex <c>idx</c> and the vertex <c>idx + 1</c>, where <c>t</c> controls if the point is the first vertex (<c>t = 0.0</c>), the last vertex (<c>t = 1.0</c>), or in between. Values of <c>t</c> outside the range (<c>0.0 &gt;= t &lt;=1</c>) give strange, but predictable results.</para>
            <para>If <c>idx</c> is out of bounds it is truncated to the first or last vertex, and <c>t</c> is ignored. If the curve has no points, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolatef(System.Single)">
            <summary>
            <para>Returns the position at the vertex <c>fofs</c>. It calls <see cref="M:Godot.Curve2D.Interpolate(System.Int32,System.Single)"/> using the integer part of <c>fofs</c> as <c>idx</c>, and its fractional part as <c>t</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedLength">
            <summary>
            <para>Returns the total length of the curve, based on the cached points. Given enough density (see <see cref="P:Godot.Curve2D.BakeInterval"/>), it should be approximate enough.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            <para>Returns a point within the curve at position <c>offset</c>, where <c>offset</c> is measured as a pixel distance along the curve.</para>
            <para>To do that, it finds the two cached points where the <c>offset</c> lies between, then interpolates the values. This interpolation is cubic if <c>cubic</c> is set to true, or linear if set to false.</para>
            <para>Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedPoints">
            <summary>
            <para>Returns the cache of points as a <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetClosestPoint(Godot.Vector2)">
            <summary>
            <para>Returns the closest point (in curve's local space) to <c>to_point</c>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetClosestOffset(Godot.Vector2)">
            <summary>
            <para>Returns the closest offset to <c>to_point</c>. This offset is meant to be used in <see cref="M:Godot.Curve2D.InterpolateBaked(System.Single,System.Boolean)"/>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Tessellate(System.Int32,System.Single)">
            <summary>
            <para>Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.</para>
            <para>This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.</para>
            <para><c>max_stages</c> controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!</para>
            <para><c>tolerance_degrees</c> controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve3D">
            <summary>
            <para>This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a <see cref="T:Godot.Path"/>, but can be manually sampled for other purposes.</para>
            <para>It keeps a cache of precalculated points along the curve, to speed further calculations up.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve3D.BakeInterval">
            <summary>
            <para>The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the <see cref="M:Godot.Curve3D.GetBakedPoints"/> or <see cref="M:Godot.Curve3D.GetBakedLength"/> function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve3D.UpVectorEnabled">
            <summary>
            <para>If <c>true</c>, the curve will bake up vectors used for orientation. This is used when a <see cref="P:Godot.PathFollow.RotationMode"/> is set to <c>ROTATION_ORIENTED</c>, see <see cref="T:Godot.PathFollow"/> for details. Changing it forces the cache to be recomputed.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.AddPoint(Godot.Vector3,System.Nullable{Godot.Vector3},System.Nullable{Godot.Vector3},System.Int32)">
            <summary>
            <para>Adds a point to a curve, at <c>position</c>, with control points <c>in</c> and <c>out</c>.</para>
            <para>If <c>at_position</c> is given, the point is inserted before the point number <c>at_position</c>, moving that point (and every point after) after the inserted point. If <c>at_position</c> is not given, or is an illegal value (<c>at_position &lt;0</c> or <c>at_position &gt;= [method get_point_count]</c>), the point will be appended at the end of the point list.</para>
            <param name="in">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
            <param name="out">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position for the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointTilt(System.Int32,System.Single)">
            <summary>
            <para>Sets the tilt angle in radians for the point <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            <para>The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a <see cref="T:Godot.PathFollow"/>, this tilt is an offset over the natural tilt the <see cref="T:Godot.PathFollow"/> calculates.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointTilt(System.Int32)">
            <summary>
            <para>Returns the tilt angle in radians for the point <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointIn(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointIn(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointOut(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointOut(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.RemovePoint(System.Int32)">
            <summary>
            <para>Deletes the point <c>idx</c> from the curve. Sends an error to the console if <c>idx</c> is out of bounds.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the position between the vertex <c>idx</c> and the vertex <c>idx + 1</c>, where <c>t</c> controls if the point is the first vertex (<c>t = 0.0</c>), the last vertex (<c>t = 1.0</c>), or in between. Values of <c>t</c> outside the range (<c>0.0 &gt;= t &lt;=1</c>) give strange, but predictable results.</para>
            <para>If <c>idx</c> is out of bounds it is truncated to the first or last vertex, and <c>t</c> is ignored. If the curve has no points, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolatef(System.Single)">
            <summary>
            <para>Returns the position at the vertex <c>fofs</c>. It calls <see cref="M:Godot.Curve3D.Interpolate(System.Int32,System.Single)"/> using the integer part of <c>fofs</c> as <c>idx</c>, and its fractional part as <c>t</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedLength">
            <summary>
            <para>Returns the total length of the curve, based on the cached points. Given enough density (see <see cref="P:Godot.Curve3D.BakeInterval"/>), it should be approximate enough.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            <para>Returns a point within the curve at position <c>offset</c>, where <c>offset</c> is measured as a pixel distance along the curve.</para>
            <para>To do that, it finds the two cached points where the <c>offset</c> lies between, then interpolates the values. This interpolation is cubic if <c>cubic</c> is set to true, or linear if set to false.</para>
            <para>Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.InterpolateBakedUpVector(System.Single,System.Boolean)">
            <summary>
            <para>Returns an up vector within the curve at position <c>offset</c>, where <c>offset</c> is measured as a distance in 3D units along the curve.</para>
            <para>To do that, it finds the two cached up vectors where the <c>offset</c> lies between, then interpolates the values. If <c>apply_tilt</c> is <c>true</c>, an interpolated tilt is applied to the interpolated up vector.</para>
            <para>If the curve has no up vectors, the function sends an error to the console, and returns <c>(0, 1, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedPoints">
            <summary>
            <para>Returns the cache of points as a <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedTilts">
            <summary>
            <para>Returns the cache of tilts as a <see cref="T:System.Single"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedUpVectors">
            <summary>
            <para>Returns the cache of up vectors as a <see cref="T:Godot.Vector3"/>.</para>
            <para>If <see cref="P:Godot.Curve3D.UpVectorEnabled"/> is <c>false</c>, the cache will be empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetClosestPoint(Godot.Vector3)">
            <summary>
            <para>Returns the closest point (in curve's local space) to <c>to_point</c>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetClosestOffset(Godot.Vector3)">
            <summary>
            <para>Returns the closest offset to <c>to_point</c>. This offset is meant to be used in <see cref="M:Godot.Curve3D.InterpolateBaked(System.Single,System.Boolean)"/> or <see cref="M:Godot.Curve3D.InterpolateBakedUpVector(System.Single,System.Boolean)"/>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Tessellate(System.Int32,System.Single)">
            <summary>
            <para>Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.</para>
            <para>This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.</para>
            <para><c>max_stages</c> controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!</para>
            <para><c>tolerance_degrees</c> controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.</para>
            </summary>
        </member>
        <member name="T:Godot.CurveTexture">
            <summary>
            <para>Renders a given <see cref="T:Godot.Curve"/> provided to it. Simplifies the task of drawing curves and/or saving them as image files.</para>
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Width">
            <summary>
            <para>The width of the texture.</para>
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Curve">
            <summary>
            <para>The <c>curve</c> rendered onto the texture.</para>
            </summary>
        </member>
        <member name="T:Godot.CylinderMesh">
            <summary>
            <para>Class representing a cylindrical <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.TopRadius">
            <summary>
            <para>Top radius of the cylinder. Defaults to 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.BottomRadius">
            <summary>
            <para>Bottom radius of the cylinder. Defaults to 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Height">
            <summary>
            <para>Full height of the cylinder. Defaults to 2.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the cylinder. Defaults to 64.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Rings">
            <summary>
            <para>Number of edge rings along the height of the cylinder. Defaults to 4.</para>
            </summary>
        </member>
        <member name="T:Godot.CylinderShape">
            <summary>
            <para>Cylinder shape for collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderShape.Radius">
            <summary>
            <para>The cylinder's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderShape.Height">
            <summary>
            <para>The cylinder's height.</para>
            </summary>
        </member>
        <member name="T:Godot.DampedSpringJoint2D">
            <summary>
            <para>Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.</para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Length">
            <summary>
            <para>The spring joint's maximum length. The two attached bodies cannot stretch it past this value. Default value: <c>50</c></para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.RestLength">
            <summary>
            <para>When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. Default value: <c>0</c></para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Stiffness">
            <summary>
            <para>The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length. Default value: <c>20</c></para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Damping">
            <summary>
            <para>The spring joint's damping ratio. A value between <c>0</c> and <c>1</c>. When the two bodies move into different directions the system tries to align them to the spring axis again. A high <c>damping</c> value forces the attached bodies to align faster. Default value: <c>1</c></para>
            </summary>
        </member>
        <member name="T:Godot.DirectionalLight">
            <summary>
            <para>A directional light is a type of <see cref="T:Godot.Light"/> node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored. Only the basis is used do determine light direction.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight.ShadowMode.Orthogonal">
            <summary>
            <para>Renders the entire scene's shadow map from an orthogonal point of view. May result in blockier shadows on close objects.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight.ShadowMode.Parallel2Splits">
            <summary>
            <para>Splits the view frustum in 2 areas, each with its own shadow map.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight.ShadowMode.Parallel4Splits">
            <summary>
            <para>Splits the view frustum in 4 areas, each with its own shadow map.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight.ShadowDepthRange.Stable">
            <summary>
            <para>Keeps the shadow stable when the camera moves, at the cost of lower effective shadow resolution. Default value.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight.ShadowDepthRange.Optimized">
            <summary>
            <para>Tries to achieve maximum shadow resolution. May result in saw effect on shadow edges.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowMode">
            <summary>
            <para>The light's shadow rendering algorithm. See <see cref="T:Godot.DirectionalLight.ShadowMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit1">
            <summary>
            <para>The distance from camera to shadow split 1. Relative to <see cref="P:Godot.DirectionalLight.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight.DirectionalShadowMode"/> is one of the <c>SHADOW_PARALLEL_*_SPLITS</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit2">
            <summary>
            <para>The distance from shadow split 1 to split 2. Relative to <see cref="P:Godot.DirectionalLight.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight.DirectionalShadowMode"/> is <c>SHADOW_PARALLEL_3_SPLITS</c> or <c>SHADOW_PARALLEL_4_SPLITS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit3">
            <summary>
            <para>The distance from shadow split 2 to split 3. Relative to <see cref="P:Godot.DirectionalLight.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight.DirectionalShadowMode"/> is <c>SHADOW_PARALLEL_4_SPLITS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowBlendSplits">
            <summary>
            <para>If <c>true</c>, shadow detail is sacrificed in exchange for smoother transitions between splits. Default value:<c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowNormalBias">
            <summary>
            <para>Can be used to fix special cases of self shadowing when objects are perpendicular to the light.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowBiasSplitScale">
            <summary>
            <para>Amount of extra bias for shadow splits that are far away. If self shadowing occurs only on the splits far away, this value can fix them.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowDepthRange">
            <summary>
            <para>Optimizes shadow rendering for detail versus movement. See <see cref="T:Godot.DirectionalLight.ShadowDepthRange"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowMaxDistance">
            <summary>
            <para>The maximum distance for shadow splits.</para>
            </summary>
        </member>
        <member name="T:Godot.Directory">
            <summary>
            <para>Directory type. It is used to manage directories and their content (not restricted to the project folder).</para>
            <para>Here is an example on how to iterate through the files of a directory:</para>
            <para><code>
            func dir_contents(path):
                var dir = Directory.new()
                if dir.open(path) == OK:
                    dir.list_dir_begin()
                    var file_name = dir.get_next()
                    while (file_name != ""):
                        if dir.current_is_dir():
                            print("Found directory: " + file_name)
                        else:
                            print("Found file: " + file_name)
                        file_name = dir.get_next()
                else:
                    print("An error occurred when trying to access the path.")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Open(System.String)">
            <summary>
            <para>Open an existing directory of the filesystem. The path argument can be within the project tree (<c>res://folder</c>), the user directory (<c>user://folder</c>) or an absolute path of the user filesystem (e.g. <c>/tmp/folder</c> or <c>C:\tmp\folder</c>).</para>
            <para>The method returns one of the error code constants defined in <c>@GlobalScope</c> (OK or ERR_*).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)">
            <summary>
            <para>Initialise the stream used to list all files and directories using the <see cref="M:Godot.Directory.GetNext"/> function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with <see cref="M:Godot.Directory.ListDirEnd"/>.</para>
            <para>If you pass <c>skip_navigational</c>, then <c>.</c> and <c>..</c> would be filtered out.</para>
            <para>If you pass <c>skip_hidden</c>, then hidden files would be filtered out.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetNext">
            <summary>
            <para>Return the next element (file or directory) in the current directory (including <c>.</c> and <c>..</c>, unless <c>skip_navigational</c> was given to <see cref="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)"/>).</para>
            <para>The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. <see cref="M:Godot.Directory.ListDirEnd"/> would not be mandatory in such a case).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.CurrentIsDir">
            <summary>
            <para>Return whether the current item processed with the last <see cref="M:Godot.Directory.GetNext"/> call is a directory (<c>.</c> and <c>..</c> are considered directories).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirEnd">
            <summary>
            <para>Close the current stream opened with <see cref="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)"/> (whether it has been fully processed with <see cref="M:Godot.Directory.GetNext"/> or not does not matter).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDriveCount">
            <summary>
            <para>On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDrive(System.Int32)">
            <summary>
            <para>On Windows, return the name of the drive (partition) passed as an argument (e.g. <c>C:</c>). On other platforms, or if the requested drive does not existed, the method returns an empty String.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDrive">
            <summary>
            <para>Returns the currently opened directory's drive index. See <see cref="M:Godot.Directory.GetDrive(System.Int32)"/> to convert returned index to the name of the drive.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ChangeDir(System.String)">
            <summary>
            <para>Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. <c>newdir</c> or <c>../newdir</c>), or an absolute path (e.g. <c>/tmp/newdir</c> or <c>res://somedir/newdir</c>).</para>
            <para>The method returns one of the error code constants defined in <c>@GlobalScope</c> (OK or ERR_*).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDir">
            <summary>
            <para>Return the absolute path to the currently opened directory (e.g. <c>res://folder</c> or <c>C:\tmp\folder</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDir(System.String)">
            <summary>
            <para>Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see <see cref="M:Godot.Directory.MakeDirRecursive(System.String)"/>).</para>
            <para>The method returns one of the error code constants defined in <c>@GlobalScope</c> (OK, FAILED or ERR_*).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDirRecursive(System.String)">
            <summary>
            <para>Create a target directory and all necessary intermediate directories in its path, by calling <see cref="M:Godot.Directory.MakeDir(System.String)"/> recursively. The argument can be relative to the current directory, or an absolute path.</para>
            <para>Return one of the error code constants defined in <c>@GlobalScope</c> (OK, FAILED or ERR_*).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.FileExists(System.String)">
            <summary>
            <para>Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.DirExists(System.String)">
            <summary>
            <para>Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetSpaceLeft">
            <summary>
            <para>On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Copy(System.String,System.String)">
            <summary>
            <para>Copy the from file to the to destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.</para>
            <para>Returns one of the error code constants defined in <c>@GlobalScope</c> (OK, FAILED or ERR_*).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Rename(System.String,System.String)">
            <summary>
            <para>Rename (move) the from file to the to destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.</para>
            <para>Return one of the error code constants defined in <c>@GlobalScope</c> (OK or FAILED).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Remove(System.String)">
            <summary>
            <para>Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.</para>
            <para>Return one of the error code constants defined in <c>@GlobalScope</c> (OK or FAILED).</para>
            </summary>
        </member>
        <member name="T:Godot.DynamicFont">
            <summary>
            <para>DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like <see cref="T:Godot.BitmapFont"/>. This trades the faster loading time of <see cref="T:Godot.BitmapFont"/>s for the ability to change font parameters like size and spacing during runtime. <see cref="T:Godot.DynamicFontData"/> is used for referencing the font file paths.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFont.SpacingType.Top">
            <summary>
            <para>Spacing at the top.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFont.SpacingType.Bottom">
            <summary>
            <para>Spacing at the bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFont.SpacingType.Char">
            <summary>
            <para>Character spacing.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFont.SpacingType.Space">
            <summary>
            <para>Space spacing.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.Size">
            <summary>
            <para>The font size.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.OutlineSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.OutlineColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.UseMipmaps">
            <summary>
            <para>If <c>true</c>, mipmapping is used.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.UseFilter">
            <summary>
            <para>If <c>true</c>, filtering is used.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingTop">
            <summary>
            <para>Extra spacing at the top in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingBottom">
            <summary>
            <para>Extra spacing at the bottom in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingChar">
            <summary>
            <para>Extra character spacing in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingSpace">
            <summary>
            <para>Extra space spacing in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.FontData">
            <summary>
            <para>The font data.</para>
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.AddFallback(Godot.DynamicFontData)">
            <summary>
            <para>Adds a fallback font.</para>
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.SetFallback(System.Int32,Godot.DynamicFontData)">
            <summary>
            <para>Sets the fallback font at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.GetFallback(System.Int32)">
            <summary>
            <para>Returns the fallback font at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.RemoveFallback(System.Int32)">
            <summary>
            <para>Removes the fallback font at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.GetFallbackCount">
            <summary>
            <para>Returns the number of fallback fonts.</para>
            </summary>
        </member>
        <member name="T:Godot.DynamicFontData">
            <summary>
            <para>Used with <see cref="T:Godot.DynamicFont"/> to describe the location of a vector font file for dynamic rendering at runtime.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFontData.HintingEnum.None">
            <summary>
            <para>Disable font hinting (smoother but less crisp).</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFontData.HintingEnum.Light">
            <summary>
            <para>Use the light font hinting mode.</para>
            </summary>
        </member>
        <member name="F:Godot.DynamicFontData.HintingEnum.Normal">
            <summary>
            <para>Use the default font hinting mode (crisper but less smooth).</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFontData.Antialiased">
            <summary>
            <para>Controls whether the font should be rendered with anti-aliasing.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFontData.Hinting">
            <summary>
            <para>The font hinting mode used by FreeType.</para>
            </summary>
        </member>
        <member name="P:Godot.DynamicFontData.FontPath">
            <summary>
            <para>The path to the vector font file.</para>
            </summary>
        </member>
        <member name="M:Godot.EncodedObjectAsID.SetObjectId(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.EncodedObjectAsID.GetObjectId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Engine">
            <summary>
            <para>The <c>Engine</c> class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.EditorHint">
            <summary>
            <para>If <c>true</c>, it is running inside the editor. Useful for tool scripts.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.IterationsPerSecond">
            <summary>
            <para>The number of fixed iterations per second (for fixed process and physics).</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.TargetFps">
            <summary>
            <para>The desired frames per second. If the hardware cannot keep up, this setting may not be respected. Defaults to 0, which indicates no limit.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.TimeScale">
            <summary>
            <para>Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.PhysicsJitterFix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesDrawn">
            <summary>
            <para>Returns the total number of frames drawn.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesPerSecond">
            <summary>
            <para>Returns the frames per second of the running game.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetMainLoop">
            <summary>
            <para>Returns the main loop object (see <see cref="T:Godot.MainLoop"/> and <see cref="T:Godot.SceneTree"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetVersionInfo">
            <summary>
            <para>Returns the current engine version information in a Dictionary.</para>
            <para>"major"    - Holds the major version number as an int</para>
            <para>"minor"    - Holds the minor version number as an int</para>
            <para>"patch"    - Holds the patch version number as an int</para>
            <para>"hex"      - Holds the full version number encoded as an hexadecimal int with one byte (2 places) per number (see example below)</para>
            <para>"status"   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String</para>
            <para>"build"    - Holds the build name (e.g. "custom-build") as a String</para>
            <para>"string"   - major + minor + patch + status + build in a single String</para>
            <para>The "hex" value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, "3.1.12" would be <c>0x03010C</c>. Note that it's still an int internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for easy version comparisons from code:</para>
            <para><code>
            if Engine.get_version_info().hex &gt;= 0x030200:
                # do things specific to version 3.2 or later
            else:
                # do things specific to versions before 3.2
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetAuthorInfo">
            <summary>
            <para>Returns engine author information in a Dictionary.</para>
            <para>"lead_developers" - Array of Strings, lead developer names</para>
            <para>"founders" - Array of Strings, founder names</para>
            <para>"project_managers" - Array of Strings, project manager names</para>
            <para>"developers" - Array of Strings, developer names</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetCopyrightInfo">
            <summary>
            <para>Returns an Array of copyright information Dictionaries.</para>
            <para>"name" - String, component name</para>
            <para>"parts" - Array of Dictionaries {"files", "copyright", "license"} describing subsections of the component</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetDonorInfo">
            <summary>
            <para>Returns a Dictionary of Arrays of donor names.</para>
            <para>{"platinum_sponsors", "gold_sponsors", "mini_sponsors", "gold_donors", "silver_donors", "bronze_donors"}</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetLicenseInfo">
            <summary>
            <para>Returns Dictionary of licenses used by Godot and included third party components.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetLicenseText">
            <summary>
            <para>Returns Godot license text.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.IsInPhysicsFrame">
            <summary>
            <para>Returns <c>true</c> if the game is inside the fixed process and physics phase of the game loop.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.HasSingleton(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Engine.GetSingleton(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Environment">
            <summary>
            <para>Resource for environment nodes (like <see cref="T:Godot.WorldEnvironment"/>) that define multiple environment operations (such as background <see cref="T:Godot.Sky"/> or <see cref="T:Godot.Color"/>, ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:</para>
            <para>- DOF Blur</para>
            <para>- Motion Blur</para>
            <para>- Bloom</para>
            <para>- Tonemap (auto exposure)</para>
            <para>- Adjustments</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOBlur.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOBlur.Blur1x1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOBlur.Blur2x2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOBlur.Blur3x3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Linear">
            <summary>
            <para>Linear tonemapper operator. Reads the linear data and performs an exposure adjustment.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Reinhardt">
            <summary>
            <para>Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: color = color / (1 + color).</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Filmic">
            <summary>
            <para>Filmic tonemapper operator.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Aces">
            <summary>
            <para>Academy Color Encoding System tonemapper operator.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Additive">
            <summary>
            <para>Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Screen">
            <summary>
            <para>Screen glow blending mode. Increases brightness, used frequently with bloom.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Softlight">
            <summary>
            <para>Softlight glow blending mode. Modifies contrast, exposes shadows and highlights, vivid bloom.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Replace">
            <summary>
            <para>Replace glow blending mode. Replaces all pixels' color by the glow value.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Keep">
            <summary>
            <para>Keep on screen every pixel drawn in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.ClearColor">
            <summary>
            <para>Clear the background using the project's clear color.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Color">
            <summary>
            <para>Clear the background using a custom clear color.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Sky">
            <summary>
            <para>Display a user-defined sky in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.ColorSky">
            <summary>
            <para>Clear the background using a custom clear color and allows defining a sky for shading and reflection.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Canvas">
            <summary>
            <para>Display a <see cref="T:Godot.CanvasLayer"/> in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Max">
            <summary>
            <para>Helper constant keeping track of the enum's size, has no direct usage in API calls.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOQuality.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOQuality.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.SSAOQuality.High">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Environment.DOFBlurQuality.Low">
            <summary>
            <para>Low depth-of-field blur quality.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.DOFBlurQuality.Medium">
            <summary>
            <para>Medium depth-of-field blur quality.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.DOFBlurQuality.High">
            <summary>
            <para>High depth-of-field blur quality.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundMode">
            <summary>
            <para>Defines the mode of background.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSky">
            <summary>
            <para><see cref="T:Godot.Sky"/> resource defined as background.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSkyCustomFov">
            <summary>
            <para><see cref="T:Godot.Sky"/> resource's custom field of view.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSkyOrientation">
            <summary>
            <para><see cref="T:Godot.Sky"/> resource's rotation expressed as a <see cref="T:Godot.Basis"/></para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSkyRotation">
            <summary>
            <para><see cref="T:Godot.Sky"/> resource's rotation expressed as euler angles in radians</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSkyRotationDegrees">
            <summary>
            <para><see cref="T:Godot.Sky"/> resource's rotation expressed as euler angles in degrees</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundColor">
            <summary>
            <para>Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundEnergy">
            <summary>
            <para>Power of light emitted by the background.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundCanvasMaxLayer">
            <summary>
            <para>Maximum layer id (if using Layer background mode).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightColor">
            <summary>
            <para><see cref="T:Godot.Color"/> of the ambient light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightEnergy">
            <summary>
            <para>Energy of the ambient light. The higher the value, the stronger the light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightSkyContribution">
            <summary>
            <para>Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogEnabled">
            <summary>
            <para>Enables the fog. Needs fog_height_enabled and/or for_depth_enabled to actually display fog.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogColor">
            <summary>
            <para>Fog's <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogSunColor">
            <summary>
            <para>Sun <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogSunAmount">
            <summary>
            <para>Amount of sun that affects the fog rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthEnabled">
            <summary>
            <para>Enables the fog depth.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthBegin">
            <summary>
            <para>Fog's depth starting distance from the camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthCurve">
            <summary>
            <para>Value defining the fog depth intensity.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogTransmitEnabled">
            <summary>
            <para>Enables fog's light transmission. If enabled, lets reflections light to be transmitted by the fog.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogTransmitCurve">
            <summary>
            <para>Amount of light that the fog transmits.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightEnabled">
            <summary>
            <para>Enables the fog height.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightMin">
            <summary>
            <para>Minimum height of fog.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightMax">
            <summary>
            <para>Maximum height of fog.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightCurve">
            <summary>
            <para>Value defining the fog height intensity.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapMode">
            <summary>
            <para>Tonemapping mode.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapExposure">
            <summary>
            <para>Default exposure for tonemap.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapWhite">
            <summary>
            <para>White reference value for tonemap.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureEnabled">
            <summary>
            <para>Enables the tonemapping auto exposure mode of the scene renderer. If activated, the renderer will automatically determine the exposure setting to adapt to the illumination of the scene and the observed light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureScale">
            <summary>
            <para>Scale of the auto exposure effect. Affects the intensity of auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMinLuma">
            <summary>
            <para>Minimum luminance value for the auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMaxLuma">
            <summary>
            <para>Maximum luminance value for the auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureSpeed">
            <summary>
            <para>Speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsMaxSteps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsDepthTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsRoughness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoIntensity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoRadius2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoIntensity2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoBias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoLightAffect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoAoChannelAffect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoQuality">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoBlur">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoEdgeSharpness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarEnabled">
            <summary>
            <para>Enables the far blur effect.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarDistance">
            <summary>
            <para>Distance from the camera where the far blur effect affects the rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarTransition">
            <summary>
            <para>Transition between no-blur area and far blur.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarAmount">
            <summary>
            <para>Amount of far blur.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarQuality">
            <summary>
            <para>Quality of the far blur quality.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearEnabled">
            <summary>
            <para>Enables the near blur effect.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearDistance">
            <summary>
            <para>Distance from the camera where the near blur effect affects the rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearTransition">
            <summary>
            <para>Transition between near blur and no-blur area.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearAmount">
            <summary>
            <para>Amount of near blur.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearQuality">
            <summary>
            <para>Quality of the near blur quality.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowEnabled">
            <summary>
            <para>Enables glow rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__1">
            <summary>
            <para>First level of glow (most local).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__2">
            <summary>
            <para>Second level of glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__3">
            <summary>
            <para>Third level of glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__4">
            <summary>
            <para>Fourth level of glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__5">
            <summary>
            <para>Fifth level of glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__6">
            <summary>
            <para>Sixth level of glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__7">
            <summary>
            <para>Seventh level of glow (most global).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowIntensity">
            <summary>
            <para>Glow intensity.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowStrength">
            <summary>
            <para>Glow strength.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBloom">
            <summary>
            <para>Bloom value (global glow).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBlendMode">
            <summary>
            <para>Glow blending mode.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrThreshold">
            <summary>
            <para>Bleed threshold of the HDR glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrLuminanceCap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrScale">
            <summary>
            <para>Bleed scale of the HDR glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBicubicUpscale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentEnabled">
            <summary>
            <para>Enables the adjustment_* options provided by this resource. If false, adjustments modifications will have no effect on the rendered scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentBrightness">
            <summary>
            <para>Global brightness value of the rendered scene (default value is 1).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentContrast">
            <summary>
            <para>Global contrast value of the rendered scene (default value is 1).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentSaturation">
            <summary>
            <para>Global color saturation value of the rendered scene (default value is 1).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentColorCorrection">
            <summary>
            <para>Applies the provided <see cref="T:Godot.Texture"/> resource to affect the global color aspect of the rendered scene.</para>
            </summary>
        </member>
        <member name="T:Godot.Expression">
            <summary>
            <para>An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.</para>
            <para>An example expression text using the built-in math functions could be <c>sqrt(pow(3,2) + pow(4,2))</c>.</para>
            <para>In the following example we use a <see cref="T:Godot.LineEdit"/> node to write our expression and show the result.</para>
            <para><code>
            onready var expression = Expression.new()
            
            func _ready():
                $LineEdit.connect("text_entered", self, "_on_text_entered")
            
            func _on_text_entered(command):
                var error = expression.parse(command, [])
                if error != OK:
                    print(expression.get_error_text())
                    return
                var result = expression.execute([], null, true)
                if not expression.has_execute_failed():
                    $LineEdit.text = str(result)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Expression.Parse(System.String,System.String[])">
            <summary>
            <para>Parses the expression and returns a <see cref="T:Godot.Error"/>.</para>
            <para>You can optionally specify names of variables that may appear in the expression with <c>input_names</c>, so that you can bind them when it gets executed.</para>
            <param name="inputNames">If the parameter is null, then the default value is new string[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.Expression.Execute(Godot.Collections.Array,Godot.Object,System.Boolean)">
            <summary>
            <para>Executes the expression that was previously parsed by <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/> and returns the result. Before you use the returned object, you should check if the method failed by calling <see cref="M:Godot.Expression.HasExecuteFailed"/>.</para>
            <para>If you defined input variables in <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/>, you can specify their values in the inputs array, in the same order.</para>
            <param name="inputs">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Expression.HasExecuteFailed">
            <summary>
            <para>Returns <c>true</c> if <see cref="M:Godot.Expression.Execute(Godot.Collections.Array,Godot.Object,System.Boolean)"/> has failed.</para>
            </summary>
        </member>
        <member name="M:Godot.Expression.GetErrorText">
            <summary>
            <para>Returns the error text if <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/> has failed.</para>
            </summary>
        </member>
        <member name="T:Godot.File">
            <summary>
            <para>File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.</para>
            <para>Here's a sample on how to write and read from a file:</para>
            <para><code>
            func save(content):
                var file = File.new()
                file.open("user://save_game.dat", File.WRITE)
                file.store_string(content)
                file.close()
            
            func load():
                var file = File.new()
                file.open("user://save_game.dat", File.READ)
                var content = file.get_as_text()
                file.close()
                return content
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Fastlz">
            <summary>
            <para>Uses the FastLZ compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Deflate">
            <summary>
            <para>Uses the Deflate compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Zstd">
            <summary>
            <para>Uses the Zstd compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Gzip">
            <summary>
            <para>Uses the gzip compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.Read">
            <summary>
            <para>Opens the file for read operations.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.Write">
            <summary>
            <para>Opens the file for write operations. Create it if the file does not exist and truncate if it exists.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.ReadWrite">
            <summary>
            <para>Opens the file for read and write operations. Does not truncate the file.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.WriteRead">
            <summary>
            <para>Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists.</para>
            </summary>
        </member>
        <member name="P:Godot.File.EndianSwap">
            <summary>
            <para>If <c>true</c>, the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.</para>
            <para>Note that this is about the file format, not CPU type. This is always reset to <c>false</c> whenever you open the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncrypted(System.String,System.Int32,System.Byte[])">
            <summary>
            <para>Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncryptedWithPass(System.String,System.Int32,System.String)">
            <summary>
            <para>Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenCompressed(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set <c>compression_mode</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Open(System.String,System.Int32)">
            <summary>
            <para>Opens the file for writing or reading, depending on the flags.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Close">
            <summary>
            <para>Closes the currently opened file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPath">
            <summary>
            <para>Returns the path as a <see cref="T:System.String"/> for the current open file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPathAbsolute">
            <summary>
            <para>Returns the absolute path as a <see cref="T:System.String"/> for the current open file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.IsOpen">
            <summary>
            <para>Returns <c>true</c> if the file is currently opened.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Seek(System.Int32)">
            <summary>
            <para>Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).</para>
            </summary>
        </member>
        <member name="M:Godot.File.SeekEnd(System.Int32)">
            <summary>
            <para>Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPosition">
            <summary>
            <para>Returns the file cursor's position.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetLen">
            <summary>
            <para>Returns the size of the file in bytes.</para>
            </summary>
        </member>
        <member name="M:Godot.File.EofReached">
            <summary>
            <para>Returns <c>true</c> if the file cursor has read past the end of the file. Note that this function will still return <c>false</c> while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low level file access works in all operating systems. There is always <see cref="M:Godot.File.GetLen"/> and <see cref="M:Godot.File.GetPosition"/> to implement a custom logic.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get8">
            <summary>
            <para>Returns the next 8 bits from the file as an integer.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get16">
            <summary>
            <para>Returns the next 16 bits from the file as an integer.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get32">
            <summary>
            <para>Returns the next 32 bits from the file as an integer.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get64">
            <summary>
            <para>Returns the next 64 bits from the file as an integer.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetFloat">
            <summary>
            <para>Returns the next 32 bits from the file as a floating point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetDouble">
            <summary>
            <para>Returns the next 64 bits from the file as a floating point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetReal">
            <summary>
            <para>Returns the next bits from the file as a floating point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetBuffer(System.Int32)">
            <summary>
            <para>Returns next <c>len</c> bytes of the file as a <see cref="T:System.Byte"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetLine">
            <summary>
            <para>Returns the next line of the file as a <see cref="T:System.String"/>.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetCsvLine(System.String)">
            <summary>
            <para>Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma), it should be one character long.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetAsText">
            <summary>
            <para>Returns the whole file as a <see cref="T:System.String"/>.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetMd5(System.String)">
            <summary>
            <para>Returns an MD5 String representing the file at the given path or an empty <see cref="T:System.String"/> on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetSha256(System.String)">
            <summary>
            <para>Returns a SHA-256 <see cref="T:System.String"/> representing the file at the given path or an empty <see cref="T:System.String"/> on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetError">
            <summary>
            <para>Returns the last error that happened when trying to perform operations. Compare with the <c>ERR_FILE_*</c> constants from <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetVar(System.Boolean)">
            <summary>
            <para>Returns the next <c>Variant</c> value from the file. When <c>allow_objects</c> is <c>true</c> decoding objects is allowed.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store8(System.Int32)">
            <summary>
            <para>Stores an integer as 8 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store16(System.Int32)">
            <summary>
            <para>Stores an integer as 16 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store32(System.Int32)">
            <summary>
            <para>Stores an integer as 32 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store64(System.Int32)">
            <summary>
            <para>Stores an integer as 64 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreFloat(System.Single)">
            <summary>
            <para>Stores a floating point number as 32 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreDouble(System.Single)">
            <summary>
            <para>Stores a floating point number as 64 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreReal(System.Single)">
            <summary>
            <para>Stores a floating point number in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreBuffer(System.Byte[])">
            <summary>
            <para>Stores the given array of bytes in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreLine(System.String)">
            <summary>
            <para>Stores the given <see cref="T:System.String"/> as a line in the file.</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreCsvLine(System.String[],System.String)">
            <summary>
            <para>Store the given <see cref="T:System.String"/> in the file as a line formatted in the CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma), it should be one character long.</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreString(System.String)">
            <summary>
            <para>Stores the given <see cref="T:System.String"/> in the file.</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreVar(System.Object,System.Boolean)">
            <summary>
            <para>Stores any Variant value in the file. When <c>full_objects</c> is <c>true</c> encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.File.StorePascalString(System.String)">
            <summary>
            <para>Stores the given <see cref="T:System.String"/> as a line in the file in Pascal format (i.e. also store the length of the string).</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPascalString">
            <summary>
            <para>Returns a <see cref="T:System.String"/> saved in Pascal format from the file.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.FileExists(System.String)">
            <summary>
            <para>Returns <c>true</c> if the file exists in the given path.</para>
            <para>Note that many resources types are imported (e.g. textures or sound files), and that their source asset will not be included in the exported game, as only the imported version is used (in the <c>res://.import</c> folder). To check for the existence of such resources while taking into account the remapping to their imported location, use <see cref="M:Godot.ResourceLoader.Exists(System.String,System.String)"/>. Typically, using <c>File.file_exists</c> on an imported resource would work while you are developing in the editor (the source asset is present in <c>res://</c>, but fail when exported).</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetModifiedTime(System.String)">
            <summary>
            <para>Returns the last time the <c>file</c> was modified in unix timestamp format or returns a <see cref="T:System.String"/> "ERROR IN <c>file</c>". This unix timestamp can be converted to datetime by using <see cref="M:Godot.OS.GetDatetimeFromUnixTime(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.FileDialog">
            <summary>
            <para>FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.ModeEnum.OpenFile">
            <summary>
            <para>The dialog allows the selection of one, and only one file.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.ModeEnum.OpenFiles">
            <summary>
            <para>The dialog allows the selection of multiple files.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.ModeEnum.OpenDir">
            <summary>
            <para>The dialog functions as a folder selector, disallowing the selection of any file.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.ModeEnum.OpenAny">
            <summary>
            <para>The dialog allows the selection of a file or a directory.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.ModeEnum.SaveFile">
            <summary>
            <para>The dialog will warn when a file exists.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Resources">
            <summary>
            <para>The dialog allows the selection of file and directory.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Userdata">
            <summary>
            <para>The dialog allows access files under <see cref="T:Godot.Resource"/> path(res://) .</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Filesystem">
            <summary>
            <para>The dialog allows access files in whole file system.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ModeOverridesTitle">
            <summary>
            <para>If <c>true</c>, changing the <c>Mode</c> property will set the window title accordingly (e.g. setting mode to <c>MODE_OPEN_FILE</c> will change the window title to "Open a File").</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Mode">
            <summary>
            <para>Set dialog to open or save mode, changes selection behavior. See enum <c>Mode</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Access">
            <summary>
            <para>The file system access scope. See enum <c>Access</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Filters">
            <summary>
            <para>Set file type filters. This example shows only .png and .gd files <c>set_filters(PoolStringArray(["*.png ; PNG Images","*.gd ; GD Script"]))</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ShowHiddenFiles">
            <summary>
            <para>If <c>true</c>, the dialog will show hidden files.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentDir">
            <summary>
            <para>The current working directory of the file dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentFile">
            <summary>
            <para>The currently selected file of the file dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentPath">
            <summary>
            <para>The currently selected file path of the file dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.ClearFilters">
            <summary>
            <para>Clear all the added filters in the dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.AddFilter(System.String)">
            <summary>
            <para>Add a custom filter. Example: <c>add_filter("*.png ; PNG Images")</c></para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.GetVbox">
            <summary>
            <para>Return the vertical box container of the dialog, custom controls can be added to it.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.GetLineEdit">
            <summary>
            <para>Returns the LineEdit for the selected file.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.DeselectItems">
            <summary>
            <para>Clear currently selected items in the dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.Invalidate">
            <summary>
            <para>Invalidate and update the current dialog content list.</para>
            </summary>
        </member>
        <member name="T:Godot.Font">
            <summary>
            <para>Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.Draw(Godot.RID,Godot.Vector2,System.String,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw "string" into a canvas item using the font at a given position, with "modulate" color, and optionally clipping the width. "position" specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.Font.GetAscent">
            <summary>
            <para>Return the font ascent (number of pixels above the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetDescent">
            <summary>
            <para>Return the font descent (number of pixels below the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetHeight">
            <summary>
            <para>Return the total font height (ascent plus descent) in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.IsDistanceFieldHint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Font.GetStringSize(System.String)">
            <summary>
            <para>Return the size of a string, taking kerning and advance into account.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.HasOutline">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Font.DrawChar(Godot.RID,Godot.Vector2,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Boolean)">
            <summary>
            <para>Draw character "char" into a canvas item using the font at a given position, with "modulate" color, and optionally kerning if "next" is passed. clipping the width. "position" specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.Font.UpdateChanges">
            <summary>
            <para>After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.</para>
            </summary>
        </member>
        <member name="T:Godot.FuncRef">
            <summary>
            <para>In GDScript, functions are not first-class objects. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.</para>
            <para>However, by creating a <c>FuncRef</c> using the <c>@GDScript.funcref</c> function, a reference to a function in a given object can be created, passed around and called.</para>
            </summary>
        </member>
        <member name="M:Godot.FuncRef.CallFunc(System.Object[])">
            <summary>
            <para>Calls the referenced function previously set by <see cref="M:Godot.FuncRef.SetFunction(System.String)"/> or <c>@GDScript.funcref</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FuncRef.SetInstance(Godot.Object)">
            <summary>
            <para>The object containing the referenced function. This object must be of a type actually inheriting from <see cref="T:Godot.Object"/>, not a built-in type such as <see cref="T:System.Int32"/>, <see cref="T:Godot.Vector2"/> or <see cref="T:Godot.Collections.Dictionary"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.FuncRef.SetFunction(System.String)">
            <summary>
            <para>The name of the referenced function to call on the object, without parentheses or any parameters.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNative.Library">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GDNative.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GDNative.Terminate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GDNative.CallNative(System.String,System.String,Godot.Collections.Array)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.ConfigFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.LoadOnce">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Singleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.SymbolPrefix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Reloadable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentLibraryPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentDependencies">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.GDScript">
            <summary>
            <para>A script implemented in the GDScript programming language. The script exends the functionality of all objects that instance it.</para>
            <para><see cref="M:Godot.GDScript.New(System.Object[])"/> creates a new instance of the script. <see cref="M:Godot.Object.SetScript(Godot.Reference)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            </summary>
        </member>
        <member name="M:Godot.GDScript.New(System.Object[])">
            <summary>
            <para>Returns a new instance of the script.</para>
            <para>For example:</para>
            <para><code>
            var MyClass = load("myclass.gd")
            var instance = MyClass.new()
            assert(instance.get_script() == MyClass)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.GDScript.GetAsByteCode">
            <summary>
            <para>Returns byte code for the script source code.</para>
            </summary>
        </member>
        <member name="T:Godot.GDScriptFunctionState">
            <summary>
            <para>Calling <c>@GDScript.yield</c> within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling <see cref="M:Godot.GDScriptFunctionState.Resume(System.Object)"/> on this state object.</para>
            </summary>
        </member>
        <member name="M:Godot.GDScriptFunctionState.Resume(System.Object)">
            <summary>
            <para>Resume execution of the yielded function call.</para>
            <para>If handed an argument, return the argument from the <c>@GDScript.yield</c> call in the yielded function call. You can pass e.g. an <see cref="T:Godot.Collections.Array"/> to hand multiple arguments.</para>
            <para>This function returns what the resumed function call returns, possibly another function state if yielded again.</para>
            </summary>
        </member>
        <member name="M:Godot.GDScriptFunctionState.IsValid(System.Boolean)">
            <summary>
            <para>Check whether the function call may be resumed. This is not the case if the function state was already resumed.</para>
            <para>If <c>extended_check</c> is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of <see cref="M:Godot.GDScriptFunctionState.Resume(System.Object)"/>, but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.</para>
            </summary>
        </member>
        <member name="T:Godot.Generic6DOFJoint">
            <summary>
            <para>The first 3 DOF axes are linear axes, which represent translation of Bodies, and the latter 3 DOF axes represent the angular motion. Each axis can be either locked, or limited.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearLowerLimit">
            <summary>
            <para>The minimum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearUpperLimit">
            <summary>
            <para>The maximum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the axes The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearRestitution">
            <summary>
            <para>The amount of restitution on the axes movement The lower, the more momentum gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearDamping">
            <summary>
            <para>The amount of damping that happens at the linear motion across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearMotorTargetVelocity">
            <summary>
            <para>The velocity the linear motor will try to reach.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.LinearMotorForceLimit">
            <summary>
            <para>The maximum force the linear motor will apply while trying to reach the velocity target.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularLowerLimit">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularUpperLimit">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularLimitSoftness">
            <summary>
            <para>The speed of all rotations across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularDamping">
            <summary>
            <para>The amount of rotational damping across the axes. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularRestitution">
            <summary>
            <para>The amount of rotational restitution across the axes. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularForceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularErp">
            <summary>
            <para>When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularMotorTargetVelocity">
            <summary>
            <para>Target speed for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.AngularMotorForceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Param.Max">
            <summary>
            <para>End flag of PARAM_* constants, used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableLinearLimit">
            <summary>
            <para>If <c>set</c> there is linear motion possible within the given limits.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableAngularLimit">
            <summary>
            <para>If <c>set</c> there is rotational motion possible.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableLinearSpring">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableAngularSpring">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableMotor">
            <summary>
            <para>If <c>set</c> there is a rotational motor across these axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.EnableLinearMotor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint.Flag.Max">
            <summary>
            <para>End flag of FLAG_* constants, used internally.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__enabled">
            <summary>
            <para>If <c>true</c>, the linear motion across the x-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__upperDistance">
            <summary>
            <para>The maximum difference between the pivot points' x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__lowerDistance">
            <summary>
            <para>The minimum difference between the pivot points' x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__softness">
            <summary>
            <para>A factor applied to the movement across the x-axis The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__restitution">
            <summary>
            <para>The amount of restitution on the x-axis movement The lower, the more momentum gets lost.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__damping">
            <summary>
            <para>The amount of damping that happens at the x-motion.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorX__enabled">
            <summary>
            <para>If <c>true</c>, then there is a linear motor on the x-axis. It will attempt to reach the target velocity while staying within the force limits.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorX__targetVelocity">
            <summary>
            <para>The speed that the linear motor will attempt to reach on the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorX__forceLimit">
            <summary>
            <para>The maximum force the linear motor can apply on the x-axis while trying to reach the target velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringX__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringX__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringX__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringX__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__enabled">
            <summary>
            <para>If <c>true</c>, rotation across the x-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__upperAngle">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__lowerAngle">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__softness">
            <summary>
            <para>The speed of all rotations across the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__restitution">
            <summary>
            <para>The amount of rotational restitution across the x-axis. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__damping">
            <summary>
            <para>The amount of rotational damping across the x-axis.</para>
            <para>The lower, the longer an impulse from one side takes to travel to the other side.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__forceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__erp">
            <summary>
            <para>When rotating across x-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__enabled">
            <summary>
            <para>If <c>true</c>, a rotating motor at the x-axis is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__targetVelocity">
            <summary>
            <para>Target speed for the motor at the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__forceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringX__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringX__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringX__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringX__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__enabled">
            <summary>
            <para>If <c>true</c>, the linear motion across the y-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__upperDistance">
            <summary>
            <para>The maximum difference between the pivot points' y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__lowerDistance">
            <summary>
            <para>The minimum difference between the pivot points' y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__softness">
            <summary>
            <para>A factor applied to the movement across the y-axis The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__restitution">
            <summary>
            <para>The amount of restitution on the y-axis movement The lower, the more momentum gets lost.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__damping">
            <summary>
            <para>The amount of damping that happens at the y-motion.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorY__enabled">
            <summary>
            <para>If <c>true</c>, then there is a linear motor on the y-axis. It will attempt to reach the target velocity while staying within the force limits.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorY__targetVelocity">
            <summary>
            <para>The speed that the linear motor will attempt to reach on the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorY__forceLimit">
            <summary>
            <para>The maximum force the linear motor can apply on the y-axis while trying to reach the target velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringY__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringY__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringY__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringY__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__enabled">
            <summary>
            <para>If <c>true</c>, rotation across the y-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__upperAngle">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__lowerAngle">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__softness">
            <summary>
            <para>The speed of all rotations across the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__restitution">
            <summary>
            <para>The amount of rotational restitution across the y-axis. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__damping">
            <summary>
            <para>The amount of rotational damping across the y-axis. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__forceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__erp">
            <summary>
            <para>When rotating across y-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__enabled">
            <summary>
            <para>If <c>true</c>, a rotating motor at the y-axis is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__targetVelocity">
            <summary>
            <para>Target speed for the motor at the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__forceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringY__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringY__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringY__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringY__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__enabled">
            <summary>
            <para>If <c>true</c>, the linear motion across the z-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__upperDistance">
            <summary>
            <para>The maximum difference between the pivot points' z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__lowerDistance">
            <summary>
            <para>The minimum difference between the pivot points' z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__softness">
            <summary>
            <para>A factor applied to the movement across the z-axis The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__restitution">
            <summary>
            <para>The amount of restitution on the z-axis movement The lower, the more momentum gets lost.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__damping">
            <summary>
            <para>The amount of damping that happens at the z-motion.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorZ__enabled">
            <summary>
            <para>If <c>true</c>, then there is a linear motor on the z-axis. It will attempt to reach the target velocity while staying within the force limits.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorZ__targetVelocity">
            <summary>
            <para>The speed that the linear motor will attempt to reach on the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearMotorZ__forceLimit">
            <summary>
            <para>The maximum force the linear motor can apply on the z-axis while trying to reach the target velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringZ__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringZ__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringZ__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearSpringZ__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__enabled">
            <summary>
            <para>If <c>true</c>, rotation across the z-axis is limited.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__upperAngle">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__lowerAngle">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__softness">
            <summary>
            <para>The speed of all rotations across the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__restitution">
            <summary>
            <para>The amount of rotational restitution across the z-axis. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__damping">
            <summary>
            <para>The amount of rotational damping across the z-axis. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__forceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__erp">
            <summary>
            <para>When rotating across z-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__enabled">
            <summary>
            <para>If <c>true</c>, a rotating motor at the z-axis is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__targetVelocity">
            <summary>
            <para>Target speed for the motor at the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__forceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringZ__enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringZ__stiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringZ__damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularSpringZ__equilibriumPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.Precision">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildBoxPlanes(Godot.Vector3)">
            <summary>
            <para>Returns an array with 6 <see cref="T:Godot.Plane"/>s that describe the sides of a box centered at the origin. The box size is defined by <c>extents</c>, which represents one (positive) corner of the box (i.e. half its actual size).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildCylinderPlanes(System.Single,System.Single,System.Int32,Godot.Vector3.Axis)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Plane"/>s closely bounding a faceted cylinder centered at the origin with radius <c>radius</c> and height <c>height</c>. The parameter <c>sides</c> defines how many planes will be generated for the round part of the cylinder. The parameter <c>axis</c> describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildCapsulePlanes(System.Single,System.Single,System.Int32,System.Int32,Godot.Vector3.Axis)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Plane"/>s closely bounding a faceted capsule centered at the origin with radius <c>radius</c> and height <c>height</c>. The parameter <c>sides</c> defines how many planes will be generated for the side part of the capsule, whereas <c>lats</c> gives the number of latitudinal steps at the bottom and top of the capsule. The parameter <c>axis</c> describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsCircle(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            <para>Given the 2d segment (<c>segment_from</c>, <c>segment_to</c>), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position <c>circle_position</c> and has radius <c>circle_radius</c>. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsSegment2d(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Checks if the two segments (<c>from_a</c>, <c>to_a</c>) and (<c>from_b</c>, <c>to_b</c>) intersect. If yes, return the point of intersection as <see cref="T:Godot.Vector2"/>. If no intersection takes place, returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.LineIntersectsLine2d(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Checks if the two lines (<c>from_a</c>, <c>dir_a</c>) and (<c>from_b</c>, <c>dir_b</c>) intersect. If yes, return the point of intersection as <see cref="T:Godot.Vector2"/>. If no intersection takes place, returns an empty <c>Variant</c>. Note that the lines are specified using direction vectors, not end points.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointsBetweenSegments2d(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Given the two 2d segments (<c>p1</c>, <c>p2</c>) and (<c>q1</c>, <c>q2</c>), finds those two points on the two segments that are closest to each other. Returns a <see cref="T:Godot.Vector2"/> that contains this point on (<c>p1</c>, <c>p2</c>) as well the accompanying point on (<c>q1</c>, <c>q2</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointsBetweenSegments(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Given the two 3d segments (<c>p1</c>, <c>p2</c>) and (<c>q1</c>, <c>q2</c>), finds those two points on the two segments that are closest to each other. Returns a <see cref="T:Godot.Vector3"/> that contains this point on (<c>p1</c>, <c>p2</c>) as well the accompanying point on (<c>q1</c>, <c>q2</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegment2d(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns the 2d point on the 2d segment (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point will always be inside the specified segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Returns the 3d point on the 3d segment (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point will always be inside the specified segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegmentUncapped2d(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns the 2d point on the 2d line defined by (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point can be inside the segment (<c>s1</c>, <c>s2</c>) or outside of it, i.e. somewhere on the line extending from the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegmentUncapped(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Returns the 3d point on the 3d line defined by (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point can be inside the segment (<c>s1</c>, <c>s2</c>) or outside of it, i.e. somewhere on the line extending from the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetUv84NormalBit(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Geometry.RayIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Tests if the 3d ray starting at <c>from</c> with the direction of <c>dir</c> intersects the triangle specified by <c>a</c>, <c>b</c> and <c>c</c>. If yes, returns the point of intersection as <see cref="T:Godot.Vector3"/>. If no intersection takes place, an empty <c>Variant</c> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Tests if the segment (<c>from</c>, <c>to</c>) intersects the triangle <c>a</c>, <c>b</c>, <c>c</c>. If yes, returns the point of intersection as <see cref="T:Godot.Vector3"/>. If no intersection takes place, an empty <c>Variant</c> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsSphere(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            <para>Checks if the segment (<c>from</c>, <c>to</c>) intersects the sphere that is located at <c>sphere_position</c> and has radius <c>sphere_radius</c>. If no, returns an empty <see cref="T:Godot.Vector3"/>. If yes, returns a <see cref="T:Godot.Vector3"/> containing the point of intersection and the sphere's normal at the point of intersection.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsCylinder(Godot.Vector3,Godot.Vector3,System.Single,System.Single)">
            <summary>
            <para>Checks if the segment (<c>from</c>, <c>to</c>) intersects the cylinder with height <c>height</c> that is centered at the origin and has radius <c>radius</c>. If no, returns an empty <see cref="T:Godot.Vector3"/>. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsConvex(Godot.Vector3,Godot.Vector3,Godot.Collections.Array)">
            <summary>
            <para>Given a convex hull defined though the <see cref="T:Godot.Plane"/>s in the array <c>planes</c>, tests if the segment (<c>from</c>, <c>to</c>) intersects with that hull. If an intersection is found, returns a <see cref="T:Godot.Vector3"/> containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.PointIsInsideTriangle(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns if <c>point</c> is inside the triangle specified by <c>a</c>, <c>b</c> and <c>c</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.TriangulatePolygon(Godot.Vector2[])">
            <summary>
            <para>Triangulates the polygon specified by the points in <c>polygon</c>. Returns a <see cref="T:System.Int32"/> where each triangle consists of three consecutive point indices into <c>polygon</c> (i.e. the returned array will have <c>n * 3</c> elements, with <c>n</c> being the number of found triangles). If the triangulation did not succeed, an empty <see cref="T:System.Int32"/> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.ConvexHull2d(Godot.Vector2[])">
            <summary>
            <para>Given an array of <see cref="T:Godot.Vector2"/>s, returns the convex hull as a list of points in counter-clockwise order. The last point is the same as the first one.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.ClipPolygon(Godot.Vector3[],Godot.Plane)">
            <summary>
            <para>Clips the polygon defined by the points in <c>points</c> against the <c>plane</c> and returns the points of the clipped polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry.MakeAtlas(Godot.Vector2[])">
            <summary>
            <para>Given an array of <see cref="T:Godot.Vector2"/>s representing tiles, builds an atlas. The returned dictionary has two keys: <c>points</c> is a vector of <see cref="T:Godot.Vector2"/> that specifies the positions of each tile, <c>size</c> contains the overall size of the whole atlas as <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.GeometryInstance">
            <summary>
            <para>Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.Flags.UseBakedLight">
            <summary>
            <para>Will allow the GeometryInstance to be used when baking lights using a <see cref="T:Godot.GIProbe"/> and/or any other form of baked lighting.</para>
            <para>Added documentation for GeometryInstance and VisualInstance</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.Flags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.ShadowCastingSetting.Off">
            <summary>
            <para>Will not cast any shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.ShadowCastingSetting.On">
            <summary>
            <para>Will cast shadows from all visible faces in the GeometryInstance.</para>
            <para>Will take culling into account, so faces not being rendered will not be taken into account when shadow casting.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.ShadowCastingSetting.DoubleSided">
            <summary>
            <para>Will cast shadows from all visible faces in the GeometryInstance.</para>
            <para>Will not take culling into account, so all faces will be taken into account when shadow casting.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance.ShadowCastingSetting.ShadowsOnly">
            <summary>
            <para>Will only show the shadows casted from this object.</para>
            <para>In other words: The actual mesh will not be visible, only the shadows casted from the mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.MaterialOverride">
            <summary>
            <para>The material override for the whole geometry.</para>
            <para>If there is a material in material_override, it will be used instead of any material set in any material slot of the mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.CastShadow">
            <summary>
            <para>The selected shadow casting flag. See SHADOW_CASTING_SETTING_* constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.ExtraCullMargin">
            <summary>
            <para>The extra distance added to the GeometryInstance's bounding box (<see cref="T:Godot.AABB"/>) to increase its cull box.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.UseInBakedLight">
            <summary>
            <para>If <c>true</c>, this GeometryInstance will be used when baking lights using a <see cref="T:Godot.GIProbe"/> and/or any other form of baked lighting.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMinDistance">
            <summary>
            <para>The GeometryInstance's min LOD distance.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMinHysteresis">
            <summary>
            <para>The GeometryInstance's min LOD margin.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMaxDistance">
            <summary>
            <para>The GeometryInstance's max LOD distance.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMaxHysteresis">
            <summary>
            <para>The GeometryInstance's max LOD margin.</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv64">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv128">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv256">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv512">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Subdiv">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Extents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.DynamicRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Energy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Propagation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.NormalBias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Interior">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Compress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GIProbe.Bake(Godot.Node,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GIProbe.DebugBake">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.CellSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.ToCellXform">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.DynamicData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.DynamicRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Energy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.NormalBias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Propagation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Interior">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Compress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.AttachThread">
            <summary>
            <para>Attaches the current thread to the mono runtime.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.DetachThread">
            <summary>
            <para>Detaches the current thread from the mono runtime.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.GetDomainId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.GetScriptsDomainId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsScriptsDomainLoaded">
            <summary>
            <para>Returns whether the scripts domain is loaded.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsDomainFinalizingForUnload(System.Int32)">
            <summary>
            <para>Returns whether the domain is being finalized.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsRuntimeShuttingDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsRuntimeInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Gradient">
            <summary>
            <para>Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color 3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset 0 and the other (white) at the ramp higher offset 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Gradient.Offsets">
            <summary>
            <para>Gradient's offsets returned as a <see cref="T:System.Single"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Gradient.Colors">
            <summary>
            <para>Gradient's colors returned as a <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.AddPoint(System.Single,Godot.Color)">
            <summary>
            <para>Adds the specified color to the end of the ramp, with the specified offset</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the color at the index offset</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetOffset(System.Int32,System.Single)">
            <summary>
            <para>Sets the offset for the ramp color at index point</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the ramp color at index point</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color of the ramp color at index point</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetColor(System.Int32)">
            <summary>
            <para>Returns the color of the ramp color at index point</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.Interpolate(System.Single)">
            <summary>
            <para>Returns the interpolated color specified by offset</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetPointCount">
            <summary>
            <para>Returns the number of colors in the ramp</para>
            </summary>
        </member>
        <member name="T:Godot.GradientTexture">
            <summary>
            <para>Uses a <see cref="T:Godot.Gradient"/> to fill the texture data, the gradient will be filled from left to right using colors obtained from the gradient, this means that the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see <see cref="P:Godot.GradientTexture.Width"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Gradient">
            <summary>
            <para>The <see cref="T:Godot.Gradient"/> that will be used to fill the texture.</para>
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Width">
            <summary>
            <para>The number of color samples that will be obtained from the <see cref="T:Godot.Gradient"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit">
            <summary>
            <para>GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.</para>
            <para>It is greatly advised to enable low processor usage mode (see <see cref="P:Godot.OS.LowProcessorUsageMode"/>) when using GraphEdits.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.RightDisconnects">
            <summary>
            <para>If <c>true</c>, enables disconnection of existing connections in the GraphEdit by dragging the right end.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.ScrollOffset">
            <summary>
            <para>The scroll offset.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.SnapDistance">
            <summary>
            <para>The snapping distance in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.UseSnap">
            <summary>
            <para>If <c>true</c>, enables snapping.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.Zoom">
            <summary>
            <para>The current zoom value.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ConnectNode(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            <para>Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsNodeConnected(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            <para>Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.DisconnectNode(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            <para>Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.SetConnectionActivity(System.String,System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.GetConnectionList">
            <summary>
            <para>Return an Array containing the list of connections. A connection consists in a structure of the form {from_port: 0, from: "GraphNode name 0", to_port: 1, to: "GraphNode name 1" }</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ClearConnections">
            <summary>
            <para>Remove all connections between nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidRightDisconnectType(System.Int32)">
            <summary>
            <para>Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidRightDisconnectType(System.Int32)">
            <summary>
            <para>Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidLeftDisconnectType(System.Int32)">
            <summary>
            <para>Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidLeftDisconnectType(System.Int32)">
            <summary>
            <para>Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Makes possible the connection between two different slot types. The type is defined with the <see cref="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture,Godot.Texture)"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Makes it not possible to connect between two different slot types. The type is defined with the <see cref="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture,Godot.Texture)"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Returns whether it's possible to connect slots of the specified types.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.GetZoomHbox">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.SetSelected(Godot.Node)">
            <summary>
            <para>Sets the specified <c>node</c> as the one selected.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode">
            <summary>
            <para>A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.</para>
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Breakpoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Offset">
            <summary>
            <para>The offset of the GraphNode, relative to the scroll offset of the <see cref="T:Godot.GraphEdit"/>. Note that you cannot use position directly, as <see cref="T:Godot.GraphEdit"/> is a <see cref="T:Godot.Container"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.ShowClose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Resizable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Comment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearSlot(System.Int32)">
            <summary>
            <para>Disable input and output slot whose index is 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearAllSlots">
            <summary>
            <para>Disable all input and output slots of the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledLeft(System.Int32)">
            <summary>
            <para>Return true if left (input) slot 'idx' is enabled. False otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeLeft(System.Int32)">
            <summary>
            <para>Return the (integer) type of left (input) 'idx' slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorLeft(System.Int32)">
            <summary>
            <para>Return the color set to 'idx' left (input) slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledRight(System.Int32)">
            <summary>
            <para>Return true if right (output) slot 'idx' is enabled. False otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeRight(System.Int32)">
            <summary>
            <para>Return the (integer) type of right (output) 'idx' slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorRight(System.Int32)">
            <summary>
            <para>Return the color set to 'idx' right (output) slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputCount">
            <summary>
            <para>Return the number of enabled output slots (connections) of the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputCount">
            <summary>
            <para>Return the number of enabled input slots (connections) to the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputPosition(System.Int32)">
            <summary>
            <para>Return the position of the output connection 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputType(System.Int32)">
            <summary>
            <para>Return the type of the output connection 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputColor(System.Int32)">
            <summary>
            <para>Return the color of the output connection 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputPosition(System.Int32)">
            <summary>
            <para>Return the position of the input connection 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputType(System.Int32)">
            <summary>
            <para>Return the type of the input connection 'idx'.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputColor(System.Int32)">
            <summary>
            <para>Return the color of the input connection 'idx'.</para>
            </summary>
        </member>
        <member name="T:Godot.GridContainer">
            <summary>
            <para>Grid container will arrange its children in a grid like structure, the grid columns are specified using the <see cref="P:Godot.GridContainer.Columns"/> property and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.</para>
            </summary>
        </member>
        <member name="P:Godot.GridContainer.Columns">
            <summary>
            <para>The number of columns in the <c>GridContainer</c>. If modified, <c>GridContainer</c> reorders its children to accommodate the new layout.</para>
            </summary>
        </member>
        <member name="T:Godot.GridMap">
            <summary>
            <para>GridMap lets you place meshes on a grid interactively. It works both from the editor and can help you create in-game level editors.</para>
            <para>GridMaps use a <see cref="T:Godot.MeshLibrary"/> which contain a list of tiles: meshes with materials plus optional collisions and extra elements.</para>
            <para>A GridMap contains a collection of cells. Each grid cell refers to a <see cref="T:Godot.MeshLibrary"/> item. All cells in the map have the same dimensions.</para>
            <para>A GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells.</para>
            </summary>
        </member>
        <member name="F:Godot.GridMap.InvalidCellItem">
            <summary>
            <para>Invalid cell item that can be used in <see cref="M:Godot.GridMap.SetCellItem(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> to clear cells (or represent an empty cell in <see cref="M:Godot.GridMap.GetCellItem(System.Int32,System.Int32,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.Theme">
            <summary>
            <para>Deprecated, use <see cref="P:Godot.GridMap.MeshLibrary"/> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.MeshLibrary">
            <summary>
            <para>The assigned <see cref="T:Godot.MeshLibrary"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellSize">
            <summary>
            <para>The dimensions of the grid's cells.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellOctantSize">
            <summary>
            <para>The size of each octant measured in number of cells. This applies to all three axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterX">
            <summary>
            <para>If <c>true</c>, grid items are centered on the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterY">
            <summary>
            <para>If <c>true</c>, grid items are centered on the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterZ">
            <summary>
            <para>If <c>true</c>, grid items are centered on the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionLayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionMask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCellItem(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Set the mesh index for the cell referenced by its grid-based X, Y and Z coordinates.</para>
            <para>A negative item index will clear the cell.</para>
            <para>Optionally, the item's orientation can be passed.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>The <see cref="T:Godot.MeshLibrary"/> item index located at the grid-based X, Y and Z coordinates. If the cell is empty, [constant INVALID_CELL_ITEM] will be returned.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItemOrientation(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>The orientation of the cell at the grid-based X, Y and Z coordinates. -1 is returned if the cell is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.WorldToMap(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.MapToWorld(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.ResourceChanged(Godot.Resource)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetClip(System.Boolean,System.Boolean,System.Int32,Godot.Vector3.Axis)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.Clear">
            <summary>
            <para>Clear all cells.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetUsedCells">
            <summary>
            <para>Array of <see cref="T:Godot.Vector3"/> with the non empty cell coordinates in the grid map.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetMeshes">
            <summary>
            <para>Array of <see cref="T:Godot.Transform"/> and <see cref="T:Godot.Mesh"/> references corresponding to the non empty cells in the grid. The transforms are specified in world space.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetBakeMeshes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetBakeMeshInstance(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.ClearBakedMeshes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.GridMap.MakeBakedMeshes(System.Boolean,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.GrooveJoint2D">
            <summary>
            <para>Groove constraint for 2D physics. This is useful for making a body "slide" through a segment placed in another.</para>
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.Length">
            <summary>
            <para>The groove's length. The groove is from the joint's origin towards <see cref="P:Godot.GrooveJoint2D.Length"/> along the joint's local y axis. Default value: <c>50</c></para>
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.InitialOffset">
            <summary>
            <para>The body B's initial anchor position defined by the joint's origin and a local offset <see cref="P:Godot.GrooveJoint2D.InitialOffset"/> along the joint's y axis (along the groove). Default value: <c>25</c></para>
            </summary>
        </member>
        <member name="T:Godot.HBoxContainer">
            <summary>
            <para>Horizontal box container. See <see cref="T:Godot.BoxContainer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.HeightMapShape">
            <summary>
            <para>Height map shape resource, which can be added to a <see cref="T:Godot.PhysicsBody"/> or <see cref="T:Godot.Area"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape.MapWidth">
            <summary>
            <para>Width of the height map data. Changing this will resize the <see cref="P:Godot.HeightMapShape.MapData"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape.MapDepth">
            <summary>
            <para>Depth of the height map data. Changing this will resize the <see cref="P:Godot.HeightMapShape.MapData"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape.MapData">
            <summary>
            <para>Height map data, pool array must be of <see cref="P:Godot.HeightMapShape.MapWidth"/> * <see cref="P:Godot.HeightMapShape.MapDepth"/> size.</para>
            </summary>
        </member>
        <member name="T:Godot.HingeJoint">
            <summary>
            <para>Normally uses the z-axis of body A as the hinge axis, another axis can be specified when adding it manually though.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.Bias">
            <summary>
            <para>The speed with which the two bodies get pulled together when they move in different directions.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.LimitUpper">
            <summary>
            <para>The maximum rotation. only active if <see cref="P:Godot.HingeJoint.AngularLimit__enable"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.LimitLower">
            <summary>
            <para>The minimum rotation. only active if <see cref="P:Godot.HingeJoint.AngularLimit__enable"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.LimitBias">
            <summary>
            <para>The speed with which the rotation across the axis perpendicular to the hinge gets corrected.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.LimitSoftness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.LimitRelaxation">
            <summary>
            <para>The lower this value, the more the rotation gets slowed down.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.MotorTargetVelocity">
            <summary>
            <para>Target speed for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.MotorMaxImpulse">
            <summary>
            <para>Maximum acceleration for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Param.Max">
            <summary>
            <para>End flag of PARAM_* constants, used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Flag.UseLimit">
            <summary>
            <para>If <c>true</c>, the hinges maximum and minimum rotation, defined by <see cref="P:Godot.HingeJoint.AngularLimit__lower"/> and <see cref="P:Godot.HingeJoint.AngularLimit__upper"/> has effects.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Flag.EnableMotor">
            <summary>
            <para>When activated, a motor turns the hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint.Flag.Max">
            <summary>
            <para>End flag of FLAG_* constants, used internally.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Params__bias">
            <summary>
            <para>The speed with which the two bodies get pulled together when they move in different directions.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__enable">
            <summary>
            <para>If <c>true</c>, the hinges maximum and minimum rotation, defined by <see cref="P:Godot.HingeJoint.AngularLimit__lower"/> and <see cref="P:Godot.HingeJoint.AngularLimit__upper"/> has effects.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__upper">
            <summary>
            <para>The maximum rotation. only active if <see cref="P:Godot.HingeJoint.AngularLimit__enable"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__lower">
            <summary>
            <para>The minimum rotation. only active if <see cref="P:Godot.HingeJoint.AngularLimit__enable"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__bias">
            <summary>
            <para>The speed with which the rotation across the axis perpendicular to the hinge gets corrected.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__softness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__relaxation">
            <summary>
            <para>The lower this value, the more the rotation gets slowed down.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__enable">
            <summary>
            <para>When activated, a motor turns the hinge.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__targetVelocity">
            <summary>
            <para>Target speed for the motor.</para>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__maxImpulse">
            <summary>
            <para>Maximum acceleration for the motor.</para>
            </summary>
        </member>
        <member name="T:Godot.HScrollBar">
            <summary>
            <para>Horizontal scroll bar. See <see cref="T:Godot.ScrollBar"/>. This one goes from left (min) to right (max).</para>
            </summary>
        </member>
        <member name="T:Godot.HSeparator">
            <summary>
            <para>Horizontal separator. See <see cref="T:Godot.Separator"/>. It is used to separate objects vertically, though (but it looks horizontal!).</para>
            </summary>
        </member>
        <member name="T:Godot.HSlider">
            <summary>
            <para>Horizontal slider. See <see cref="T:Godot.Slider"/>. This one goes from left (min) to right (max).</para>
            </summary>
        </member>
        <member name="T:Godot.HSplitContainer">
            <summary>
            <para>Horizontal split container. See <see cref="T:Godot.SplitContainer"/>. This goes from left to right.</para>
            </summary>
        </member>
        <member name="T:Godot.HTTPClient">
            <summary>
            <para>Hyper-text transfer protocol client (sometimes called "User Agent"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases.</para>
            <para>Note that this client only needs to connect to a host once (see <see cref="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)"/>) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See <see cref="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)"/> for a full example and to get started.</para>
            <para>A <c>HTTPClient</c> should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. "try again, but over here"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.</para>
            <para>For more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Disconnected">
            <summary>
            <para>Status: Disconnected from the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Resolving">
            <summary>
            <para>Status: Currently resolving the hostname for the given URL into an IP.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.CantResolve">
            <summary>
            <para>Status: DNS failure: Can't resolve the hostname for the given URL.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Connecting">
            <summary>
            <para>Status: Currently connecting to server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.CantConnect">
            <summary>
            <para>Status: Can't connect to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Connected">
            <summary>
            <para>Status: Connection established.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Requesting">
            <summary>
            <para>Status: Currently sending request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Body">
            <summary>
            <para>Status: HTTP body received.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.ConnectionError">
            <summary>
            <para>Status: Error in HTTP connection.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.SslHandshakeError">
            <summary>
            <para>Status: Error in SSL handshake.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Get">
            <summary>
            <para>HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Head">
            <summary>
            <para>HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Post">
            <summary>
            <para>HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Put">
            <summary>
            <para>HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of <c>POST</c> as "create or update" and <c>PUT</c> as "update", although many services tend to not make a clear distinction or change their meaning).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Delete">
            <summary>
            <para>HTTP DELETE method. The DELETE method requests to delete the specified resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Options">
            <summary>
            <para>HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Trace">
            <summary>
            <para>HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Connect">
            <summary>
            <para>HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Patch">
            <summary>
            <para>HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Max">
            <summary>
            <para>Marker for end of <c>METHOD_*</c> enum. Not used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Continue">
            <summary>
            <para>HTTP status code <c>100 Continue</c>. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SwitchingProtocols">
            <summary>
            <para>HTTP status code <c>101 Switching Protocol</c>. Sent in response to an <c>Upgrade</c> request header by the client. Indicates the protocol the server is switching to.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Processing">
            <summary>
            <para>HTTP status code <c>102 Processing</c> (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Ok">
            <summary>
            <para>HTTP status code <c>200 OK</c>. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Created">
            <summary>
            <para>HTTP status code <c>201 Created</c>. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Accepted">
            <summary>
            <para>HTTP status code <c>202 Accepted</c>. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NonAuthoritativeInformation">
            <summary>
            <para>HTTP status code <c>203 Non-Authoritative Information</c>. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NoContent">
            <summary>
            <para>HTTP status code <c>204 No Content</c>. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ResetContent">
            <summary>
            <para>HTTP status code <c>205 Reset Content</c>. The server has fulfilled the request and desires that the client resets the "document view" that caused the request to be sent to its original state as received from the origin server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PartialContent">
            <summary>
            <para>HTTP status code <c>206 Partial Content</c>. This response code is used because of a range header sent by the client to separate download into multiple streams.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MultiStatus">
            <summary>
            <para>HTTP status code <c>207 Multi-Status</c> (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.AlreadyReported">
            <summary>
            <para>HTTP status code <c>208 Already Reported</c> (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ImUsed">
            <summary>
            <para>HTTP status code <c>226 IM Used</c> (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MultipleChoices">
            <summary>
            <para>HTTP status code <c>300 Multiple Choice</c>. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MovedPermanently">
            <summary>
            <para>HTTP status code <c>301 Moved Permanently</c>. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Found">
            <summary>
            <para>HTTP status code <c>302 Found</c>. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SeeOther">
            <summary>
            <para>HTTP status code <c>303 See Other</c>. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotModified">
            <summary>
            <para>HTTP status code <c>304 Not Modified</c>. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to false.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UseProxy">
            <summary>
            <para>HTTP status code <c>305 Use Proxy</c>. Deprecated. Do not use.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SwitchProxy">
            <summary>
            <para>HTTP status code <c>306 Switch Proxy</c>. Deprecated. Do not use.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.TemporaryRedirect">
            <summary>
            <para>HTTP status code <c>307 Temporary Redirect</c>. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PermanentRedirect">
            <summary>
            <para>HTTP status code <c>308 Permanent Redirect</c>. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.BadRequest">
            <summary>
            <para>HTTP status code <c>400 Bad Request</c>. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Unauthorized">
            <summary>
            <para>HTTP status code <c>401 Unauthorized</c>. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PaymentRequired">
            <summary>
            <para>HTTP status code <c>402 Payment Required</c>. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Forbidden">
            <summary>
            <para>HTTP status code <c>403 Forbidden</c>. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike <c>401</c>, the client's identity is known to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotFound">
            <summary>
            <para>HTTP status code <c>404 Not Found</c>. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MethodNotAllowed">
            <summary>
            <para>HTTP status code <c>405 Method Not Allowed</c>. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotAcceptable">
            <summary>
            <para>HTTP status code <c>406 Not Acceptable</c>. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ProxyAuthenticationRequired">
            <summary>
            <para>HTTP status code <c>407 Proxy Authentication Required</c>. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestTimeout">
            <summary>
            <para>HTTP status code <c>408 Request Timeout</c>. The server did not receive a complete request message within the time that it was prepared to wait.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Conflict">
            <summary>
            <para>HTTP status code <c>409 Conflict</c>. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Gone">
            <summary>
            <para>HTTP status code <c>410 Gone</c>. The target resource is no longer available at the origin server and this condition is likely permanent.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.LengthRequired">
            <summary>
            <para>HTTP status code <c>411 Length Required</c>. The server refuses to accept the request without a defined Content-Length header.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PreconditionFailed">
            <summary>
            <para>HTTP status code <c>412 Precondition Failed</c>. One or more conditions given in the request header fields evaluated to false when tested on the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestEntityTooLarge">
            <summary>
            <para>HTTP status code <c>413 Entity Too Large</c>. The server is refusing to process a request because the request payload is larger than the server is willing or able to process.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestUriTooLong">
            <summary>
            <para>HTTP status code <c>414 Request-URI Too Long</c>. The server is refusing to service the request because the request-target is longer than the server is willing to interpret.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnsupportedMediaType">
            <summary>
            <para>HTTP status code <c>415 Unsupported Media Type</c>. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestedRangeNotSatisfiable">
            <summary>
            <para>HTTP status code <c>416 Requested Range Not Satisfiable</c>. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ExpectationFailed">
            <summary>
            <para>HTTP status code <c>417 Expectation Failed</c>. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ImATeapot">
            <summary>
            <para>HTTP status code <c>418 I'm A Teapot</c>. Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MisdirectedRequest">
            <summary>
            <para>HTTP status code <c>421 Misdirected Request</c>. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnprocessableEntity">
            <summary>
            <para>HTTP status code <c>422 Unprocessable Entity</c> (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Locked">
            <summary>
            <para>HTTP status code <c>423 Locked</c> (WebDAV). The source or destination resource of a method is locked.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.FailedDependency">
            <summary>
            <para>HTTP status code <c>424 Failed Dependency</c> (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UpgradeRequired">
            <summary>
            <para>HTTP status code <c>426 Upgrade Required</c>. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PreconditionRequired">
            <summary>
            <para>HTTP status code <c>428 Precondition Required</c>. The origin server requires the request to be conditional.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.TooManyRequests">
            <summary>
            <para>HTTP status code <c>429 Too Many Requests</c>. The user has sent too many requests in a given amount of time (see "rate limiting"). Back off and increase time between requests or try again later.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestHeaderFieldsTooLarge">
            <summary>
            <para>HTTP status code <c>431 Request Header Fields Too Large</c>. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnavailableForLegalReasons">
            <summary>
            <para>HTTP status code <c>451 Response Unavailable For Legal Reasons</c>. The server is denying access to the resource as a consequence of a legal demand.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.InternalServerError">
            <summary>
            <para>HTTP status code <c>500 Internal Server Error</c>. The server encountered an unexpected condition that prevented it from fulfilling the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotImplemented">
            <summary>
            <para>HTTP status code <c>501 Not Implemented</c>. The server does not support the functionality required to fulfill the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.BadGateway">
            <summary>
            <para>HTTP status code <c>502 Bad Gateway</c>. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ServiceUnavailable">
            <summary>
            <para>HTTP status code <c>503 Service Unavailable</c>. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.GatewayTimeout">
            <summary>
            <para>HTTP status code <c>504 Gateway Timeout</c>. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.HttpVersionNotSupported">
            <summary>
            <para>HTTP status code <c>505 HTTP Version Not Supported</c>. The server does not support, or refuses to support, the major version of HTTP that was used in the request message.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.VariantAlsoNegotiates">
            <summary>
            <para>HTTP status code <c>506 Variant Also Negotiates</c>. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.InsufficientStorage">
            <summary>
            <para>HTTP status code <c>507 Insufficient Storage</c>. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.LoopDetected">
            <summary>
            <para>HTTP status code <c>508 Loop Detected</c>. The server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". This status indicates that the entire operation failed.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotExtended">
            <summary>
            <para>HTTP status code <c>510 Not Extended</c>. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NetworkAuthRequired">
            <summary>
            <para>HTTP status code <c>511 Network Authentication Required</c>. The client needs to authenticate to gain network access.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.BlockingModeEnabled">
            <summary>
            <para>If <c>true</c>, execution will block until all data is read from the response.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.Connection">
            <summary>
            <para>The connection to use for this client.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Connect to a host. This needs to be done before any requests are sent.</para>
            <para>The host should not have http:// prepended but will strip the protocol identifier if provided.</para>
            <para>If no <c>port</c> is specified (or <c>-1</c> is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if <c>use_ssl</c> is enabled).</para>
            <para><c>verify_host</c> will check the SSL identity of the host if set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.RequestRaw(Godot.HTTPClient.Method,System.String,System.String[],System.Byte[])">
            <summary>
            <para>Sends a raw request to the connected host. The URL parameter is just the part after the host, so for <c>http://somehost.com/index.php</c>, it is <c>index.php</c>.</para>
            <para>Headers are HTTP request headers. For available HTTP methods, see <c>METHOD_*</c>.</para>
            <para>Sends the body data raw, as a byte array and does not encode it in any way.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)">
            <summary>
            <para>Sends a request to the connected host. The URL parameter is just the part after the host, so for <c>http://somehost.com/index.php</c>, it is <c>index.php</c>.</para>
            <para>Headers are HTTP request headers. For available HTTP methods, see <c>METHOD_*</c>.</para>
            <para>To create a POST request with query strings to push to the server, do:</para>
            <para><code>
            var fields = {"username" : "user", "password" : "pass"}
            var query_string = http_client.query_string_from_dict(fields)
            var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(query_string.length())]
            var result = http_client.request(http_client.METHOD_POST, "index.php", headers, query_string)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Close">
            <summary>
            <para>Closes the current connection, allowing reuse of this <c>HTTPClient</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.HasResponse">
            <summary>
            <para>If <c>true</c>, this <c>HTTPClient</c> has a response available.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.IsResponseChunked">
            <summary>
            <para>If <c>true</c>, this <c>HTTPClient</c> has a response that is chunked.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseCode">
            <summary>
            <para>Returns the response's HTTP status code.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeaders">
            <summary>
            <para>Returns the response headers.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeadersAsDictionary">
            <summary>
            <para>Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where "; " is used as separator.</para>
            <para>Structure: ("key":"value1; value2")</para>
            <para>Example: (content-length:12), (Content-Type:application/json; charset=UTF-8)</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseBodyLength">
            <summary>
            <para>Returns the response's body length.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ReadResponseBodyChunk">
            <summary>
            <para>Reads one chunk from the response.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.SetReadChunkSize(System.Int32)">
            <summary>
            <para>Sets the size of the buffer used and maximum bytes to read per iteration. see <see cref="M:Godot.HTTPClient.ReadResponseBodyChunk"/></para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetStatus">
            <summary>
            <para>Returns a STATUS_* enum constant. Need to call <see cref="M:Godot.HTTPClient.Poll"/> in order to get status updates.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Poll">
            <summary>
            <para>This needs to be called in order to have any request processed. Check results with <see cref="M:Godot.HTTPClient.GetStatus"/></para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.QueryStringFromDict(Godot.Collections.Dictionary)">
            <summary>
            <para>Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:</para>
            <para><code>
            var fields = {"username": "user", "password": "pass"}
            String query_string = http_client.query_string_from_dict(fields)
            # returns: "username=user&amp;password=pass"
            </code></para>
            <para>Furthermore, if a key has a null value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.</para>
            <para><code>
            var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}
            String query_string = http_client.query_string_from_dict(fields)
            # returns: "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.HTTPRequest">
            <summary>
            <para>A node with the ability to send HTTP requests. Uses <see cref="T:Godot.HTTPClient"/> internally.</para>
            <para>Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.Success">
            <summary>
            <para>Request successful.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.ChunkedBodySizeMismatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.CantConnect">
            <summary>
            <para>Request failed while connecting.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.CantResolve">
            <summary>
            <para>Request failed while resolving.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.ConnectionError">
            <summary>
            <para>Request failed due to connection (read/write) error.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.SslHandshakeError">
            <summary>
            <para>Request failed on SSL handshake.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.NoResponse">
            <summary>
            <para>Request does not have a response (yet).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.BodySizeLimitExceeded">
            <summary>
            <para>Request exceeded its maximum size limit, see <see cref="P:Godot.HTTPRequest.BodySizeLimit"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.RequestFailed">
            <summary>
            <para>Request failed. (Unused)</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.DownloadFileCantOpen">
            <summary>
            <para>HTTPRequest couldn't open the download file.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.DownloadFileWriteError">
            <summary>
            <para>HTTPRequest couldn't write to the download file.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.RedirectLimitReached">
            <summary>
            <para>Request reached its maximum redirect limit, see <see cref="P:Godot.HTTPRequest.MaxRedirects"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.DownloadFile">
            <summary>
            <para>The file to download into. Will output any received file into it.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.UseThreads">
            <summary>
            <para>If <c>true</c>, multithreading is used to improve performance.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.BodySizeLimit">
            <summary>
            <para>Maximum allowed size for response bodies.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.MaxRedirects">
            <summary>
            <para>Maximum number of allowed redirects.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.Request(System.String,System.String[],System.Boolean,Godot.HTTPClient.Method,System.String)">
            <summary>
            <para>Creates request on the underlying <see cref="T:Godot.HTTPClient"/>. If there is no configuration errors, it tries to connect using <see cref="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)"/> and passes parameters onto <see cref="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)"/>.</para>
            <para>Returns <c>OK</c> if request is successfully created. (Does not imply that the server has responded), <c>ERR_UNCONFIGURED</c> if not in the tree, <c>ERR_BUSY</c> if still processing previous request, <c>ERR_INVALID_PARAMETER</c> if given string is not a valid URL format, or <c>ERR_CANT_CONNECT</c> if not using thread and the <see cref="T:Godot.HTTPClient"/> cannot connect to host.</para>
            <param name="customHeaders">If the parameter is null, then the default value is new string[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.CancelRequest">
            <summary>
            <para>Cancels the current request.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetHttpClientStatus">
            <summary>
            <para>Returns the current status of the underlying <see cref="T:Godot.HTTPClient"/>. See <c>STATUS_*</c> enum on <see cref="T:Godot.HTTPClient"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetDownloadedBytes">
            <summary>
            <para>Returns the amount of bytes this HTTPRequest downloaded.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetBodySize">
            <summary>
            <para>Returns the response body length.</para>
            </summary>
        </member>
        <member name="T:Godot.Image">
            <summary>
            <para>Native image datatype. Contains image data, which can be converted to a <see cref="T:Godot.Texture"/>, and several functions to interact with it. The maximum width and height for an <c>Image</c> are [constant MAX_WIDTH] and [constant MAX_HEIGHT].</para>
            </summary>
        </member>
        <member name="F:Godot.Image.MaxWidth">
            <summary>
            <para>The maximal width allowed for <c>Image</c> resources.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.MaxHeight">
            <summary>
            <para>The maximal height allowed for <c>Image</c> resources.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.Blend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Generic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Srgb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Nearest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Bilinear">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Cubic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Trilinear">
            <summary>
            <para>Performs bilinear separately on the two most suited mipmap levels, then linearly interpolates between them.</para>
            <para>It's slower than <c>INTERPOLATE_BILINEAR</c>, but produces higher quality results, with much less aliasing artifacts.</para>
            <para>If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image. (Note that if you intend to scale multiple copies of the original image, it's better to call <c>generate_mipmaps</c> on it in advance, to avoid wasting processing power in generating them again and again.)</para>
            <para>On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.S3tc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Pvrtc2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Pvrtc4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Etc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Etc2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Format.L8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Format.La8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Image.Format.R8">
            <summary>
            <para>OpenGL texture format RED with a single component and a bitdepth of 8.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rg8">
            <summary>
            <para>OpenGL texture format RG with two components and a bitdepth of 8 for each.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgb8">
            <summary>
            <para>OpenGL texture format RGB with three components, each with a bitdepth of 8. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgba8">
            <summary>
            <para>OpenGL texture format RGBA with four components, each with a bitdepth of 8. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgba4444">
            <summary>
            <para>OpenGL texture format RGBA with four components, each with a bitdepth of 4.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgba5551">
            <summary>
            <para>OpenGL texture format GL_RGB5_A1 where 5 bits of depth for each component of RGB and one bit for alpha.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rf">
            <summary>
            <para>OpenGL texture format GL_R32F where there's one component, a 32-bit floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgf">
            <summary>
            <para>OpenGL texture format GL_RG32F where there are two components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbf">
            <summary>
            <para>OpenGL texture format GL_RGB32F where there are three components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbaf">
            <summary>
            <para>OpenGL texture format GL_RGBA32F where there are four components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rh">
            <summary>
            <para>OpenGL texture format GL_R32F where there's one component, a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgh">
            <summary>
            <para>OpenGL texture format GL_RG32F where there's two components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbh">
            <summary>
            <para>OpenGL texture format GL_RGB32F where there's three components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbah">
            <summary>
            <para>OpenGL texture format GL_RGBA32F where there's four components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbe9995">
            <summary>
            <para>A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single exponent.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt1">
            <summary>
            <para>The S3TC texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha. More information can be found at https://www.khronos.org/opengl/wiki/S3_Texture_Compression. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt3">
            <summary>
            <para>The S3TC texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt5">
            <summary>
            <para>The S3TC texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparency gradients than DXT3. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.RgtcR">
            <summary>
            <para>Texture format that uses Red Green Texture Compression, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. More information can be found here https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.RgtcRg">
            <summary>
            <para>Texture format that uses Red Green Texture Compression, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgba">
            <summary>
            <para>Texture format that uses BPTC compression with unsigned normalized RGBA components. More information can be found at https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgbf">
            <summary>
            <para>Texture format that uses BPTC compression with signed floating-point RGB components.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgbfu">
            <summary>
            <para>Texture format that uses BPTC compression with unsigned floating-point RGB components.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc2">
            <summary>
            <para>Texture format used on PowerVR-supported mobile platforms, uses 2 bit color depth with no alpha. More information on PVRTC can be found here https://en.wikipedia.org/wiki/PVRTC. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc2a">
            <summary>
            <para>Same as PVRTC2, but with an alpha component.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc4">
            <summary>
            <para>Similar to PVRTC2, but with 4 bit color depth and no alpha.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc4a">
            <summary>
            <para>Same as PVRTC4, but with an alpha component.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc">
            <summary>
            <para>Ericsson Texture Compression format, also referred to as 'ETC1', and is part of the OpenGL ES graphics standard. An overview of the format is given at https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2R11">
            <summary>
            <para>Ericsson Texture Compression format 2 variant R11_EAC, which provides one channel of unsigned data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2R11s">
            <summary>
            <para>Ericsson Texture Compression format 2 variant SIGNED_R11_EAC, which provides one channel of signed data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rg11">
            <summary>
            <para>Ericsson Texture Compression format 2 variant RG11_EAC, which provides two channels of unsigned data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rg11s">
            <summary>
            <para>Ericsson Texture Compression format 2 variant SIGNED_RG11_EAC, which provides two channels of signed data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgb8">
            <summary>
            <para>Ericsson Texture Compression format 2 variant RGB8, which is a followup of ETC1 and compresses RGB888 data. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgba8">
            <summary>
            <para>Ericsson Texture Compression format 2 variant RGBA8, which compresses RGBA8888 data with full alpha support. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgb8a1">
            <summary>
            <para>Ericsson Texture Compression format 2 variant RGB8_PUNCHTHROUGH_ALPHA1, which compresses RGBA data to make alpha either fully transparent or fully opaque. Note that when creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Image.Data">
            <summary>
            <para>Holds all of the image's color data in a given format. See <c>FORMAT_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetWidth">
            <summary>
            <para>Returns the image's width.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetHeight">
            <summary>
            <para>Returns the image's height.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetSize">
            <summary>
            <para>Returns the image's size (width and height).</para>
            </summary>
        </member>
        <member name="M:Godot.Image.HasMipmaps">
            <summary>
            <para>Returns <c>true</c> if the image has generated mipmaps.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetFormat">
            <summary>
            <para>Returns the image's format. See <c>FORMAT_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetData">
            <summary>
            <para>Returns the image's raw data.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Convert(Godot.Image.Format)">
            <summary>
            <para>Converts the image's format. See <c>FORMAT_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetMipmapOffset(System.Int32)">
            <summary>
            <para>Returns the offset where the image's mipmap with index <c>mipmap</c> is stored in the <c>data</c> dictionary.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ResizeToPo2(System.Boolean)">
            <summary>
            <para>Resizes the image to the nearest power of 2 for the width and height. If <c>square</c> is <c>true</c> then set width and height to be the same.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Resize(System.Int32,System.Int32,Godot.Image.Interpolation)">
            <summary>
            <para>Resizes the image to the given <c>width</c> and <c>height</c>. New pixels are calculated using <c>interpolation</c>. See <c>interpolation</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ShrinkX2">
            <summary>
            <para>Shrinks the image by a factor of 2.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ExpandX2Hq2x">
            <summary>
            <para>Stretches the image and enlarges it by a factor of 2. No interpolation is done.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Crop(System.Int32,System.Int32)">
            <summary>
            <para>Crops the image to the given <c>width</c> and <c>height</c>. If the specified size is larger than the current size, the extra area is filled with black pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FlipX">
            <summary>
            <para>Flips the image horizontally.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FlipY">
            <summary>
            <para>Flips the image vertically.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GenerateMipmaps(System.Boolean)">
            <summary>
            <para>Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ClearMipmaps">
            <summary>
            <para>Removes the image's mipmaps.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Create(System.Int32,System.Int32,System.Boolean,Godot.Image.Format)">
            <summary>
            <para>Creates an empty image of given size and format. See <c>FORMAT_*</c> constants. If <c>use_mipmaps</c> is true then generate mipmaps for this image. See the <c>generate_mipmaps</c> method.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.CreateFromData(System.Int32,System.Int32,System.Boolean,Godot.Image.Format,System.Byte[])">
            <summary>
            <para>Creates a new image of given size and format. See <c>FORMAT_*</c> constants. Fills the image with the given raw data. If <c>use_mipmaps</c> is true then generate mipmaps for this image. See the <c>generate_mipmaps</c> method.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsEmpty">
            <summary>
            <para>Returns <c>true</c> if the image has no data.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Load(System.String)">
            <summary>
            <para>Loads an image from file <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SavePng(System.String)">
            <summary>
            <para>Saves the image as a PNG file to <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.DetectAlpha">
            <summary>
            <para>Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are below a certain threshold or the maximum value. Returns ALPHA_NONE if no data for alpha values is found.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsInvisible">
            <summary>
            <para>Returns <c>true</c> if all the image's pixels have an alpha value of 0. Returns <c>false</c> if any pixel has an alpha value higher than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Compress(Godot.Image.CompressMode,Godot.Image.CompressSource,System.Single)">
            <summary>
            <para>Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See <c>COMPRESS_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Decompress">
            <summary>
            <para>Decompresses the image if it is compressed. Returns an error if decompress function is not available.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsCompressed">
            <summary>
            <para>Returns <c>true</c> if the image is compressed.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FixAlphaEdges">
            <summary>
            <para>Blends low-alpha pixels with nearby pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.PremultiplyAlpha">
            <summary>
            <para>Multiplies color values with alpha values. Resulting color values for a pixel are <c>(color * alpha)/256</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SrgbToLinear">
            <summary>
            <para>Converts the raw data from the sRGB colorspace to a linear scale.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.NormalmapToXy">
            <summary>
            <para>Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.RgbeToSrgb">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Image.BumpmapToNormalmap(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Copies <c>src_rect</c> from <c>src</c> image to this image at coordinates <c>dst</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Blits <c>src_rect</c> area from <c>src</c> image to this image at the coordinates given by <c>dst</c>. <c>src</c> pixel is copied onto <c>dst</c> if the corresponding <c>mask</c> pixel's alpha value is not 0. <c>src</c> image and <c>mask</c> image must have the same size (width and height) but they can have different formats.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Alpha-blends <c>src_rect</c> from <c>src</c> image to this image at coordinates <c>dest</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Alpha-blends <c>src_rect</c> from <c>src</c> image to this image using <c>mask</c> image at coordinates <c>dst</c>. Alpha channels are required for both <c>src</c> and <c>mask</c>. <c>dst</c> pixels and <c>src</c> pixels will blend if the corresponding mask pixel's alpha value is not 0. <c>src</c> image and <c>mask</c> image must have the same size (width and height) but they can have different formats.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Fill(Godot.Color)">
            <summary>
            <para>Fills the image with a given <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetUsedRect">
            <summary>
            <para>Returns a <see cref="T:Godot.Rect2"/> enclosing the visible portion of the image.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetRect(Godot.Rect2)">
            <summary>
            <para>Returns a new image that is a copy of the image's area specified with <c>rect</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.CopyFrom(Godot.Image)">
            <summary>
            <para>Copies <c>src</c> image to this image.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Lock">
            <summary>
            <para>Locks the data for writing access.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Unlock">
            <summary>
            <para>Unlocks the data and prevents changes.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetPixelv(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            <para>Returns the color of the pixel at <c>(x, y)</c> if the image is locked. If the image is unlocked it always returns a <see cref="T:Godot.Color"/> with the value <c>(0, 0, 0, 1.0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SetPixelv(Godot.Vector2,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Image.SetPixel(System.Int32,System.Int32,Godot.Color)">
            <summary>
            <para>Sets the <see cref="T:Godot.Color"/> of the pixel at <c>(x, y)</c> if the image is locked. Example:</para>
            <para><code>
            var img = Image.new()
            img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
            img.lock()
            img.set_pixel(x, y, color) # Works
            img.unlock()
            img.set_pixel(x, y, color) # Does not have an effect
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadPngFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a PNG file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadJpgFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a JPEG file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadWebpFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a WebP file.</para>
            </summary>
        </member>
        <member name="T:Godot.ImageTexture">
            <summary>
            <para>A <see cref="T:Godot.Texture"/> based on an <see cref="T:Godot.Image"/>. Can be created from an <see cref="T:Godot.Image"/> with <see cref="M:Godot.ImageTexture.CreateFromImage(Godot.Image,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ImageTexture.StorageEnum.Raw">
            <summary>
            <para><see cref="T:Godot.Image"/> data is stored raw and unaltered.</para>
            </summary>
        </member>
        <member name="F:Godot.ImageTexture.StorageEnum.CompressLossy">
            <summary>
            <para><see cref="T:Godot.Image"/> data is compressed with a lossy algorithm. You can set the storage quality with <see cref="P:Godot.ImageTexture.LossyQuality"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ImageTexture.StorageEnum.CompressLossless">
            <summary>
            <para><see cref="T:Godot.Image"/> data is compressed with a lossless algorithm.</para>
            </summary>
        </member>
        <member name="P:Godot.ImageTexture.Storage">
            <summary>
            <para>The storage type (raw, lossy, or compressed).</para>
            </summary>
        </member>
        <member name="P:Godot.ImageTexture.LossyQuality">
            <summary>
            <para>The storage quality for <c>STORAGE_COMPRESS_LOSSY</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.Create(System.Int32,System.Int32,Godot.Image.Format,System.Int32)">
            <summary>
            <para>Create a new <c>ImageTexture</c> with <c>width</c> and <c>height</c>.</para>
            <para><c>format</c> is a value from <see cref="T:Godot.Image.Format"/>, <c>flags</c> is any combination of <see cref="T:Godot.Texture.FlagsEnum"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.CreateFromImage(Godot.Image,System.Int32)">
            <summary>
            <para>Create a new <c>ImageTexture</c> from an <see cref="T:Godot.Image"/> with <c>flags</c> from <see cref="T:Godot.Texture.FlagsEnum"/>. An sRGB to linear color space conversion can take place, according to <see cref="T:Godot.Image.Format"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.GetFormat">
            <summary>
            <para>Return the format of the <c>ImageTexture</c>, one of <see cref="T:Godot.Image.Format"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.Load(System.String)">
            <summary>
            <para>Load an <c>ImageTexture</c> from a file path.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.SetData(Godot.Image)">
            <summary>
            <para>Set the <see cref="T:Godot.Image"/> of this <c>ImageTexture</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.SetSizeOverride(Godot.Vector2)">
            <summary>
            <para>Resizes the <c>ImageTexture</c> to the specified dimensions.</para>
            </summary>
        </member>
        <member name="T:Godot.ImmediateGeometry">
            <summary>
            <para>Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.Begin(Godot.Mesh.PrimitiveType,Godot.Texture)">
            <summary>
            <para>Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.</para>
            <para>For the type of primitive, use the <see cref="T:Godot.Mesh"/>.PRIMITIVE_* enumerations.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetNormal(Godot.Vector3)">
            <summary>
            <para>The next vertex's normal.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetTangent(Godot.Plane)">
            <summary>
            <para>The next vertex's tangent (and binormal facing).</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetColor(Godot.Color)">
            <summary>
            <para>The current drawing color.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetUv(Godot.Vector2)">
            <summary>
            <para>The next vertex's UV.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetUv2(Godot.Vector2)">
            <summary>
            <para>The next vertex's second layer UV.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.AddVertex(Godot.Vector3)">
            <summary>
            <para>Adds a vertex with the currently set color/uv/etc.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.AddSphere(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Simple helper to draw a uvsphere, with given latitudes, longitude and radius.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.End">
            <summary>
            <para>Ends a drawing context and displays the results.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.Clear">
            <summary>
            <para>Clears everything that was drawn using begin/end.</para>
            </summary>
        </member>
        <member name="T:Godot.Input">
            <summary>
            <para>A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with <see cref="T:Godot.InputMap"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Visible">
            <summary>
            <para>Makes the mouse cursor visible if it is hidden.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Hidden">
            <summary>
            <para>Makes the mouse cursor hidden if it is visible.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Captured">
            <summary>
            <para>Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Confined">
            <summary>
            <para>Makes the mouse cursor visible but confines it to the game window.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Arrow">
            <summary>
            <para>Arrow cursor. Standard, default pointing cursor.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Ibeam">
            <summary>
            <para>I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.PointingHand">
            <summary>
            <para>Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Cross">
            <summary>
            <para>Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Wait">
            <summary>
            <para>Wait cursor. Indicates that the application is busy performing an operation.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Busy">
            <summary>
            <para>Busy cursor. See <c>CURSOR_WAIT</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Drag">
            <summary>
            <para>Drag cursor. Usually displayed when dragging something.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.CanDrop">
            <summary>
            <para>Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Forbidden">
            <summary>
            <para>Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Vsize">
            <summary>
            <para>Vertical resize mouse cursor. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Hsize">
            <summary>
            <para>Horizontal resize mouse cursor. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Bdiagsize">
            <summary>
            <para>Window resize mouse cursor. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Fdiagsize">
            <summary>
            <para>Window resize mouse cursor. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of <c>CURSOR_BDIAGSIZE</c>. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Move">
            <summary>
            <para>Move cursor. Indicates that something can be moved.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Vsplit">
            <summary>
            <para>Vertical split mouse cursor. On Windows, it's the same as <c>CURSOR_VSIZE</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Hsplit">
            <summary>
            <para>Horizontal split mouse cursor. On Windows, it's the same as <c>CURSOR_HSIZE</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Help">
            <summary>
            <para>Help cursor. Usually a question mark.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsKeyPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the key. You can pass <c>KEY_*</c>, which are pre-defined constants listed in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsMouseButtonPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the mouse button. You can pass <c>BUTTON_*</c>, which are pre-defined constants listed in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyButtonPressed(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the joypad button. (see <c>JOY_*</c> constants in <c>@GlobalScope</c>)</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionPressed(System.String)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the action event.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustPressed(System.String)">
            <summary>
            <para>Returns <c>true</c> when the user starts pressing the action event, meaning it's true only on the frame that the user pressed down the button.</para>
            <para>This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustReleased(System.String)">
            <summary>
            <para>Returns <c>true</c> when the user stops pressing the action event, meaning it's true only on the frame that the user released the button.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetActionStrength(System.String)">
            <summary>
            <para>Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis as the keyboard, the value returned will be 0 or 1.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.AddJoyMapping(System.String,System.Boolean)">
            <summary>
            <para>Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.RemoveJoyMapping(System.String)">
            <summary>
            <para>Removes all mappings from the internal db that match the given uid.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.JoyConnectionChanged(System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyKnown(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in the <c>JOY_*</c> constants (see <c>@GlobalScope</c>). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxis(System.Int32,System.Int32)">
            <summary>
            <para>Returns the current value of the joypad axis at given index (see <c>JOY_*</c> constants in <c>@GlobalScope</c>)</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyName(System.Int32)">
            <summary>
            <para>Returns the name of the joypad at the specified device index</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyGuid(System.Int32)">
            <summary>
            <para>Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns "Default Gamepad" otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetConnectedJoypads">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> containing the device IDs of all currently connected joypads.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationStrength(System.Int32)">
            <summary>
            <para>Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationDuration(System.Int32)">
            <summary>
            <para>Returns the duration of the current vibration effect in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyButtonString(System.Int32)">
            <summary>
            <para>Receives a <c>JOY_BUTTON_*</c> Enum and returns its equivalent name as a string.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyButtonIndexFromString(System.String)">
            <summary>
            <para>Returns the index of the provided button name.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxisString(System.Int32)">
            <summary>
            <para>Receives a <c>JOY_AXIS_*</c> Enum and returns its equivalent name as a string.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxisIndexFromString(System.String)">
            <summary>
            <para>Returns the index of the provided axis name.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.StartJoyVibration(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).</para>
            <para>Note that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.StopJoyVibration(System.Int32)">
            <summary>
            <para>Stops the vibration of the joypad.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetGravity">
            <summary>
            <para>If the device has an accelerometer, this will return the gravity. Otherwise, it returns an empty <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetAccelerometer">
            <summary>
            <para>If the device has an accelerometer, this will return the acceleration. Otherwise, it returns an empty <see cref="T:Godot.Vector3"/>.</para>
            <para>Note this method returns an empty <see cref="T:Godot.Vector3"/> when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMagnetometer">
            <summary>
            <para>If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetGyroscope">
            <summary>
            <para>If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis. Otherwise, it returns an empty <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetLastMouseSpeed">
            <summary>
            <para>Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseButtonMask">
            <summary>
            <para>Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetMouseMode(Godot.Input.MouseMode)">
            <summary>
            <para>Set the mouse mode. See the constants for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseMode">
            <summary>
            <para>Return the mouse mode. See the constants for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.WarpMousePosition(Godot.Vector2)">
            <summary>
            <para>Sets the mouse position to the specified vector.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.ActionPress(System.String,System.Single)">
            <summary>
            <para>This will simulate pressing the specified action.</para>
            <para>The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.ActionRelease(System.String)">
            <summary>
            <para>If the specified action is already pressed, this will release it.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetDefaultCursorShape(Godot.Input.CursorShape)">
            <summary>
            <para>Sets the default cursor shape to be used in the viewport instead of <c>CURSOR_ARROW</c>.</para>
            <para>Note that if you want to change the default cursor shape for <see cref="T:Godot.Control"/>'s nodes, use <see cref="P:Godot.Control.MouseDefaultCursorShape"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetCustomMouseCursor(Godot.Resource,Godot.Input.CursorShape,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing <c>null</c> to the image parameter resets to the system cursor. See enum <c>CURSOR_*</c> for the list of shapes.</para>
            <para><c>image</c>'s size must be lower than 256x256.</para>
            <para><c>hotspot</c> must be within <c>image</c>'s size.</para>
            <param name="hotspot">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Input.ParseInputEvent(Godot.InputEvent)">
            <summary>
            <para>Feeds an <see cref="T:Godot.InputEvent"/> to the game. Can be used to artificially trigger input events from code.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetUseAccumulatedInput(System.Boolean)">
            <summary>
            <para>Whether to accumulate similar input events sent by the operating system. Defaults to <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEvent">
            <summary>
            <para>Base class of all sort of input event. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEvent.Device">
            <summary>
            <para>The event's device ID.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsAction(System.String)">
            <summary>
            <para>Returns <c>true</c> if this input event matches a pre-defined action of any type.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionPressed(System.String)">
            <summary>
            <para>Returns <c>true</c> if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types <c>MOUSE_MOTION</c>, <c>SCREEN_DRAG</c> or <c>NONE</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionReleased(System.String)">
            <summary>
            <para>Returns <c>true</c> if the given action is released (i.e. not pressed). Not relevant for the event types <c>MOUSE_MOTION</c>, <c>SCREEN_DRAG</c> or <c>NONE</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.GetActionStrength(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsPressed">
            <summary>
            <para>Returns <c>true</c> if this input event is pressed. Not relevant for the event types <c>MOUSE_MOTION</c>, <c>SCREEN_DRAG</c> or <c>NONE</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsEcho">
            <summary>
            <para>Returns <c>true</c> if this input event is an echo event (only for events of type KEY).</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.AsText">
            <summary>
            <para>Returns a <see cref="T:System.String"/> representation of the event.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.ShortcutMatch(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionType">
            <summary>
            <para>Returns <c>true</c> if this input event's type is one of the <c>InputEvent</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.Accumulate(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InputEvent.XformedBy(Godot.Transform2D,System.Nullable{Godot.Vector2})">
            <summary>
            
            <param name="localOfs">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="T:Godot.InputEventAction">
            <summary>
            <para>Contains a generic action which can be targeted from several type of inputs. Actions can be created from the project settings menu <c>Project &gt; Project Settings &gt; Input Map</c>. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Action">
            <summary>
            <para>The action's name. Actions are accessed via this <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Pressed">
            <summary>
            <para>If <c>true</c>, the action's state is pressed. If <c>false</c>, the action's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventGesture.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadButton">
            <summary>
            <para>Input event type for gamepad buttons. For joysticks see <see cref="T:Godot.InputEventJoypadMotion"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.ButtonIndex">
            <summary>
            <para>Button identifier. One of the <c>JOY_BUTTON_*</c> constants from <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressure">
            <summary>
            <para>Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from <c>0</c> to <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressed">
            <summary>
            <para>If <c>true</c>, the button's state is pressed. If <c>false</c>, the button's state is released.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadMotion">
            <summary>
            <para>Stores information about joystick motions. One <c>InputEventJoypadMotion</c> represents one axis at a time.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.Axis">
            <summary>
            <para>Axis identifier. Use one of the <c>JOY_AXIS_*</c> constants in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.AxisValue">
            <summary>
            <para>Current position of the joystick on the given axis. The value ranges from <c>-1.0</c> to <c>1.0</c>. A value of <c>0</c> means the axis is in its resting position.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventKey">
            <summary>
            <para>Stores key presses on the keyboard. Supports key presses, key releases and <see cref="P:Godot.InputEventKey.Echo"/> events.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Pressed">
            <summary>
            <para>If <c>true</c>, the key's state is pressed. If <c>false</c>, the key's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Scancode">
            <summary>
            <para>Key scancode, one of the <c>KEY_*</c> constants in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Unicode">
            <summary>
            <para>Key unicode identifier when relevant.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Echo">
            <summary>
            <para>If <c>true</c>, the key was already pressed before this event. It means the user is holding the key down.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEventKey.GetScancodeWithModifiers">
            <summary>
            <para>Returns the scancode combined with modifier keys such as <c>Shift</c> or <c>Alt</c>. See also <see cref="T:Godot.InputEventWithModifiers"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMagnifyGesture.Factor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Channel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Pitch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Velocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.Pressure">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.ControllerNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.InputEventMIDI.ControllerValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.InputEventMouse">
            <summary>
            <para>Stores general mouse events information.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.ButtonMask">
            <summary>
            <para>Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.Position">
            <summary>
            <para>Mouse local position relative to the <see cref="T:Godot.Viewport"/>. If used in <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> the position is relative to the current <see cref="T:Godot.Control"/> which is under the mouse.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.GlobalPosition">
            <summary>
            <para>Mouse position relative to the current <see cref="T:Godot.Viewport"/> when used in <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>, otherwise is at 0,0.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseButton">
            <summary>
            <para>Contains mouse click information. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Factor">
            <summary>
            <para>Magnitude. Amount (or delta) of the event. Used for scroll events, indicates scroll amount (vertically or horizontally). Only supported on some platforms, sensitivity varies by platform. May be 0 if not supported.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.ButtonIndex">
            <summary>
            <para>Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Pressed">
            <summary>
            <para>If <c>true</c>, the mouse button's state is pressed. If <c>false</c>, the mouse button's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Doubleclick">
            <summary>
            <para>If <c>true</c>, the mouse button's state is a double-click.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseMotion">
            <summary>
            <para>Contains mouse motion information. Supports relative, absolute positions and speed. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Relative">
            <summary>
            <para>Mouse position relative to the previous position (position at the last frame).</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Speed">
            <summary>
            <para>Mouse speed.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventPanGesture.Delta">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenDrag">
            <summary>
            <para>Contains screen drag information. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Index">
            <summary>
            <para>Drag event index in the case of a multi-drag event.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Position">
            <summary>
            <para>Drag position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Relative">
            <summary>
            <para>Drag position relative to its start position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Speed">
            <summary>
            <para>Drag speed.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenTouch">
            <summary>
            <para>Stores multi-touch press/release information. Supports touch press, touch release and <see cref="P:Godot.InputEventScreenTouch.Index"/> for multi-touch count and order.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Index">
            <summary>
            <para>Touch index in the case of a multi-touch event. One index = one finger.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Position">
            <summary>
            <para>Touch position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Pressed">
            <summary>
            <para>If <c>true</c>, the touch's state is pressed. If <c>false</c>, the touch's state is released.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventWithModifiers">
            <summary>
            <para>Contains keys events information with modifiers support like <c>SHIFT</c> or <c>ALT</c>. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Alt">
            <summary>
            <para>State of the Alt modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Shift">
            <summary>
            <para>State of the Shift modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Control">
            <summary>
            <para>State of the Ctrl modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Meta">
            <summary>
            <para>State of the Meta modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Command">
            <summary>
            <para>State of the Command modifier.</para>
            </summary>
        </member>
        <member name="T:Godot.InputMap">
            <summary>
            <para>Manages all <see cref="T:Godot.InputEventAction"/> which can be created/modified from the project settings menu <c>Project &gt; Project Settings &gt; Input Map</c> or in code with <see cref="M:Godot.InputMap.AddAction(System.String,System.Single)"/> and <see cref="M:Godot.InputMap.ActionAddEvent(System.String,Godot.InputEvent)"/>. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.HasAction(System.String)">
            <summary>
            <para>Returns <c>true</c> if the <c>InputMap</c> has a registered action with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.GetActions">
            <summary>
            <para>Returns an array of all actions in the <c>InputMap</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.AddAction(System.String,System.Single)">
            <summary>
            <para>Adds an empty action to the <c>InputMap</c> with a configurable <c>deadzone</c>.</para>
            <para>An <see cref="T:Godot.InputEvent"/> can then be added to this action with <see cref="M:Godot.InputMap.ActionAddEvent(System.String,Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.EraseAction(System.String)">
            <summary>
            <para>Removes an action from the <c>InputMap</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionSetDeadzone(System.String,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionAddEvent(System.String,Godot.InputEvent)">
            <summary>
            <para>Adds an <see cref="T:Godot.InputEvent"/> to an action. This <see cref="T:Godot.InputEvent"/> will trigger the action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionHasEvent(System.String,Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the action has the given <see cref="T:Godot.InputEvent"/> associated with it.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionEraseEvent(System.String,Godot.InputEvent)">
            <summary>
            <para>Removes an <see cref="T:Godot.InputEvent"/> from an action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionEraseEvents(System.String)">
            <summary>
            <para>Removes all events from an action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.GetActionList(System.String)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.InputEvent"/>s associated with a given action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.EventIsAction(Godot.InputEvent,System.String)">
            <summary>
            <para>Returns <c>true</c> if the given event is part of an existing action. This method ignores keyboard modifiers if the given <see cref="T:Godot.InputEvent"/> is not pressed (for proper release detection). See <see cref="M:Godot.InputMap.ActionHasEvent(System.String,Godot.InputEvent)"/> if you don't want this behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.LoadFromGlobals">
            <summary>
            <para>Clears all <see cref="T:Godot.InputEventAction"/> in the <c>InputMap</c> and load it anew from <see cref="T:Godot.ProjectSettings"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.InstancePlaceholder">
            <summary>
            <para>Turning on the option Load As Placeholder for an instanced scene in the editor causes it to be replaced by an InstancePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling <see cref="M:Godot.InstancePlaceholder.ReplaceByInstance(Godot.PackedScene)"/>. This is useful to avoid loading large scenes all at once by loading parts of it selectively.</para>
            <para>The InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.</para>
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.GetStoredValues(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.CreateInstance(System.Boolean,Godot.PackedScene)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.ReplaceByInstance(Godot.PackedScene)">
            <summary>
            <para>Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.</para>
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.GetInstancePath">
            <summary>
            <para>Retrieve the path to the <see cref="T:Godot.PackedScene"/> resource file that is loaded by default when calling <see cref="M:Godot.InstancePlaceholder.ReplaceByInstance(Godot.PackedScene)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.InterpolatedCamera">
            <summary>
            <para>InterpolatedCamera is a <see cref="T:Godot.Camera"/> which smoothly moves to match a target node's position and rotation.</para>
            <para>If it is not <see cref="P:Godot.InterpolatedCamera.Enabled"/> or does not have a valid target set, InterpolatedCamera acts like a normal Camera.</para>
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Target">
            <summary>
            <para>The target's <see cref="T:Godot.NodePath"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Speed">
            <summary>
            <para>How quickly the camera moves toward its target. Higher values will result in tighter camera motion.</para>
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Enabled">
            <summary>
            <para>If <c>true</c>, and a target is set, the camera will move automatically.</para>
            </summary>
        </member>
        <member name="M:Godot.InterpolatedCamera.SetTarget(Godot.Object)">
            <summary>
            <para>Sets the node to move toward and orient with.</para>
            </summary>
        </member>
        <member name="T:Godot.IP">
            <summary>
            <para>IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see <see cref="T:Godot.StreamPeerTCP"/> and <see cref="T:Godot.TCP_Server"/>). IP provides DNS hostname resolution support, both blocking and threaded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverMaxQueries">
            <summary>
            <para>Maximum number of concurrent DNS resolver queries allowed, <c>RESOLVER_INVALID_ID</c> is returned if exceeded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverInvalidId">
            <summary>
            <para>Invalid ID constant. Returned if <c>RESOLVER_MAX_QUERIES</c> is exceeded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.None">
            <summary>
            <para>DNS hostname resolver status: No status.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Waiting">
            <summary>
            <para>DNS hostname resolver status: Waiting.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Done">
            <summary>
            <para>DNS hostname resolver status: Done.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Error">
            <summary>
            <para>DNS hostname resolver status: Error.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.None">
            <summary>
            <para>Address type: None.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Ipv4">
            <summary>
            <para>Address type: Internet protocol version 4 (IPv4).</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Ipv6">
            <summary>
            <para>Address type: Internet protocol version 6 (IPv6).</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Any">
            <summary>
            <para>Address type: Any.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostname(System.String,Godot.IP.Type)">
            <summary>
            <para>Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as "ip_type".</para>
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostnameQueueItem(System.String,Godot.IP.Type)">
            <summary>
            <para>Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as "ip_type". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemStatus(System.Int32)">
            <summary>
            <para>Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue "id".</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemAddress(System.Int32)">
            <summary>
            <para>Returns a queued hostname's IP address, given its queue "id". Returns an empty string on error or if resolution hasn't happened yet (see <see cref="M:Godot.IP.GetResolveItemStatus(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.IP.EraseResolveItem(System.Int32)">
            <summary>
            <para>Removes a given item "id" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetLocalAddresses">
            <summary>
            <para>Returns all of the user's current IPv4 and IPv6 addresses as an array.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.ClearCache(System.String)">
            <summary>
            <para>Removes all of a "hostname"'s cached references. If no "hostname" is given then all cached IP addresses are removed.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList">
            <summary>
            <para>This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list.</para>
            <para>Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be 'activated' with a double click (or Enter key).</para>
            </summary>
        </member>
        <member name="F:Godot.ItemList.SelectModeEnum.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ItemList.SelectModeEnum.Multi">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ItemList.IconModeEnum.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ItemList.IconModeEnum.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.SelectMode">
            <summary>
            <para>Allow single or multiple selection. See the <c>SELECT_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowReselect">
            <summary>
            <para>If <c>true</c>, the currently selected item may be selected again.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowRmbSelect">
            <summary>
            <para>If <c>true</c>, a right mouse button click can select items.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxTextLines">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.AutoHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxColumns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.SameColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedIconSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddItem(System.String,Godot.Texture,System.Boolean)">
            <summary>
            <para>Adds an item to the item list with specified text. Specify an icon of null for a list item with no icon.</para>
            <para>If selectable is true the list item will be selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddIconItem(Godot.Texture,System.Boolean)">
            <summary>
            <para>Adds an item to the item list with no text, only an icon.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets text of item at specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemText(System.Int32)">
            <summary>
            <para>Return the text for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            <para>Set (or replace) icon of the item at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIcon(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconTransposed(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemIconTransposed(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIconRegion(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconModulate(System.Int32,Godot.Color)">
            <summary>
            <para>Sets a modulating <see cref="T:Godot.Color"/> for item's icon at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIconModulate(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Color"/> modulating item's icon at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemSelectable(System.Int32,System.Boolean)">
            <summary>
            <para>Allow or disallow selection of the item at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemSelectable(System.Int32)">
            <summary>
            <para>Returns whether or not the item at the specified index is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disable (or enable) item at specified index.</para>
            <para>Disabled items are not be selectable and do not fire activation (Enter or double-click) signals.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemDisabled(System.Int32)">
            <summary>
            <para>Returns whether or not the item at the specified index is disabled</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            <para>Sets a value (of any type) to be stored with the item at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemMetadata(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemCustomBgColor(System.Int32,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCustomBgColor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemCustomFgColor(System.Int32,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCustomFgColor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltipEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the tooltip is enabled for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemTooltipEnabled(System.Int32)">
            <summary>
            <para>Returns whether the tooltip is enabled for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltip(System.Int32,System.String)">
            <summary>
            <para>Sets tooltip hint for item at specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemTooltip(System.Int32)">
            <summary>
            <para>Return tooltip hint for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Select(System.Int32,System.Boolean)">
            <summary>
            <para>Select the item at the specified index.</para>
            <para>Note: This method does not trigger the item selection signal.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Unselect(System.Int32)">
            <summary>
            <para>Ensure item at specified index is not selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.UnselectAll">
            <summary>
            <para>Ensure there are no items selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsSelected(System.Int32)">
            <summary>
            <para>Returns whether or not item at the specified index is currently selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetSelectedItems">
            <summary>
            <para>Returns the list of selected indexes.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.MoveItem(System.Int32,System.Int32)">
            <summary>
            <para>Moves item at index <c>from_idx</c> to <c>to_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCount">
            <summary>
            <para>Return count of items currently in the item list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.RemoveItem(System.Int32)">
            <summary>
            <para>Remove item at specified index from the list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Clear">
            <summary>
            <para>Remove all items from the list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SortItemsByText">
            <summary>
            <para>Sorts items in the list by their text.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsAnythingSelected">
            <summary>
            <para>Returns <c>true</c> if one or more items are selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemAtPosition(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Given a position within the control return the item (if any) at that point.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.EnsureCurrentIsVisible">
            <summary>
            <para>Ensure selection is visible, adjusting the scroll position as necessary.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetVScroll">
            <summary>
            <para>Returns the current vertical scroll bar for the List.</para>
            </summary>
        </member>
        <member name="T:Godot.JavaScript">
            <summary>
            <para>The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.</para>
            </summary>
        </member>
        <member name="M:Godot.JavaScript.Eval(System.String,System.Boolean)">
            <summary>
            <para>Execute the string <c>code</c> as JavaScript code within the browser window. This is a call to the actual global JavaScript function <c>eval()</c>.</para>
            <para>If <c>use_global_execution_context</c> is <c>true</c>, the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.</para>
            </summary>
        </member>
        <member name="T:Godot.Joint">
            <summary>
            <para>Joints are used to bind together two physics bodies. They have a solver priority and can define if the bodies of the two attached nodes should be able to collide with each other.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint.Nodes__nodeA">
            <summary>
            <para>The node attached to the first side (A) of the joint.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint.Nodes__nodeB">
            <summary>
            <para>The node attached to the second side (B) of the joint.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint.Solver__priority">
            <summary>
            <para>The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint.Collision__excludeNodes">
            <summary>
            <para>If <c>true</c>, the two bodies of the nodes are not able to collide with each other.</para>
            </summary>
        </member>
        <member name="T:Godot.Joint2D">
            <summary>
            <para>Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeA">
            <summary>
            <para>The first body attached to the joint. Must derive from <see cref="T:Godot.PhysicsBody2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeB">
            <summary>
            <para>The second body attached to the joint. Must derive from <see cref="T:Godot.PhysicsBody2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.Bias">
            <summary>
            <para>When <see cref="P:Godot.Joint2D.NodeA"/> and <see cref="P:Godot.Joint2D.NodeB"/> move in different directions the <c>bias</c> controls how fast the joint pulls them back to their original position. The lower the <c>bias</c> the more the two bodies can pull on the joint. Default value: <c>0</c></para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.DisableCollision">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Joint2D.NodeA"/> and <see cref="P:Godot.Joint2D.NodeB"/> can collide. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.JSON">
            <summary>
            <para>Helper class for parsing JSON data. For usage example and other important hints, see <see cref="T:Godot.JSONParseResult"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.JSON.Print(System.Object,System.String,System.Boolean)">
            <summary>
            <para>Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network.</para>
            </summary>
        </member>
        <member name="M:Godot.JSON.Parse(System.String)">
            <summary>
            <para>Parses a JSON encoded string and returns a <see cref="T:Godot.JSONParseResult"/> containing the result.</para>
            </summary>
        </member>
        <member name="T:Godot.JSONParseResult">
            <summary>
            <para>Returned by <see cref="M:Godot.JSON.Parse(System.String)"/>, <c>JSONParseResult</c> contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with <c>if json_result.error == OK</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Error">
            <summary>
            <para>The error type if JSON source was not successfully parsed. See <c>@GlobalScope</c> ERR_* constants.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorString">
            <summary>
            <para>The error message if JSON source was not successfully parsed. See <c>@GlobalScope</c> ERR_* constants.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorLine">
            <summary>
            <para>The line number where the error occurred if JSON source was not successfully parsed.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Result">
            <summary>
            <para>A <c>Variant</c> containing the parsed JSON. Use typeof() to check if it is what you expect. For example, if JSON source starts with curly braces (<c>{}</c>) a <see cref="T:Godot.Collections.Dictionary"/> will be returned, if JSON source starts with braces (<c>[]</c>) an <see cref="T:Godot.Collections.Array"/> will be returned.</para>
            <para>Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.</para>
            <para>Note that JSON objects do not preserve key order like Godot dictionaries, thus you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:[/i]</para>
            <para><code>
            var p = JSON.parse('["hello", "world", "!"]')
            if typeof(p.result) == TYPE_ARRAY:
                print(p.result[0]) # prints 'hello'
            else:
                print("unexpected results")
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.KinematicBody">
            <summary>
            <para>Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:</para>
            <para>Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).</para>
            <para>Kinematic Characters: KinematicBody also has an API for moving objects (the <see cref="M:Godot.KinematicBody.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.MoveLockX">
            <summary>
            <para>Lock the body's movement in the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.MoveLockY">
            <summary>
            <para>Lock the body's movement in the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.MoveLockZ">
            <summary>
            <para>Lock the body's movement in the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.Collision__safeMargin">
            <summary>
            <para>If the body is at least this close to another body, this body will consider them to be colliding.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Moves the body along the vector <c>rel_vec</c>. The body will stop if it collides. Returns a <see cref="T:Godot.KinematicCollision"/>, which contains information about the collision.</para>
            <para>If <c>test_only</c> is <c>true</c>, the body does not move but the would-be collision information is given.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a <c>KinematicBody</c> or <see cref="T:Godot.RigidBody"/>, it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.</para>
            <para><c>linear_velocity</c> is the velocity vector (typically meters per second). Unlike in <see cref="M:Godot.KinematicBody.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/>, you should not multiply it by <c>delta</c> — the physics engine handles applying the velocity.</para>
            <para><c>floor_normal</c> is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of <c>Vector3(0, 0, 0)</c>, everything is considered a wall. This is useful for topdown games.</para>
            <para>If <c>stop_on_slope</c> is true, body will not slide on slopes if you include gravity in <c>linear_velocity</c>.</para>
            <para>If the body collides, it will change direction a maximum of <c>max_slides</c> times before it stops.</para>
            <para><c>floor_max_angle</c> is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.</para>
            <para>If <c>infinite_inertia</c> is true, body will be able to push <see cref="T:Godot.RigidBody"/> nodes, but it won't also detect any collisions with them. When false, it will interact with <see cref="T:Godot.RigidBody"/> nodes like with <see cref="T:Godot.StaticBody"/>.</para>
            <para>Returns the <c>linear_velocity</c> vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use <see cref="M:Godot.KinematicBody.GetSlideCollision(System.Int32)"/>.</para>
            <param name="floorNormal">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body while keeping it attached to slopes. Similar to <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            <para>As long as the <c>snap</c> vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting<c>snap</c> to<c>(0, 0, 0)</c> or by using <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> instead.</para>
            <param name="floorNormal">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.TestMove(Godot.Transform,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given <see cref="T:Godot.Transform"/>, then tries to move the body along the vector <c>rel_vec</c>. Returns <c>true</c> if a collision would occur.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnFloor">
            <summary>
            <para>Returns <c>true</c> if the body is on the floor. Only updates when calling <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnCeiling">
            <summary>
            <para>Returns <c>true</c> if the body is on the ceiling. Only updates when calling <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnWall">
            <summary>
            <para>Returns <c>true</c> if the body is on a wall. Only updates when calling <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetFloorVelocity">
            <summary>
            <para>Returns the velocity of the floor. Only updates when calling <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetSlideCount">
            <summary>
            <para>Returns the number of times the body collided and changed direction during the last call to <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetSlideCollision(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.KinematicCollision"/>, which contains information about a collision that occurred during the last <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> call. Since the body can collide several times in a single call to <see cref="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>, you must specify the index of the collision in the range 0 to (<see cref="M:Godot.KinematicBody.GetSlideCount"/> - 1).</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicBody2D">
            <summary>
            <para>Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:</para>
            <para>Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).</para>
            <para>Kinematic Characters: KinematicBody2D also has an API for moving objects (the <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody2D.Collision__safeMargin">
            <summary>
            <para>If the body is at least this close to another body, this body will consider them to be colliding.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody2D.Motion__syncToPhysics">
            <summary>
            <para>If <c>true</c>, the body's movement will be synchronized to the physics frame. This is useful when animating movement via <see cref="T:Godot.AnimationPlayer"/>, for example on moving platforms. Do not use together with <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/> functions.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Moves the body along the vector <c>rel_vec</c>. The body will stop if it collides. Returns a <see cref="T:Godot.KinematicCollision2D"/>, which contains information about the collision.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a <c>KinematicBody2D</c> or <see cref="T:Godot.RigidBody2D"/>, it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.</para>
            <para><c>linear_velocity</c> is the velocity vector in pixels per second. Unlike in <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/>, you should not multiply it by <c>delta</c> — the physics engine handles applying the velocity.</para>
            <para><c>floor_normal</c> is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of <c>Vector2(0, 0)</c>, everything is considered a wall. This is useful for topdown games.</para>
            <para>If <c>stop_on_slope</c> is true, body will not slide on slopes when you include gravity in <c>linear_velocity</c> and the body is standing still.</para>
            <para>If the body collides, it will change direction a maximum of <c>max_slides</c> times before it stops.</para>
            <para><c>floor_max_angle</c> is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.</para>
            <para>If <c>infinite_inertia</c> is true, body will be able to push <see cref="T:Godot.RigidBody2D"/> nodes, but it won't also detect any collisions with them. When false, it will interact with <see cref="T:Godot.RigidBody2D"/> nodes like with <see cref="T:Godot.StaticBody2D"/>.</para>
            <para>Returns the <c>linear_velocity</c> vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use <see cref="M:Godot.KinematicBody2D.GetSlideCollision(System.Int32)"/>.</para>
            <param name="floorNormal">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body while keeping it attached to slopes. Similar to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            <para>As long as the <c>snap</c> vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting <c>snap</c> to <c>(0, 0)</c> or by using <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> instead.</para>
            <param name="floorNormal">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.TestMove(Godot.Transform2D,Godot.Vector2,System.Boolean)">
            <summary>
            <para>Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given <see cref="T:Godot.Transform2D"/>, then tries to move the body along the vector <c>rel_vec</c>. Returns <c>true</c> if a collision would occur.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnFloor">
            <summary>
            <para>Returns <c>true</c> if the body is on the floor. Only updates when calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnCeiling">
            <summary>
            <para>Returns <c>true</c> if the body is on the ceiling. Only updates when calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnWall">
            <summary>
            <para>Returns <c>true</c> if the body is on a wall. Only updates when calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetFloorVelocity">
            <summary>
            <para>Returns the velocity of the floor. Only updates when calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCount">
            <summary>
            <para>Returns the number of times the body collided and changed direction during the last call to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCollision(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.KinematicCollision2D"/>, which contains information about a collision that occurred during the last <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> call. Since the body can collide several times in a single call to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>, you must specify the index of the collision in the range 0 to (<see cref="M:Godot.KinematicBody2D.GetSlideCount"/> - 1).</para>
            <para>Example usage:</para>
            <para><code>
            for i in get_slide_count():
                var collision = get_slide_collision(i)
                print("Collided with: ", collision.collider.name)
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision">
            <summary>
            <para>Contains collision data for KinematicBody collisions. When a <see cref="T:Godot.KinematicBody"/> is moved using <see cref="M:Godot.KinematicBody.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/>, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.</para>
            <para>This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Position">
            <summary>
            <para>The point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Normal">
            <summary>
            <para>The colliding body's shape's normal at the point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Travel">
            <summary>
            <para>The distance the moving object traveled before collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Remainder">
            <summary>
            <para>The moving object's remaining movement vector.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.LocalShape">
            <summary>
            <para>The moving object's colliding shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Collider">
            <summary>
            <para>The colliding body.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderId">
            <summary>
            <para>The colliding body's unique <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderShape">
            <summary>
            <para>The colliding body's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderShapeIndex">
            <summary>
            <para>The colliding shape's index. See <see cref="T:Godot.CollisionObject"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderVelocity">
            <summary>
            <para>The colliding object's velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderMetadata">
            <summary>
            <para>The colliding body's metadata. See <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision2D">
            <summary>
            <para>Contains collision data for KinematicBody2D collisions. When a <see cref="T:Godot.KinematicBody2D"/> is moved using <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/>, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.</para>
            <para>This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Position">
            <summary>
            <para>The point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Normal">
            <summary>
            <para>The colliding body's shape's normal at the point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Travel">
            <summary>
            <para>The distance the moving object traveled before collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Remainder">
            <summary>
            <para>The moving object's remaining movement vector.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.LocalShape">
            <summary>
            <para>The moving object's colliding shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Collider">
            <summary>
            <para>The colliding body.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderId">
            <summary>
            <para>The colliding body's unique <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShape">
            <summary>
            <para>The colliding body's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShapeIndex">
            <summary>
            <para>The colliding shape's index. See <see cref="T:Godot.CollisionObject2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderVelocity">
            <summary>
            <para>The colliding object's velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderMetadata">
            <summary>
            <para>The colliding body's metadata. See <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Label">
            <summary>
            <para>Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use <see cref="T:Godot.RichTextLabel"/> instead.</para>
            <para>Note that contrarily to most other <see cref="T:Godot.Control"/>s, Label's <see cref="P:Godot.Control.MouseFilter"/> defaults to MOUSE_FILTER_IGNORE (i.e. it doesn't react to mouse input events). This implies that a label won't display any configured <see cref="P:Godot.Control.HintTooltip"/>, unless you change its mouse filter.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Left">
            <summary>
            <para>Align rows to the left (default).</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Center">
            <summary>
            <para>Align rows centered.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Right">
            <summary>
            <para>Align rows to the right (default).</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Fill">
            <summary>
            <para>Expand row whitespaces to fit the width.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Top">
            <summary>
            <para>Align the whole text to the top.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Center">
            <summary>
            <para>Align the whole text to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Bottom">
            <summary>
            <para>Align the whole text to the bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Fill">
            <summary>
            <para>Align the whole text by spreading the rows.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Text">
            <summary>
            <para>The text to display on screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Align">
            <summary>
            <para>Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the <c>ALIGN_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Valign">
            <summary>
            <para>Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the <c>VALIGN_*</c> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Autowrap">
            <summary>
            <para>If <c>true</c>, wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. Default: false.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.ClipText">
            <summary>
            <para>If <c>true</c>, the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Uppercase">
            <summary>
            <para>If <c>true</c>, all the text displays as UPPERCASE.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.VisibleCharacters">
            <summary>
            <para>Restricts the number of characters to display. Set to -1 to disable.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.PercentVisible">
            <summary>
            <para>Limits the count of visible characters. If you set <c>percent_visible</c> to 50, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.LinesSkipped">
            <summary>
            <para>The node ignores the first <c>lines_skipped</c> lines before it starts to display text.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.MaxLinesVisible">
            <summary>
            <para>Limits the lines of text the node shows on screen.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineHeight">
            <summary>
            <para>Returns the font size in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineCount">
            <summary>
            <para>Returns the amount of lines of text the Label has.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetVisibleLineCount">
            <summary>
            <para>Returns the number of lines shown. Useful if the <c>Label</c> 's height cannot currently display all lines.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetTotalCharacterCount">
            <summary>
            <para>Returns the total number of printable characters in the text (excluding spaces and newlines).</para>
            </summary>
        </member>
        <member name="T:Godot.LargeTexture">
            <summary>
            <para>A Texture capable of storing many smaller Textures with offsets.</para>
            <para>You can dynamically add pieces(<see cref="T:Godot.Texture"/>) to this <c>LargeTexture</c> using different offsets.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.AddPiece(Godot.Vector2,Godot.Texture)">
            <summary>
            <para>Add another <see cref="T:Godot.Texture"/> to this <c>LargeTexture</c>, starting on offset "ofs".</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the offset of the piece with index "idx" to "ofs".</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceTexture(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the <see cref="T:Godot.Texture"/> of the piece with index "idx" to "texture".</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetSize(Godot.Vector2)">
            <summary>
            <para>Sets the size of this <c>LargeTexture</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.Clear">
            <summary>
            <para>Clears the <c>LargeTexture</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceCount">
            <summary>
            <para>Returns the number of pieces currently in this <c>LargeTexture</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the piece with index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceTexture(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture"/> of the piece with index "idx".</para>
            </summary>
        </member>
        <member name="T:Godot.Light">
            <summary>
            <para>Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.</para>
            </summary>
        </member>
        <member name="F:Godot.Light.BakeMode.Disabled">
            <summary>
            <para>Light is ignored when baking. Note: hiding a light does not affect baking.</para>
            </summary>
        </member>
        <member name="F:Godot.Light.BakeMode.Indirect">
            <summary>
            <para>Only indirect lighting will be baked. Default value.</para>
            </summary>
        </member>
        <member name="F:Godot.Light.BakeMode.All">
            <summary>
            <para>Both direct and indirect light will be baked. Note: you should hide the light if you don't want it to appear twice (dynamic and baked).</para>
            </summary>
        </member>
        <member name="F:Godot.Light.Param.Energy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.IndirectEnergy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.Specular">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.Range">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.Attenuation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.SpotAngle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.SpotAttenuation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ContactShadowSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowSplit1Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowSplit2Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowSplit3Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowNormalBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.ShadowBiasSplitScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Light.Param.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Light.LightColor">
            <summary>
            <para>The light's color.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightEnergy">
            <summary>
            <para>The light's strength multiplier.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightIndirectEnergy">
            <summary>
            <para>Secondary multiplier used with indirect light (light bounces). This works in baked light or GIProbe.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightNegative">
            <summary>
            <para>If <c>true</c>, the light's effect is reversed, darkening areas and casting bright shadows. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightSpecular">
            <summary>
            <para>The intensity of the specular blob in objects affected by the light. At <c>0</c> the light becomes a pure diffuse light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightBakeMode">
            <summary>
            <para>The light's bake mode. See <see cref="T:Godot.Light.BakeMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.LightCullMask">
            <summary>
            <para>The light will affect objects in the selected layers.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowEnabled">
            <summary>
            <para>If <c>true</c>, the light will cast shadows. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowColor">
            <summary>
            <para>The color of shadows cast by this light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowBias">
            <summary>
            <para>Used to adjust shadow appearance. Too small a value results in self shadowing, while too large a value causes shadows to separate from casters. Adjust as needed.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowContact">
            <summary>
            <para>Attempts to reduce <see cref="P:Godot.Light.ShadowBias"/> gap.</para>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowReverseCullFace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Light.EditorOnly">
            <summary>
            <para>If <c>true</c>, the light only appears in the editor and will not be visible at runtime. Default value:<c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Light2D">
            <summary>
            <para>Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.None">
            <summary>
            <para>No filter applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf3">
            <summary>
            <para>Percentage closer filtering (3 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf5">
            <summary>
            <para>Percentage closer filtering (5 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf7">
            <summary>
            <para>Percentage closer filtering (7 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf9">
            <summary>
            <para>Percentage closer filtering (9 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf13">
            <summary>
            <para>Percentage closer filtering (13 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ModeEnum.Add">
            <summary>
            <para>Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behaviour of a light.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ModeEnum.Sub">
            <summary>
            <para>Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ModeEnum.Mix">
            <summary>
            <para>Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ModeEnum.Mask">
            <summary>
            <para>The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Enabled">
            <summary>
            <para>If <c>true</c>, Light2D will emit light. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.EditorOnly">
            <summary>
            <para>If <c>true</c>, Light2D will only appear when editing the scene. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Texture">
            <summary>
            <para><see cref="T:Godot.Texture"/> used for the Light2D's appearance.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Offset">
            <summary>
            <para>The offset of the Light2D's <c>texture</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.TextureScale">
            <summary>
            <para>The <c>texture</c>'s scale factor.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Color">
            <summary>
            <para>The Light2D's <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Energy">
            <summary>
            <para>The Light2D's energy value. The larger the value, the stronger the light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Mode">
            <summary>
            <para>The Light2D's mode. See MODE_* constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeHeight">
            <summary>
            <para>The height of the Light2D. Used with 2D normal mapping.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMin">
            <summary>
            <para>Minimum <c>z</c> value of objects that are affected by the Light2D. Default value: <c>-1024</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMax">
            <summary>
            <para>Maximum <c>Z</c> value of objects that are affected by the Light2D. Default value: <c>1024</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMin">
            <summary>
            <para>Minimum layer value of objects that are affected by the Light2D. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMax">
            <summary>
            <para>Maximum layer value of objects that are affected by the Light2D. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeItemCullMask">
            <summary>
            <para>The layer mask. Only objects with a matching mask will be affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowEnabled">
            <summary>
            <para>If <c>true</c>, the Light2D will cast shadows. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowColor">
            <summary>
            <para><see cref="T:Godot.Color"/> of shadows cast by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowBufferSize">
            <summary>
            <para>Shadow buffer size. Default value: <c>2048</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowGradientLength">
            <summary>
            <para>Smooth shadow gradient length.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilter">
            <summary>
            <para>Shadow filter type. Use <see cref="T:Godot.Light2D.ShadowFilterEnum"/> constants as values. Default value: <c>SHADOW_FILTER_NONE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilterSmooth">
            <summary>
            <para>Smoothing value for shadows.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowItemCullMask">
            <summary>
            <para>The shadow mask. Used with <see cref="T:Godot.LightOccluder2D"/> to cast shadows. Only occluders with a matching shadow mask will cast shadows.</para>
            </summary>
        </member>
        <member name="T:Godot.LightOccluder2D">
            <summary>
            <para>Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an <see cref="T:Godot.OccluderPolygon2D"/> in order for the shadow to be computed.</para>
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.Occluder">
            <summary>
            <para>The <see cref="T:Godot.OccluderPolygon2D"/> used to compute the shadow.</para>
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.LightMask">
            <summary>
            <para>The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s).</para>
            </summary>
        </member>
        <member name="T:Godot.Line2D">
            <summary>
            <para>A line through several points in 2D space.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.None">
            <summary>
            <para>Takes the left pixels of the texture and renders it over the whole line.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.Tile">
            <summary>
            <para>Tiles the texture over the line. The texture need to be imported with Repeat Enabled for it to work properly.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.Stretch">
            <summary>
            <para>Stretches the texture across the line. Import the texture with Repeat Disabled for best results.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.None">
            <summary>
            <para>Don't have a line cap.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.Box">
            <summary>
            <para>Draws the line cap as a box.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.Round">
            <summary>
            <para>Draws the line cap as a circle.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Sharp">
            <summary>
            <para>The line's joints will be pointy. If <c>sharp_limit</c> is greater than the rotation of a joint, it becomes a bevel joint instead.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Bevel">
            <summary>
            <para>The line's joints will be bevelled/chamfered.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Round">
            <summary>
            <para>The line's joints will be rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Points">
            <summary>
            <para>The points that form the lines. The line is drawn between every point set in this array.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Width">
            <summary>
            <para>The line's width.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.DefaultColor">
            <summary>
            <para>The line's color. Will not be used if a gradient is set.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Gradient">
            <summary>
            <para>The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Texture">
            <summary>
            <para>The texture used for the line's texture. Uses <c>texture_mode</c> for drawing style.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.TextureMode">
            <summary>
            <para>The style to render the <c>texture</c> on the line. Use <c>LINE_TEXTURE_*</c> constants. Default value: <c>LINE_TEXTURE_NONE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.JointMode">
            <summary>
            <para>The style for the points between the start and the end.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.BeginCapMode">
            <summary>
            <para>Controls the style of the line's first point. Use <c>LINE_CAP_*</c> constants. Default value: <c>LINE_CAP_NONE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.EndCapMode">
            <summary>
            <para>Controls the style of the line's last point. Use <c>LINE_CAP_*</c> constants. Default value: <c>LINE_CAP_NONE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.SharpLimit">
            <summary>
            <para>The direction difference in radians between vector points. This value is only used if <c>joint mode</c> is set to <c>LINE_JOINT_SHARP</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.RoundPrecision">
            <summary>
            <para>The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Overwrites the position in point <c>i</c> with the supplied <c>position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns point <c>i</c>'s position.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointCount">
            <summary>
            <para>Returns the Line2D's amount of points.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.AddPoint(Godot.Vector2)">
            <summary>
            <para>Add a point at the <c>position</c>. Appends the point at the end of the line.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.RemovePoint(System.Int32)">
            <summary>
            <para>Remove the point at index <c>i</c> from the line.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.ClearPoints">
            <summary>
            <para>Removes all points from the line.</para>
            </summary>
        </member>
        <member name="T:Godot.LineEdit">
            <summary>
            <para>LineEdit provides a single line string editor, used for text fields.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Left">
            <summary>
            <para>Aligns the text on the left hand side of the <c>LineEdit</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Center">
            <summary>
            <para>Centers the text in the middle of the <c>LineEdit</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Right">
            <summary>
            <para>Aligns the text on the right hand side of the <c>LineEdit</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Fill">
            <summary>
            <para>Stretches whitespaces to fit the <c>LineEdit</c>'s width.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Cut">
            <summary>
            <para>Cuts (copies and clears) the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Copy">
            <summary>
            <para>Copies the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Paste">
            <summary>
            <para>Pastes the clipboard text over the selected text (or at the cursor's position).</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Clear">
            <summary>
            <para>Erases the whole <c>LineEdit</c> text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.SelectAll">
            <summary>
            <para>Selects the whole <c>LineEdit</c> text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Undo">
            <summary>
            <para>Undoes the previous action.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Redo">
            <summary>
            <para>Reverse the last undo action.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Text">
            <summary>
            <para>String value of the <c>LineEdit</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Align">
            <summary>
            <para>Text alignment as defined in the ALIGN_* enum.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.MaxLength">
            <summary>
            <para>Maximum amount of characters that can be entered inside the <c>LineEdit</c>. If <c>0</c>, there is no limit.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Editable">
            <summary>
            <para>If <c>false</c>, existing text cannot be modified and new text cannot be added.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Secret">
            <summary>
            <para>If <c>true</c>, every character is replaced with the secret character (see <see cref="P:Godot.LineEdit.SecretCharacter"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.SecretCharacter">
            <summary>
            <para>The character to use to mask secret input (defaults to "*"). Only a single character can be used as the secret character.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ExpandToTextLength">
            <summary>
            <para>If <c>true</c>, the <c>LineEdit</c> width will increase to stay longer than the <see cref="P:Godot.LineEdit.Text"/>. It will not compress if the <see cref="P:Godot.LineEdit.Text"/> is shortened.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.FocusMode">
            <summary>
            <para>Defines how the <c>LineEdit</c> can grab focus (Keyboard and mouse, only keyboard, or none). See <c>enum FocusMode</c> in <see cref="T:Godot.Control"/> for details.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ContextMenuEnabled">
            <summary>
            <para>If <c>true</c>, the context menu will appear when right clicked.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ClearButtonEnabled">
            <summary>
            <para>If <c>true</c>, the <c>LineEdit</c> will show a clear button if <c>text</c> is not empty.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderText">
            <summary>
            <para>Text shown when the <c>LineEdit</c> is empty. It is not the <c>LineEdit</c>'s default value (see <see cref="P:Godot.LineEdit.Text"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderAlpha">
            <summary>
            <para>Opacity of the <see cref="P:Godot.LineEdit.PlaceholderText"/>. From <c>0</c> to <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlink">
            <summary>
            <para>If <c>true</c>, the caret (visual cursor) blinks.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlinkSpeed">
            <summary>
            <para>Duration (in seconds) of a caret's blinking cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretPosition">
            <summary>
            <para>The cursor's position inside the <c>LineEdit</c>. When set, the text may scroll to accommodate it.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Clear">
            <summary>
            <para>Erases the <c>LineEdit</c> text.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Select(System.Int32,System.Int32)">
            <summary>
            <para>Selects characters inside <c>LineEdit</c> between <c>from</c> and <c>to</c>. By default <c>from</c> is at the beginning and <c>to</c> at the end.</para>
            <para><code>
            text = "Welcome"
            select()     # Welcome
            select(4)    # ome
            select(2, 5) # lco
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.SelectAll">
            <summary>
            <para>Selects the whole <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Deselect">
            <summary>
            <para>Clears the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.AppendAtCursor(System.String)">
            <summary>
            <para>Adds <c>text</c> after the cursor. If the resulting value is longer than <see cref="P:Godot.LineEdit.MaxLength"/>, nothing happens.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.MenuOption(System.Int32)">
            <summary>
            <para>Executes a given action as defined in the MENU_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.GetMenu">
            <summary>
            <para>Returns the <see cref="T:Godot.PopupMenu"/> of this <c>LineEdit</c>. By default, this menu is displayed when right-clicking on the <c>LineEdit</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.LineShape2D">
            <summary>
            <para>Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.</para>
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.Normal">
            <summary>
            <para>The line's normal.</para>
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.D">
            <summary>
            <para>The line's distance from the origin.</para>
            </summary>
        </member>
        <member name="T:Godot.LinkButton">
            <summary>
            <para>This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.Always">
            <summary>
            <para>The LinkButton will always show an underline at the bottom of its text</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.OnHover">
            <summary>
            <para>The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it.</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.Never">
            <summary>
            <para>The LinkButton will never show an underline at the bottom of its text.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Underline">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Listener.MakeCurrent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Listener.ClearCurrent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Listener.IsCurrent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Listener.GetListenerTransform">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.MainLoop">
            <summary>
            <para>Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a <c>MainLoop</c> has to be provided to OS, else the application will exit. This happens automatically (and a <see cref="T:Godot.SceneTree"/> is created), unless a main <see cref="T:Godot.Script"/> is supplied, which may or not create and return a <c>MainLoop</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmMouseEnter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmMouseExit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmFocusIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmFocusOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmQuitRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmGoBackRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmUnfocusRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationOsMemoryWarning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationTranslationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmAbout">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationCrash">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationOsImeUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop._DropFiles(System.String[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Finalize">
            <summary>
            <para>Called before the program exits.</para>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Idle(System.Single)">
            <summary>
            <para>Called each idle frame with time since last call as an only argument.</para>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Initialize">
            <summary>
            <para>Called once during initialization.</para>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._InputEvent(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop._InputText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Iteration(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.InputEvent(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.InputText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Iteration(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Idle(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Finish">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.MarginContainer">
            <summary>
            <para>Simple margin container. Adds a left margin to anything contained.</para>
            </summary>
        </member>
        <member name="T:Godot.Marshalls">
            <summary>
            <para>Provides data transformation and encoding utility functions.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.VariantToBase64(System.Object,System.Boolean)">
            <summary>
            <para>Return base64 encoded String of a given <c>Variant</c>. When <c>full_objects</c> is <c>true</c> encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToVariant(System.String,System.Boolean)">
            <summary>
            <para>Return <c>Variant</c> of a given base64 encoded String. When <c>allow_objects</c> is <c>true</c> decoding objects is allowed.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.RawToBase64(System.Byte[])">
            <summary>
            <para>Return base64 encoded String of a given <see cref="T:System.Byte"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToRaw(System.String)">
            <summary>
            <para>Return <see cref="T:System.Byte"/> of a given base64 encoded String.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Utf8ToBase64(System.String)">
            <summary>
            <para>Return base64 encoded String of a given utf8 String.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToUtf8(System.String)">
            <summary>
            <para>Return utf8 String of a given base64 encoded String.</para>
            </summary>
        </member>
        <member name="T:Godot.Material">
            <summary>
            <para>Material is a base <see cref="T:Godot.Resource"/> used for coloring and shading geometry. All materials inherit from it and almost all <see cref="T:Godot.VisualInstance"/> derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.</para>
            </summary>
        </member>
        <member name="F:Godot.Material.RenderPriorityMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Material.RenderPriorityMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Material.RenderPriority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Material.NextPass">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.MenuButton">
            <summary>
            <para>Special button that brings up a <see cref="T:Godot.PopupMenu"/> when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.</para>
            </summary>
        </member>
        <member name="P:Godot.MenuButton.SwitchOnHover">
            <summary>
            <para>If <c>true</c>, when the cursor hovers above another MenuButton within the same parent which also has <c>switch_on_hover</c> enabled, it will close the current MenuButton and open the other one.</para>
            </summary>
        </member>
        <member name="M:Godot.MenuButton.GetPopup">
            <summary>
            <para>Return the <see cref="T:Godot.PopupMenu"/> contained in this button.</para>
            </summary>
        </member>
        <member name="M:Godot.MenuButton.SetDisableShortcuts(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Mesh">
            <summary>
            <para>Mesh is a type of <see cref="T:Godot.Resource"/> that contains vertex-array based geometry, divided in surfaces. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.BlendShapeMode.Normalized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.BlendShapeMode.Relative">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Points">
            <summary>
            <para>Render array as points (one vertex equals one point).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Lines">
            <summary>
            <para>Render array as lines (every two vertices a line is created).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.LineStrip">
            <summary>
            <para>Render array as line strip.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.LineLoop">
            <summary>
            <para>Render array as line loop (like line strip, but closed).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Triangles">
            <summary>
            <para>Render array as triangles (every three vertices a triangle is created).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.TriangleStrip">
            <summary>
            <para>Render array as triangle strips.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.TriangleFan">
            <summary>
            <para>Render array as triangle fans.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatVertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTangent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTexUv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTexUv2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatBones">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatWeights">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressVertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressTangent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressTexUv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressTexUv2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressBones">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressWeights">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FlagUse2dVertices">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FlagUse16BitBones">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.CompressDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Vertex">
            <summary>
            <para>Array of vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Normal">
            <summary>
            <para>Array of normals.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Tangent">
            <summary>
            <para>Array of tangents as an array of floats, 4 floats per tangent.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Color">
            <summary>
            <para>Array of colors.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.TexUv">
            <summary>
            <para>Array of UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.TexUv2">
            <summary>
            <para>Array of second set of UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Bones">
            <summary>
            <para>Array of bone data.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Weights">
            <summary>
            <para>Array of weights.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Index">
            <summary>
            <para>Array of indices.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Mesh.LightmapSizeHint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetSurfaceCount">
            <summary>
            <para>Return the amount of surfaces that the <c>Mesh</c> holds.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetArrays(System.Int32)">
            <summary>
            <para>Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetBlendShapeArrays(System.Int32)">
            <summary>
            <para>Returns the blend shape arrays for the requested surface.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetMaterial(System.Int32)">
            <summary>
            <para>Return a <see cref="T:Godot.Material"/> in a given surface. Surface is rendered using this material.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateTrimeshShape">
            <summary>
            <para>Calculate a <see cref="T:Godot.ConcavePolygonShape"/> from the mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateConvexShape">
            <summary>
            <para>Calculate a <see cref="T:Godot.ConvexPolygonShape"/> from the mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateOutline(System.Single)">
            <summary>
            <para>Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: Typically returns the vertices in reverse order (e.g. clockwise to anti-clockwise).</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetFaces">
            <summary>
            <para>Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GenerateTriangleMesh">
            <summary>
            <para>Generate a <see cref="T:Godot.TriangleMesh"/> from the mesh.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshDataTool">
            <summary>
            <para>The MeshDataTool provides access to individual vertices in a <see cref="T:Godot.Mesh"/>. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.</para>
            <para>To use the MeshDataTool, load a mesh with <see cref="M:Godot.MeshDataTool.CreateFromSurface(Godot.ArrayMesh,System.Int32)"/>. When you are finished editing the data commit the data to a mesh with <see cref="M:Godot.MeshDataTool.CommitToSurface(Godot.ArrayMesh)"/>.</para>
            <para>Below is an example of how the MeshDataTool may be used.</para>
            <para><code>
            var mdt = MeshDataTool.new()
            mdt.create_from_surface(mesh, 0)
            for i in range(mdt.get_vertex_count()):
                var vertex = mdt.get_vertex(i)
                ...
                mdt.set_vertex(i, vertex)
            mesh.surface_remove(0)
            mdt.commit_to_surface(mesh)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.Clear">
            <summary>
            <para>Clears all data currently in MeshDataTool.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CreateFromSurface(Godot.ArrayMesh,System.Int32)">
            <summary>
            <para>Uses specified surface of given <see cref="T:Godot.Mesh"/> to populate data for MeshDataTool.</para>
            <para>Requires <see cref="T:Godot.Mesh"/> with primitive type <c>PRIMITIVE_TRIANGLES</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CommitToSurface(Godot.ArrayMesh)">
            <summary>
            <para>Adds a new surface to specified <see cref="T:Godot.Mesh"/> with edited data.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFormat">
            <summary>
            <para>Returns format of <see cref="T:Godot.Mesh"/>. Format is an integer made up of <see cref="T:Godot.Mesh"/> format flags combined together. For example, a mesh containing both vertices and normals would return a format of <c>3</c> because <c>ARRAY_FORMAT_VERTEX</c> is <c>1</c> and <c>ARRAY_FORMAT_NORMAL</c> is <c>2</c>.</para>
            <para>For list of format flags see <see cref="T:Godot.ArrayMesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexCount">
            <summary>
            <para>Returns the total number of vertices in <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeCount">
            <summary>
            <para>Returns the number of edges in this <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceCount">
            <summary>
            <para>Returns the number of faces in this <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertex(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertex(System.Int32)">
            <summary>
            <para>Returns the vertex at given index.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexNormal(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the normal of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexNormal(System.Int32)">
            <summary>
            <para>Returns normal of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexTangent(System.Int32,Godot.Plane)">
            <summary>
            <para>Sets the tangent of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexTangent(System.Int32)">
            <summary>
            <para>Returns tangent of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the UV of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv(System.Int32)">
            <summary>
            <para>Returns UV of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv2(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the UV2 of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv2(System.Int32)">
            <summary>
            <para>Returns UV2 of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexColor(System.Int32)">
            <summary>
            <para>Returns the color of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexBones(System.Int32,System.Int32[])">
            <summary>
            <para>Sets the bones of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexBones(System.Int32)">
            <summary>
            <para>Returns the bones of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexWeights(System.Int32,System.Single[])">
            <summary>
            <para>Sets the bone weights of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexWeights(System.Int32)">
            <summary>
            <para>Returns bone weights of given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the meta data associated with given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexMeta(System.Int32)">
            <summary>
            <para>Returns meta data associated with given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexEdges(System.Int32)">
            <summary>
            <para>Returns array of edges that share given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexFaces(System.Int32)">
            <summary>
            <para>Returns array of faces that share given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeVertex(System.Int32,System.Int32)">
            <summary>
            <para>Returns index of specified vertex connected to given edge.</para>
            <para>Vertex argument can only be 0 or 1 because edges are comprised of two vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeFaces(System.Int32)">
            <summary>
            <para>Returns array of faces that touch given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetEdgeMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the meta data of given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeMeta(System.Int32)">
            <summary>
            <para>Returns meta information assigned to given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceVertex(System.Int32,System.Int32)">
            <summary>
            <para>Returns specified vertex of given face.</para>
            <para>Vertex argument must be 2 or less because faces contain three vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceEdge(System.Int32,System.Int32)">
            <summary>
            <para>Returns specified edge associated with given face.</para>
            <para>Edge argument must 2 or less because a face only has three edges.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetFaceMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the meta data of given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceMeta(System.Int32)">
            <summary>
            <para>Returns meta data associated with given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceNormal(System.Int32)">
            <summary>
            <para>Calculates and returns face normal of given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetMaterial(Godot.Material)">
            <summary>
            <para>Sets the material to be used by newly constructed <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetMaterial">
            <summary>
            <para>Returns material assigned to the <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshInstance">
            <summary>
            <para>MeshInstance is a node that takes a <see cref="T:Godot.Mesh"/> resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single <see cref="T:Godot.Mesh"/> in many places. This allows to reuse geometry and save on resources. When a <see cref="T:Godot.Mesh"/> has to be instanced more than thousands of times at close proximity, consider using a <see cref="T:Godot.MultiMesh"/> in a <see cref="T:Godot.MultiMeshInstance"/> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance.Mesh">
            <summary>
            <para>The <see cref="T:Godot.Mesh"/> resource for the instance.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance.Skeleton">
            <summary>
            <para><see cref="T:Godot.NodePath"/> to the <see cref="T:Godot.Skeleton"/> associated with the instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.GetSurfaceMaterialCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.SetSurfaceMaterial(System.Int32,Godot.Material)">
            <summary>
            <para>Sets the <see cref="T:Godot.Material"/> for a surface of the <see cref="T:Godot.Mesh"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.GetSurfaceMaterial(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Material"/> for a surface of the <see cref="T:Godot.Mesh"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateTrimeshCollision">
            <summary>
            <para>This helper creates a <see cref="T:Godot.StaticBody"/> child node with a <see cref="T:Godot.ConcavePolygonShape"/> collision shape calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateConvexCollision">
            <summary>
            <para>This helper creates a <see cref="T:Godot.StaticBody"/> child node with a <see cref="T:Godot.ConvexPolygonShape"/> collision shape calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateDebugTangents">
            <summary>
            <para>This helper creates a <see cref="T:Godot.MeshInstance"/> child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.NormalMap">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.MeshLibrary">
            <summary>
            <para>Library of meshes. Contains a list of <see cref="T:Godot.Mesh"/> resources, each with name and ID. Useful for GridMap or painting Terrain.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.CreateItem(System.Int32)">
            <summary>
            <para>Create a new item in the library, supplied an id.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemName(System.Int32,System.String)">
            <summary>
            <para>Set the name of the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemMesh(System.Int32,Godot.Mesh)">
            <summary>
            <para>Set the mesh of the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemNavmesh(System.Int32,Godot.NavigationMesh)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemShapes(System.Int32,Godot.Collections.Array)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemPreview(System.Int32,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemName(System.Int32)">
            <summary>
            <para>Return the name of the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemMesh(System.Int32)">
            <summary>
            <para>Return the mesh of the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemNavmesh(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemShapes(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemPreview(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.RemoveItem(System.Int32)">
            <summary>
            <para>Remove the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.FindItemByName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.Clear">
            <summary>
            <para>Clear the library.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemList">
            <summary>
            <para>Return the list of items.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetLastUnusedItemId">
            <summary>
            <para>Get an unused id for a new item.</para>
            </summary>
        </member>
        <member name="T:Godot.MobileVRInterface">
            <summary>
            <para>This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect you do need a mobile phone with a gyroscope and accelerometer.</para>
            <para>Note that even though there is no positional tracking the camera will assume the headset is at a height of 1.85 meters, you can change this by setting <see cref="P:Godot.MobileVRInterface.EyeHeight"/>.</para>
            <para>You can initialise this interface as follows:</para>
            <para><code>
            var interface = ARVRServer.find_interface("Native mobile")
            if interface and interface.initialize():
                get_viewport().arvr = true
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.EyeHeight">
            <summary>
            <para>The height at which the camera is placed in relation to the ground (i.e. <see cref="T:Godot.ARVROrigin"/> node).</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Iod">
            <summary>
            <para>The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayWidth">
            <summary>
            <para>The width of the display in centimeters.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayToLens">
            <summary>
            <para>The distance between the display and the lenses inside of the device in centimeters.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Oversample">
            <summary>
            <para>The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K1">
            <summary>
            <para>The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K2">
            <summary>
            <para>The k2 lens factor, see k1.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMesh">
            <summary>
            <para>MultiMesh provides low level mesh instancing. Drawing thousands of <see cref="T:Godot.MeshInstance"/> nodes can be slow because each object is submitted to the GPU to be drawn individually.</para>
            <para>MultiMesh is much faster because it can draw thousands of instances with a single draw call, resulting in less API overhead.</para>
            <para>As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).</para>
            <para>Since instances may have any behavior, the AABB used for visibility must be provided by the user.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.TransformFormatEnum.Transform2d">
            <summary>
            <para>Use this when using 2D transforms.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.TransformFormatEnum.Transform3d">
            <summary>
            <para>Use this when using 3D transforms.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.CustomDataFormatEnum.None">
            <summary>
            <para>Use when you are not using per-instance custom data.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.CustomDataFormatEnum.Data8bit">
            <summary>
            <para>Compress custom_data into 8 bits when passing to shader. This uses less memory and can be faster, but loses precision.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.CustomDataFormatEnum.Float">
            <summary>
            <para>The <see cref="T:Godot.Color"/> passed into <see cref="M:Godot.MultiMesh.SetInstanceCustomData(System.Int32,Godot.Color)"/> will use 4 floats. Use this for highest precision.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.ColorFormatEnum.None">
            <summary>
            <para>Use when you are not using per-instance <see cref="T:Godot.Color"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.ColorFormatEnum.Color8bit">
            <summary>
            <para>Compress <see cref="T:Godot.Color"/> data into 8 bits when passing to shader. This uses less memory and can be faster, but the <see cref="T:Godot.Color"/> loses precision.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.ColorFormatEnum.Float">
            <summary>
            <para>The <see cref="T:Godot.Color"/> passed into <see cref="M:Godot.MultiMesh.SetInstanceColor(System.Int32,Godot.Color)"/> will use 4 floats. Use this for highest precision <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.ColorFormat">
            <summary>
            <para>Format of colors in color array that gets passed to shader.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.TransformFormat">
            <summary>
            <para>Format of transform used to transform mesh, either 2D or 3D.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.CustomDataFormat">
            <summary>
            <para>Format of custom data in custom data array that gets passed to shader.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.InstanceCount">
            <summary>
            <para>Number of instances that will get drawn.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.VisibleInstanceCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.Mesh">
            <summary>
            <para>Mesh to be drawn.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceTransform(System.Int32,Godot.Transform)">
            <summary>
            <para>Set the transform for a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceTransform2d(System.Int32,Godot.Transform2D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceTransform(System.Int32)">
            <summary>
            <para>Return the transform of a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceTransform2d(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceColor(System.Int32,Godot.Color)">
            <summary>
            <para>Set the color of a specific instance.</para>
            <para>For the color to take effect, ensure that <see cref="P:Godot.MultiMesh.ColorFormat"/> is non-<c>null</c> on the <c>MultiMesh</c> and <see cref="P:Godot.SpatialMaterial.VertexColorUseAsAlbedo"/> is <c>true</c> on the material.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceColor(System.Int32)">
            <summary>
            <para>Get the color of a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceCustomData(System.Int32,Godot.Color)">
            <summary>
            <para>Set custom data for a specific instance. Although <see cref="T:Godot.Color"/> is used, it is just a container for 4 numbers.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceCustomData(System.Int32)">
            <summary>
            <para>Return the custom data that has been set for a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetAabb">
            <summary>
            <para>Return the visibility AABB.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMeshInstance">
            <summary>
            <para><c>MultiMeshInstance</c> is a specialized node to instance <see cref="T:Godot.GeometryInstance"/>s based on a <see cref="T:Godot.MultiMesh"/> resource.</para>
            <para>This is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance.Multimesh">
            <summary>
            <para>The <see cref="T:Godot.MultiMesh"/> resource that will be used and shared among all instances of the <c>MultiMeshInstance</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI">
            <summary>
            <para>This class implements most of the logic behind the high level multiplayer API.</para>
            <para>By default, <see cref="T:Godot.SceneTree"/> has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.</para>
            <para>It is possible to override the MultiplayerAPI instance used by specific Nodes by setting the <see cref="P:Godot.Node.CustomMultiplayer"/> property, effectively allowing to run both client and server in the same scene.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Disabled">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> to disable a method or property for all RPC calls, making it unavailable. Default for all methods.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Remote">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the <c>remote</c> keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or puppets.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Master">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on the network master for this node. Analogous to the <c>master</c> keyword. Only accepts calls or property changes from the node's network puppets, see <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Puppet">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(System.String,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on puppets for this node. Analogous to the <c>puppet</c> keyword. Only accepts calls or property changes from the node's network master, see <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Slave">
            <summary>
            <para>Deprecated. Use <c>RPC_MODE_PUPPET</c> instead. Analogous to the <c>slave</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Remotesync">
            <summary>
            <para>Behave like <c>RPC_MODE_REMOTE</c> but also make the call or property change locally. Analogous to the <c>remotesync</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Sync">
            <summary>
            <para>Deprecated. Use <c>RPC_MODE_REMOTESYNC</c> instead. Analogous to the <c>sync</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Mastersync">
            <summary>
            <para>Behave like <c>RPC_MODE_MASTER</c> but also make the call or property change locally. Analogous to the <c>mastersync</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Puppetsync">
            <summary>
            <para>Behave like <c>RPC_MODE_PUPPET</c> but also make the call or property change locally. Analogous to the <c>puppetsync</c> keyword.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.AllowObjectDecoding">
            <summary>
            <para>If <c>true</c> (or if the <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> <see cref="P:Godot.PacketPeer.AllowObjectDecoding"/> the MultiplayerAPI will allow encoding and decoding of object during RPCs/RSETs.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.RefuseNewNetworkConnections">
            <summary>
            <para>If <c>true</c>, the MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> refuses new incoming connections.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.NetworkPeer">
            <summary>
            <para>The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with <see cref="M:Godot.MultiplayerAPI.IsNetworkServer"/>) and will set root node's network mode to master (see NETWORK_MODE_* constants in <see cref="T:Godot.Node"/>), or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.SetRootNode(Godot.Node)">
            <summary>
            <para>Sets the base root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.</para>
            <para>This effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.SendBytes(System.Byte[],System.Int32,Godot.NetworkedMultiplayerPeer.TransferModeEnum)">
            <summary>
            <para>Sends the given raw <c>bytes</c> to a specific peer identified by <c>id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Default ID is <c>0</c>, i.e. broadcast to all peers.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.HasNetworkPeer">
            <summary>
            <para>Returns <c>true</c> if there is a <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> set.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetNetworkUniqueId">
            <summary>
            <para>Returns the unique peer ID of this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.IsNetworkServer">
            <summary>
            <para>Returns <c>true</c> if this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> is in server mode (listening for connections).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetRpcSenderId">
            <summary>
            <para>Returns the sender's peer ID for the RPC currently being executed.</para>
            <para>NOTE: If not inside an RPC this method will return 0.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.Poll">
            <summary>
            <para>Method used for polling the MultiplayerAPI. You only need to worry about this if you are using <see cref="P:Godot.Node.CustomMultiplayer"/> override or you set <see cref="P:Godot.SceneTree.MultiplayerPoll"/> to <c>false</c>. By default <see cref="T:Godot.SceneTree"/> will poll its MultiplayerAPI for you.</para>
            <para>NOTE: This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. <c>_process</c>, <c>physics</c>, <see cref="T:Godot.Thread"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.Clear">
            <summary>
            <para>Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetNetworkConnectedPeers">
            <summary>
            <para>Returns the peer IDs of all connected peers of this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Mutex">
            <summary>
            <para>A synchronization Mutex. Element used to synchronize multiple <see cref="T:Godot.Thread"/>s. Basically a binary <see cref="T:Godot.Semaphore"/>. Guarantees that only one thread can ever acquire this lock at a time. Can be used to protect a critical section. Be careful to avoid deadlocks.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.Lock">
            <summary>
            <para>Lock this <c>Mutex</c>, blocks until it is unlocked by the current owner.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.TryLock">
            <summary>
            <para>Try locking this <c>Mutex</c>, does not block. Returns <c>OK</c> on success, <c>ERR_BUSY</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.Unlock">
            <summary>
            <para>Unlock this <c>Mutex</c>, leaving it to other threads.</para>
            </summary>
        </member>
        <member name="P:Godot.NativeScript.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NativeScript.Library">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NativeScript.ScriptClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NativeScript.ScriptClassIconPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetClassDocumentation">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_class_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetMethodDocumentation(System.String)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_method_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetSignalDocumentation(System.String)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_signal_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetPropertyDocumentation(System.String)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_property_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.New(System.Object[])">
            <summary>
            <para>Constructs a new object of the base type with a script of this type already attached.</para>
            <para>Note: Any arguments passed to this function will be ignored and not passed to the native constructor function. This will change with in a future API extension.</para>
            </summary>
        </member>
        <member name="T:Godot.Navigation">
            <summary>
            <para>Provides navigation and pathfinding within a collection of <see cref="T:Godot.NavigationMesh"/>es. By default these will be automatically collected from child <see cref="T:Godot.NavigationMeshInstance"/> nodes, but they can also be added on the fly with <see cref="M:Godot.Navigation.NavmeshAdd(Godot.NavigationMesh,Godot.Transform,Godot.Object)"/>. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.</para>
            </summary>
        </member>
        <member name="P:Godot.Navigation.UpVector">
            <summary>
            <para>Defines which direction is up. By default this is <c>(0, 1, 0)</c>, which is the world up direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshAdd(Godot.NavigationMesh,Godot.Transform,Godot.Object)">
            <summary>
            <para>Adds a <see cref="T:Godot.NavigationMesh"/>. Returns an ID for use with <see cref="M:Godot.Navigation.NavmeshRemove(System.Int32)"/> or <see cref="M:Godot.Navigation.NavmeshSetTransform(System.Int32,Godot.Transform)"/>. If given, a <see cref="T:Godot.Transform2D"/> is applied to the polygon. The optional <c>owner</c> is used as return value for <see cref="M:Godot.Navigation.GetClosestPointOwner(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshSetTransform(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform applied to the <see cref="T:Godot.NavigationMesh"/> with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshRemove(System.Int32)">
            <summary>
            <para>Removes the <see cref="T:Godot.NavigationMesh"/> with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetSimplePath(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the path between two given points. Points are in local coordinate space. If <c>optimize</c> is <c>true</c> (the default), the agent properties associated with each <see cref="T:Godot.NavigationMesh"/> (raidus, height, etc.) are considered in the path calculation, otherwise they are ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the navigation point closest to the given line segment. When enabling <c>use_collision</c>, only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPoint(Godot.Vector3)">
            <summary>
            <para>Returns the navigation point closest to the point given. Points are in local coordinate space.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointNormal(Godot.Vector3)">
            <summary>
            <para>Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointOwner(Godot.Vector3)">
            <summary>
            <para>Returns the owner of the <see cref="T:Godot.NavigationMesh"/> which contains the navigation point closest to the point given. This is usually a <see cref="T:Godot.NavigationMeshInstance"/>. For meshes added via <see cref="M:Godot.Navigation.NavmeshAdd(Godot.NavigationMesh,Godot.Transform,Godot.Object)"/>, returns the owner that was given (or <c>null</c> if the <c>owner</c> parameter was omitted).</para>
            </summary>
        </member>
        <member name="T:Godot.Navigation2D">
            <summary>
            <para>Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of <see cref="T:Godot.NavigationPolygon"/> resources. By default these are automatically collected from child <see cref="T:Godot.NavigationPolygonInstance"/> nodes, but they can also be added on the fly with <see cref="M:Godot.Navigation2D.NavpolyAdd(Godot.NavigationPolygon,Godot.Transform2D,Godot.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolyAdd(Godot.NavigationPolygon,Godot.Transform2D,Godot.Object)">
            <summary>
            <para>Adds a <see cref="T:Godot.NavigationPolygon"/>. Returns an ID for use with <see cref="M:Godot.Navigation2D.NavpolyRemove(System.Int32)"/> or <see cref="M:Godot.Navigation2D.NavpolySetTransform(System.Int32,Godot.Transform2D)"/>. If given, a <see cref="T:Godot.Transform2D"/> is applied to the polygon. The optional <c>owner</c> is used as return value for <see cref="M:Godot.Navigation2D.GetClosestPointOwner(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolySetTransform(System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the transform applied to the <see cref="T:Godot.NavigationPolygon"/> with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolyRemove(System.Int32)">
            <summary>
            <para>Removes the <see cref="T:Godot.NavigationPolygon"/> with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetSimplePath(Godot.Vector2,Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the path between two given points. Points are in local coordinate space. If <c>optimize</c> is <c>true</c> (the default), the path is smoothed by merging path segments where possible.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPoint(Godot.Vector2)">
            <summary>
            <para>Returns the navigation point closest to the point given. Points are in local coordinate space.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPointOwner(Godot.Vector2)">
            <summary>
            <para>Returns the owner of the <see cref="T:Godot.NavigationPolygon"/> which contains the navigation point closest to the point given. This is usually a <see cref="T:Godot.NavigationPolygonInstance"/>. For polygons added via <see cref="M:Godot.Navigation2D.NavpolyAdd(Godot.NavigationPolygon,Godot.Transform2D,Godot.Object)"/>, returns the owner that was given (or <c>null</c> if the <c>owner</c> parameter was omitted).</para>
            </summary>
        </member>
        <member name="F:Godot.NavigationMesh.SamplePartitionWatershed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.NavigationMesh.SamplePartitionMonotone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.NavigationMesh.SamplePartitionLayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.SamplePartitionType__samplePartitionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Cell__size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Cell__height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__radius">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__maxClimb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__maxSlope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Region__minSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Region__mergeSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Edge__maxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Edge__maxError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Polygon__vertsPerPoly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Detail__sampleDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Detail__sampleMaxError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__lowHangingObstacles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__ledgeSpans">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__filterWalkableLowHeightSpans">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.SetVertices(Godot.Vector3[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetVertices">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.AddPolygon(System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetPolygonCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetPolygon(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.ClearPolygons">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.CreateFromMesh(Godot.Mesh)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMeshInstance.Navmesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationMeshInstance.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.NavigationPolygon">
            <summary>
            <para>There are two ways to create polygons. Either by using the <see cref="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])"/> method or using the <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> method.</para>
            <para>Using <see cref="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])"/>:</para>
            <para><code>
            var polygon = NavigationPolygon.new()
            var outline = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
            polygon.add_outline(outline)
            polygon.make_polygons_from_outlines()
            $NavigationPolygonInstance.navpoly = polygon
            </code></para>
            <para>Using <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> and indices of the vertices array.</para>
            <para><code>
            var polygon = NavigationPolygon.new()
            var vertices = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
            polygon.set_vertices(vertices)
            var indices = PoolIntArray(0, 3, 1)
            polygon.add_polygon(indices)
            $NavigationPolygonInstance.navpoly = polygon
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetVertices(Godot.Vector2[])">
            <summary>
            <para>Sets the vertices that can be then indexed to create polygons with the <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetVertices">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2"/> containing all the vertices being used to create the polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])">
            <summary>
            <para>Adds a polygon using the indices of the vertices you get when calling <see cref="M:Godot.NavigationPolygon.GetVertices"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygonCount">
            <summary>
            <para>Returns the count of all polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygon(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:System.Int32"/> containing the indices of the vertices of a created polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearPolygons">
            <summary>
            <para>Clears the array of polygons, but it doesn't clear the array of outlines and vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])">
            <summary>
            <para>Appends a <see cref="T:Godot.Vector2"/> that contains the vertices of an outline to the internal array that contains all the outlines. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> in order for this array to be converted to polygons that the engine will use.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutlineAtIndex(Godot.Vector2[],System.Int32)">
            <summary>
            <para>Adds a <see cref="T:Godot.Vector2"/> that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> in order for this array to be converted to polygons that the engine will use.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutlineCount">
            <summary>
            <para>Returns the number of outlines that were created in the editor or by script.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetOutline(System.Int32,Godot.Vector2[])">
            <summary>
            <para>Changes an outline created in the editor or by script. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> for the polygons to update.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutline(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2"/> containing the vertices of an outline that was created in the editor or by script.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.RemoveOutline(System.Int32)">
            <summary>
            <para>Removes an outline created in the editor or by script. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> for the polygons to update.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearOutlines">
            <summary>
            <para>Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.MakePolygonsFromOutlines">
            <summary>
            <para>Creates polygons from the outlines added in the editor or by script.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationPolygonInstance.Navpoly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NavigationPolygonInstance.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerENet">
            <summary>
            <para>A PacketPeer implementation that should be passed to <see cref="P:Godot.SceneTree.NetworkPeer"/> after being initialized as either a client or server. Events can then be handled by connecting to <see cref="T:Godot.SceneTree"/> signals.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.None">
            <summary>
            <para>No compression.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.RangeCoder">
            <summary>
            <para>ENet's buildin range encoding.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Fastlz">
            <summary>
            <para>FastLZ compression.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Zlib">
            <summary>
            <para>zlib compression.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Zstd">
            <summary>
            <para>ZStandard compression.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.CompressionMode">
            <summary>
            <para>The compression method used for network packets. Default is no compression. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.TransferChannel">
            <summary>
            <para>Set the default channel to be used to transfer data. By default this value is <c>-1</c> which means that ENet will only use 2 channels, one for reliable and one for unreliable packets. Channel <c>0</c> is reserved, and cannot be used. Setting this member to any value between <c>0</c> and <see cref="P:Godot.NetworkedMultiplayerENet.ChannelCount"/> (excluded) will force ENet to use that channel for sending data.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.ChannelCount">
            <summary>
            <para>The number of channels to be used by ENet. Default: <c>3</c>. Channels are used to separate different kinds of data. In realiable or ordered mode, for example, the packet delivery order is ensured on a per channel basis.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.AlwaysOrdered">
            <summary>
            <para>Always use <c>TRANSFER_MODE_ORDERED</c> in place of <c>TRANSFER_MODE_UNRELIABLE</c>. This is the only way to use ordering with the RPC system.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateServer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Create server that listens to connections via <c>port</c>. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use <see cref="M:Godot.NetworkedMultiplayerENet.SetBindIp(System.String)"/>. The default IP is the wildcard <c>*</c>, which listens on all available interfaces. <c>max_clients</c> is the maximum number of clients that are allowed at once, any number up to 4096 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see <see cref="M:Godot.NetworkedMultiplayerENet.CreateClient(System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>. Returns <c>OK</c> if a server was created, <c>ERR_ALREADY_IN_USE</c> if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call <see cref="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.Int32)"/> first) or <c>ERR_CANT_CREATE</c> if the server could not be created.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateClient(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Create client that connects to a server at <c>address</c> using specified <c>port</c>. The given address needs to be either a fully qualified domain name (e.g. <c>www.example.com</c>) or an IP address in IPv4 or IPv6 format (e.g. <c>192.168.1.1</c>). The <c>port</c> is the port the server is listening on. The <c>in_bandwidth</c> and <c>out_bandwidth</c> parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns <c>OK</c> if a client was created, <c>ERR_ALREADY_IN_USE</c> if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call <see cref="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.Int32)"/> first) or <c>ERR_CANT_CREATE</c> if the client could not be created. If <c>client_port</c> is specified, the client will also listen to the given port, this is useful in some NAT traversal technique.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.Int32)">
            <summary>
            <para>Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.DisconnectPeer(System.Int32,System.Boolean)">
            <summary>
            <para>Disconnect the given peer. If "now" is set to true, the connection will be closed immediately without flushing queued messages.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.SetBindIp(System.String)">
            <summary>
            <para>The IP used when creating a server. This is set to the wildcard <c>*</c> by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: <c>192.168.1.1</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPeerAddress(System.Int32)">
            <summary>
            <para>Returns the IP address of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPeerPort(System.Int32)">
            <summary>
            <para>Returns the remote port of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPacketChannel">
            <summary>
            <para>Returns the channel of the next packet that will be retrieved via <see cref="M:Godot.PacketPeer.GetPacket"/></para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetLastPacketChannel">
            <summary>
            <para>Returns the channel of the last packet fetched via <see cref="M:Godot.PacketPeer.GetPacket"/></para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer">
            <summary>
            <para>Manages the connection to network peers. Assigns unique IDs to each client connected to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TargetPeerBroadcast">
            <summary>
            <para>Packets are sent to the server and then redistributed to other peers.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TargetPeerServer">
            <summary>
            <para>Packets are sent to the server alone.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Disconnected">
            <summary>
            <para>The ongoing connection disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Connecting">
            <summary>
            <para>A connection attempt is ongoing.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Connected">
            <summary>
            <para>The connection attempt succeeded.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.Unreliable">
            <summary>
            <para>Packets are not acknowledged, no resend attempts are made for lost packets. Packets may arrive in any order. Potentially faster than <c>TRANSFER_MODE_UNRELIABLE_ORDERED</c>. Use for non-critical data, and always consider whether the order matters.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.UnreliableOrdered">
            <summary>
            <para>Packets are not acknowledged, no resend attempts are made for lost packets. Packets are received in the order they were sent in. Potentially faster than <c>TRANSFER_MODE_RELIABLE</c>. Use for non-critical data or data that would be outdated if received late due to resend attempt(s) anyway, for example movement and positional data.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.Reliable">
            <summary>
            <para>Packets must be received and resend attempts should be made until the packets are acknowledged. Packets must be received in the order they were sent in. Most reliable transfer mode, but potentially slowest due to the overhead. Use for critical data that must be transmitted and arrive in order, for example an ability being triggered or a chat message. Consider carefully if the information really is critical, and use sparingly.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.RefuseNewConnections">
            <summary>
            <para>If <c>true</c>, this <c>NetworkedMultiplayerPeer</c> refuses new connections. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.TransferMode">
            <summary>
            <para>The manner in which to send packets to the <c>target_peer</c>. See <see cref="T:Godot.NetworkedMultiplayerPeer.TransferModeEnum"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)">
            <summary>
            <para>Sets the peer to which packets will be sent.</para>
            <para>The <c>id</c> can be one of: <c>TARGET_PEER_BROADCAST</c> to send to all connected peers, <c>TARGET_PEER_SERVER</c> to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. Default: <c>TARGET_PEER_BROADCAST</c></para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetPacketPeer">
            <summary>
            <para>Returns the ID of the <c>NetworkedMultiplayerPeer</c> who sent the most recent packet.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.Poll">
            <summary>
            <para>Waits up to 1 second to receive a new network event.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetConnectionStatus">
            <summary>
            <para>Returns the current state of the connection. See <see cref="T:Godot.NetworkedMultiplayerPeer.ConnectionStatus"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetUniqueId">
            <summary>
            <para>Returns the ID of this <c>NetworkedMultiplayerPeer</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.NinePatchRect">
            <summary>
            <para>Better known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3 by 3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.Stretch">
            <summary>
            <para>Doesn't do anything at the time of writing. Default value for <c>axis_stretch_horizontal</c> and <c>axis_stretch_vertical</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.Tile">
            <summary>
            <para>Doesn't do anything at the time of writing.</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.TileFit">
            <summary>
            <para>Doesn't do anything at the time of writing.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.Texture">
            <summary>
            <para>The node's texture resource.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.DrawCenter">
            <summary>
            <para>If <c>true</c>, draw the panel's center. Else, only draw the 9-slice's borders. Default value: <c>true</c></para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.RegionRect">
            <summary>
            <para>Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginLeft">
            <summary>
            <para>The height of the 9-slice's left column.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginTop">
            <summary>
            <para>The height of the 9-slice's top row.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginRight">
            <summary>
            <para>The height of the 9-slice's right column.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginBottom">
            <summary>
            <para>The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchHorizontal">
            <summary>
            <para>Doesn't do anything at the time of writing.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchVertical">
            <summary>
            <para>Doesn't do anything at the time of writing.</para>
            </summary>
        </member>
        <member name="T:Godot.Node2D">
            <summary>
            <para>A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Position">
            <summary>
            <para>Position, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Rotation">
            <summary>
            <para>Rotation in radians, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.RotationDegrees">
            <summary>
            <para>Rotation in degrees, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Scale">
            <summary>
            <para>The node's scale. Unscaled value: <c>(1, 1)</c></para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Transform">
            <summary>
            <para>Local <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalPosition">
            <summary>
            <para>Global position.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotation">
            <summary>
            <para>Global rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotationDegrees">
            <summary>
            <para>Global rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalScale">
            <summary>
            <para>Global scale.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalTransform">
            <summary>
            <para>Global <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZIndex">
            <summary>
            <para>Z-index. Controls the order in which the nodes render. A node with a higher Z-index will display in front of others.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZAsRelative">
            <summary>
            <para>If <c>true</c>, the node's Z-index is relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.Rotate(System.Single)">
            <summary>
            <para>Applies a rotation to the node, in radians, starting from its current rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalX(System.Single,System.Boolean)">
            <summary>
            <para>Applies a local translation on the node's X axis based on the <see cref="M:Godot.Node._Process(System.Single)"/>'s <c>delta</c>. If <c>scaled</c> is false, normalizes the movement.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalY(System.Single,System.Boolean)">
            <summary>
            <para>Applies a local translation on the node's Y axis based on the <see cref="M:Godot.Node._Process(System.Single)"/>'s <c>delta</c>. If <c>scaled</c> is false, normalizes the movement.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.Translate(Godot.Vector2)">
            <summary>
            <para>Translates the node by the given <c>offset</c> in local coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GlobalTranslate(Godot.Vector2)">
            <summary>
            <para>Adds the 'offset' vector to the node's global position.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ApplyScale(Godot.Vector2)">
            <summary>
            <para>Multiplies the current scale by the 'ratio' vector.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.LookAt(Godot.Vector2)">
            <summary>
            <para>Rotates the node so it points towards the 'point'.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetAngleTo(Godot.Vector2)">
            <summary>
            <para>Returns the angle between the node and the 'point' in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToLocal(Godot.Vector2)">
            <summary>
            <para>Converts a global point's coordinates to local coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToGlobal(Godot.Vector2)">
            <summary>
            <para>Converts a local point's coordinates to global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetRelativeTransformToParent(Godot.Node)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> relative to this node's parent.</para>
            </summary>
        </member>
        <member name="T:Godot.NoiseTexture">
            <summary>
            <para>Uses an <see cref="T:Godot.OpenSimplexNoise"/> to fill the texture data. You can specify the texture size but keep in mind that larger textures will take longer to generate and seamless noise only works with square sized textures.</para>
            <para>NoiseTexture can also generate normalmap textures.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Width">
            <summary>
            <para>Width of the generated texture.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Height">
            <summary>
            <para>Height of the generated texture.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Seamless">
            <summary>
            <para>Whether the texture can be tiled without visible seams or not. Seamless textures take longer to generate.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.AsNormalmap">
            <summary>
            <para>If true, the resulting texture contains a normal map created from the original noise interpreted as a bump map.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.BumpStrength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Noise">
            <summary>
            <para>The <see cref="T:Godot.OpenSimplexNoise"/> instance used to generate the noise.</para>
            </summary>
        </member>
        <member name="T:Godot.OccluderPolygon2D">
            <summary>
            <para>Editor facility that helps you draw a 2D polygon used as resource for <see cref="T:Godot.LightOccluder2D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.Disabled">
            <summary>
            <para>Culling mode for the occlusion. Disabled means no culling. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.Clockwise">
            <summary>
            <para>Culling mode for the occlusion. Sets the culling to be in clockwise direction. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.CounterClockwise">
            <summary>
            <para>Culling mode for the occlusion. Sets the culling to be in counter clockwise direction. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Closed">
            <summary>
            <para>If <c>true</c>, closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. Default value <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.CullMode">
            <summary>
            <para>Set the direction of the occlusion culling when not <c>CULL_DISABLED</c>. Default value <c>DISABLED</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Polygon">
            <summary>
            <para>A <see cref="T:Godot.Vector2"/> array with the index for polygon's vertices positions. Note that the returned value is a copy of the underlying array, rather than a reference.</para>
            </summary>
        </member>
        <member name="T:Godot.OmniLight">
            <summary>
            <para>An Omnidirectional light is a type of <see cref="T:Godot.Light"/> that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.</para>
            </summary>
        </member>
        <member name="F:Godot.OmniLight.ShadowMode.DualParaboloid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.OmniLight.ShadowMode.Cube">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.OmniLight.ShadowDetail.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.OmniLight.ShadowDetail.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniRange">
            <summary>
            <para>Maximum distance the light affects.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniAttenuation">
            <summary>
            <para>The light's attenuation (drop-off) curve. A number of presets are available in the Inspector.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniShadowMode">
            <summary>
            <para>See <see cref="T:Godot.OmniLight.ShadowMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniShadowDetail">
            <summary>
            <para>See <see cref="T:Godot.OmniLight.ShadowDetail"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.OpenSimplexNoise">
            <summary>
            <para>This resource allows you to configure and sample a fractal noise space. Here is a brief usage example that configures an OpenSimplexNoise and gets samples at various positions and dimensions:</para>
            <para><code>
            var noise = OpenSimplexNoise.new()
            
            # Configure
            noise.seed = randi()
            noise.octaves = 4
            noise.period = 20.0
            noise.persistence = 0.8
            
            # Sample
            print("Values:")
            print(noise.get_noise_2d(1.0, 1.0))
            print(noise.get_noise_3d(0.5, 3.0, 15.0))
            print(noise.get_noise_4d(0.5, 1.9, 4.7, 0.0))
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Seed">
            <summary>
            <para>Seed used to generate random values, different seeds will generate different noise maps.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Octaves">
            <summary>
            <para>Number of OpenSimplex noise layers that are sampled to get the fractal noise.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Period">
            <summary>
            <para>Period of the base octave. A lower period results in a higher-frequency noise (more value changes across the same distance).</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Persistence">
            <summary>
            <para>Contribution factor of the different octaves. A <c>persistence</c> value of 1 means all the octaves have the same contribution, a value of 0.5 means each octave contributes half as much as the previous one.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Lacunarity">
            <summary>
            <para>Difference in period between <see cref="P:Godot.OpenSimplexNoise.Octaves"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetImage(System.Int32,System.Int32)">
            <summary>
            <para>Generate a noise image with the requested <c>width</c> and <c>height</c>, based on the current noise parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetSeamlessImage(System.Int32)">
            <summary>
            <para>Generate a tileable noise image, based on the current noise parameters. Generated seamless images are always square (<c>size</c> x <c>size</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise2d(System.Single,System.Single)">
            <summary>
            <para>Returns the 2D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise3d(System.Single,System.Single,System.Single)">
            <summary>
            <para>Returns the 3D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise4d(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Returns the 4D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise2dv(Godot.Vector2)">
            <summary>
            <para>Returns the 2D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise3dv(Godot.Vector3)">
            <summary>
            <para>Returns the 3D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="T:Godot.OptionButton">
            <summary>
            <para>OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text.</para>
            </summary>
        </member>
        <member name="P:Godot.OptionButton.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddItem(System.String,System.Int32)">
            <summary>
            <para>Add an item, with text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddIconItem(Godot.Texture,System.String,System.Int32)">
            <summary>
            <para>Add an item, with a "texture" icon, text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Set the text of an item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            <para>Set the icon of an item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemId(System.Int32,System.Int32)">
            <summary>
            <para>Set the ID of an item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemText(System.Int32)">
            <summary>
            <para>Return the text of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemIcon(System.Int32)">
            <summary>
            <para>Return the icon of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemId(System.Int32)">
            <summary>
            <para>Return the ID of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemIndex(System.Int32)">
            <summary>
            <para>Return the index of the item with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemMetadata(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.IsItemDisabled(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemCount">
            <summary>
            <para>Return the amount of items in the OptionButton.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddSeparator">
            <summary>
            <para>Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Clear">
            <summary>
            <para>Clear all the items in the <c>OptionButton</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Select(System.Int32)">
            <summary>
            <para>Select an item by index and make it the current item.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetPopup">
            <summary>
            <para>Return the <see cref="T:Godot.PopupMenu"/> contained in this button.</para>
            </summary>
        </member>
        <member name="T:Godot.OS">
            <summary>
            <para>Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.VideoDriver.Gles2">
            <summary>
            <para>The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.VideoDriver.Gles3">
            <summary>
            <para>The GLES3 rendering backend. It uses OpenGL ES 3.0 on mobile devices, OpenGL 3.3 on desktop platforms and WebGL 2.0 on the web.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Desktop">
            <summary>
            <para>Desktop directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Dcim">
            <summary>
            <para>DCIM (Digital Camera Images) directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Documents">
            <summary>
            <para>Documents directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Downloads">
            <summary>
            <para>Downloads directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Movies">
            <summary>
            <para>Movies directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Music">
            <summary>
            <para>Music directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Pictures">
            <summary>
            <para>Pictures directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Ringtones">
            <summary>
            <para>Ringtones directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.Landscape">
            <summary>
            <para>Landscape screen orientation.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.Portrait">
            <summary>
            <para>Portrait screen orientation.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.ReverseLandscape">
            <summary>
            <para>Reverse landscape screen orientation.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.ReversePortrait">
            <summary>
            <para>Reverse portrait screen orientation.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.SensorLandscape">
            <summary>
            <para>Uses landscape or reverse landscape based on the hardware sensor.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.SensorPortrait">
            <summary>
            <para>Uses portrait or reverse portrait based on the hardware sensor.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.ScreenOrientationEnum.Sensor">
            <summary>
            <para>Uses most suitable orientation based on the hardware sensor.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.PowerState.Unknown">
            <summary>
            <para>Unknown powerstate.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.PowerState.OnBattery">
            <summary>
            <para>Unplugged, running on battery.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.PowerState.NoBattery">
            <summary>
            <para>Plugged in, no battery available.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.PowerState.Charging">
            <summary>
            <para>Plugged in, battery charging.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.PowerState.Charged">
            <summary>
            <para>Plugged in, battery fully charged.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.January">
            <summary>
            <para>January.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.February">
            <summary>
            <para>February.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.March">
            <summary>
            <para>March.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.April">
            <summary>
            <para>April.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.May">
            <summary>
            <para>May.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.June">
            <summary>
            <para>June.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.July">
            <summary>
            <para>July.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.August">
            <summary>
            <para>August.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.September">
            <summary>
            <para>September.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.October">
            <summary>
            <para>October.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.November">
            <summary>
            <para>November.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.December">
            <summary>
            <para>December.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Sunday">
            <summary>
            <para>Sunday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Monday">
            <summary>
            <para>Monday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Tuesday">
            <summary>
            <para>Tuesday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Wednesday">
            <summary>
            <para>Wednesday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Thursday">
            <summary>
            <para>Thursday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Friday">
            <summary>
            <para>Friday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Saturday">
            <summary>
            <para>Saturday.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.Clipboard">
            <summary>
            <para>The clipboard from the host OS. Might be unavailable on some platforms.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.CurrentScreen">
            <summary>
            <para>The current screen index (starting from 0).</para>
            </summary>
        </member>
        <member name="P:Godot.OS.ExitCode">
            <summary>
            <para>The exit code passed to the OS when the main loop exits.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.VsyncEnabled">
            <summary>
            <para>If <c>true</c>, vertical synchronization (Vsync) is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.LowProcessorUsageMode">
            <summary>
            <para>If <c>true</c>, the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.KeepScreenOn">
            <summary>
            <para>If <c>true</c>, the engine tries to keep the screen on while the game is running. Useful on mobile.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.ScreenOrientation">
            <summary>
            <para>The current screen orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowBorderless">
            <summary>
            <para>If <c>true</c>, removes the window frame.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowPerPixelTransparencyEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.OS.WindowFullscreen">
            <summary>
            <para>If <c>true</c>, the window is fullscreen.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowMaximized">
            <summary>
            <para>If <c>true</c>, the window is maximized.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowMinimized">
            <summary>
            <para>If <c>true</c>, the window is minimized.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowResizable">
            <summary>
            <para>If <c>true</c>, the window is resizable by the user.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowPosition">
            <summary>
            <para>The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.WindowSize">
            <summary>
            <para>The size of the window (without counting window manager decorations).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetVideoDriverCount">
            <summary>
            <para>Returns the number of video drivers supported on the current platform.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetVideoDriverName(Godot.OS.VideoDriver)">
            <summary>
            <para>Returns the name of the video driver matching the given <c>driver</c> index. This index is a value from <see cref="T:Godot.OS.VideoDriver"/>, and you can use <see cref="M:Godot.OS.GetCurrentVideoDriver"/> to get the current backend's index.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetCurrentVideoDriver">
            <summary>
            <para>Returns the currently used video driver, using one of the values from <see cref="T:Godot.OS.VideoDriver"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetAudioDriverCount">
            <summary>
            <para>Returns the total number of available audio drivers.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetAudioDriverName(System.Int32)">
            <summary>
            <para>Returns the audio driver name for the given index.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetConnectedMidiInputs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OS.OpenMidiInputs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OS.CloseMidiInputs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenCount">
            <summary>
            <para>Returns the number of displays attached to the host machine.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenPosition(System.Int32)">
            <summary>
            <para>Returns the position of the specified screen by index. If no screen index is provided, the current screen will be used.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenSize(System.Int32)">
            <summary>
            <para>Returns the dimensions in pixels of the specified screen.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenDpi(System.Int32)">
            <summary>
            <para>Returns the dots per inch density of the specified screen.</para>
            <para>On Android Devices, the actual screen densities are grouped into six generalized densities:</para>
            <para>ldpi    - 120 dpi</para>
            <para>mdpi    - 160 dpi</para>
            <para>hdpi    - 240 dpi</para>
            <para>xhdpi   - 320 dpi</para>
            <para>xxhdpi  - 480 dpi</para>
            <para>xxxhdpi - 640 dpi</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetWindowSafeArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OS.SetWindowAlwaysOnTop(System.Boolean)">
            <summary>
            <para>Sets whether the window should always be on top.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsWindowAlwaysOnTop">
            <summary>
            <para>Returns <c>true</c> if the window should always be on top of other windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.RequestAttention">
            <summary>
            <para>Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetRealWindowSize">
            <summary>
            <para>Returns the window size including decorations like window borders.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.CenterWindow">
            <summary>
            <para>Centers the window on the screen if in windowed mode.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.MoveWindowToForeground">
            <summary>
            <para>Moves the window to the front.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetImeActive(System.Boolean)">
            <summary>
            <para>Sets whether IME input mode should be enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetImePosition(Godot.Vector2)">
            <summary>
            <para>Sets position of IME suggestion list popup (in window coordinates).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetImeSelection">
            <summary>
            <para>Returns IME selection range.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetImeText">
            <summary>
            <para>Returns IME intermediate text.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasTouchscreenUiHint">
            <summary>
            <para>Returns <c>true</c> if the device has a touchscreen or emulates one.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetWindowTitle(System.String)">
            <summary>
            <para>Sets the window title to the specified string.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessorCount">
            <summary>
            <para>Returns the number of cores available in the host machine.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetExecutablePath">
            <summary>
            <para>Returns the path to the current engine executable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.Execute(System.String,System.String[],System.Boolean,Godot.Collections.Array)">
            <summary>
            <para>Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.</para>
            <para>The arguments are used in the given order and separated by a space, so <c>OS.execute('ping', ['-w', '3', 'godotengine.org'], false)</c> will resolve to <c>ping -w 3 godotengine.org</c> in the system's shell.</para>
            <para>This method has slightly different behaviour based on whether the <c>blocking</c> mode is enabled.</para>
            <para>When <c>blocking</c> is enabled, the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the <c>output</c> array as a single string. When the process terminates, the Godot thread will resume execution.</para>
            <para>When <c>blocking</c> is disabled, the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so <c>output</c> will be empty.</para>
            <para>The return value also depends on the blocking mode. When blocking, the method will return -2 (no process ID information is available in blocking mode). When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with <see cref="M:Godot.OS.Kill(System.Int32)"/>). If the process forking (non-blocking) or opening (blocking) fails, the method will return -1.</para>
            <para>Example of blocking mode and retrieving the shell output:</para>
            <para><code>
            var output = []
            OS.execute('ls', ['-l', '/tmp'], true, output)
            </code></para>
            <para>Example of non-blocking mode, running another instance of the project and storing its process ID:</para>
            <para><code>
            var pid = OS.execute(OS.get_executable_path(), [], false)
            </code></para>
            <para>If you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:</para>
            <para><code>
            OS.execute('CMD.exe', ['/C', 'cd %TEMP% &amp;&amp; dir'], true, output)
            </code></para>
            <param name="output">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.OS.Kill(System.Int32)">
            <summary>
            <para>Kill (terminate) the process identified by the given process ID (<c>pid</c>), e.g. the one returned by <see cref="M:Godot.OS.Execute(System.String,System.String[],System.Boolean,Godot.Collections.Array)"/> in non-blocking mode.</para>
            <para>Note that this method can also be used to kill processes that were not spawned by the game.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.ShellOpen(System.String)">
            <summary>
            <para>Requests the OS to open a resource with the most appropriate program. For example.</para>
            <para><c>OS.shell_open("C:\\Users\name\Downloads")</c> on Windows opens the file explorer at the downloads folders of the user.</para>
            <para><c>OS.shell_open("https://godotengine.org")</c> opens the default web browser on the official Godot website.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessId">
            <summary>
            <para>Returns the game process ID</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetEnvironment(System.String)">
            <summary>
            <para>Returns an environment variable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasEnvironment(System.String)">
            <summary>
            <para>Returns <c>true</c> if an environment variable exists.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetName">
            <summary>
            <para>Returns the name of the host OS. Possible values are: "Android", "Haiku", "iOS", "HTML5", "OSX", "Server", "Windows", "UWP", "X11".</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetCmdlineArgs">
            <summary>
            <para>Returns the command line arguments passed to the engine.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetime(System.Boolean)">
            <summary>
            <para>Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDate(System.Boolean)">
            <summary>
            <para>Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTime(System.Boolean)">
            <summary>
            <para>Returns current time as a dictionary of keys: hour, minute, second.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTimeZoneInfo">
            <summary>
            <para>Returns the current time zone as a dictionary with the keys: bias and name.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTime">
            <summary>
            <para>Returns the current unix epoch timestamp.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetimeFromUnixTime(System.Int32)">
            <summary>
            <para>Get a dictionary of time values when given epoch time.</para>
            <para>Dictionary Time values will be a union of values from <see cref="M:Godot.OS.GetTime(System.Boolean)"/> and <see cref="M:Godot.OS.GetDate(System.Boolean)"/> dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTimeFromDatetime(Godot.Collections.Dictionary)">
            <summary>
            <para>Get an epoch time value from a dictionary of time values.</para>
            <para><c>datetime</c> must be populated with the following keys: year, month, day, hour, minute, second.</para>
            <para>You can pass the output from <see cref="M:Godot.OS.GetDatetimeFromUnixTime(System.Int32)"/> directly into this function. Daylight savings time (dst), if present, is ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemTimeSecs">
            <summary>
            <para>Returns the epoch time of the operating system in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemTimeMsecs">
            <summary>
            <para>Returns the epoch time of the operating system in milliseconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetIcon(Godot.Image)">
            <summary>
            <para>Sets the game's icon.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DelayUsec(System.Int32)">
            <summary>
            <para>Delay execution of the current thread by given microseconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DelayMsec(System.Int32)">
            <summary>
            <para>Delay execution of the current thread by given milliseconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTicksMsec">
            <summary>
            <para>Returns the amount of time passed in milliseconds since the engine started.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTicksUsec">
            <summary>
            <para>Returns the amount of time passed in microseconds since the engine started.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetSplashTickMsec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.OS.GetLocale">
            <summary>
            <para>Returns the host OS locale.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetLatinKeyboardVariant">
            <summary>
            <para>Returns the current latin keyboard variant as a String.</para>
            <para>Possible return values are: "QWERTY", "AZERTY", "QZERTY", "DVORAK", "NEO", "COLEMAK" or "ERROR".</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetModelName">
            <summary>
            <para>Returns the model name of the current device.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.CanDraw">
            <summary>
            <para>Returns <c>true</c> if the host OS allows drawing.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsUserfsPersistent">
            <summary>
            <para>If <c>true</c>, the <c>user://</c> file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsStdoutVerbose">
            <summary>
            <para>Returns <c>true</c> if the engine was executed with -v (verbose stdout).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.CanUseThreads">
            <summary>
            <para>Returns <c>true</c> if the current host platform is using multiple threads.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsDebugBuild">
            <summary>
            <para>Returns <c>true</c> if the build is a debug build.</para>
            <para>Returns <c>true</c> when running in the editor.</para>
            <para>Returns <c>false</c> if the build is a release build.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DumpMemoryToFile(System.String)">
            <summary>
            <para>Dumps the memory allocation ringlist to a file (only works in debug).</para>
            <para>Entry format per line: "Address - Size - Description".</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DumpResourcesToFile(System.String)">
            <summary>
            <para>Dumps all used resources to file (only works in debug).</para>
            <para>Entry format per line: "Resource Type : Resource Location".</para>
            <para>At the end of the file is a statistic of all used Resource Types.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasVirtualKeyboard">
            <summary>
            <para>Returns <c>true</c> if the platform has a virtual keyboard, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.ShowVirtualKeyboard(System.String)">
            <summary>
            <para>Shows the virtual keyboard if the platform has one. The existing_text parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HideVirtualKeyboard">
            <summary>
            <para>Hides the virtual keyboard if it is shown, does nothing otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetVirtualKeyboardHeight">
            <summary>
            <para>Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or it is currently hidden.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesInUse(System.Boolean)">
            <summary>
            <para>Shows all resources currently used by the game.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllResources(System.String)">
            <summary>
            <para>Shows all resources in the game. Optionally the list can be written to a file.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryUsage">
            <summary>
            <para>Returns the amount of static memory being used by the program in bytes.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryPeakUsage">
            <summary>
            <para>Returns the max amount of static memory used (only works in debug).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDynamicMemoryUsage">
            <summary>
            <para>Returns the total amount of dynamic memory used (only works in debug).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUserDataDir">
            <summary>
            <para>Returns the absolute directory path where user data is written (<c>user://</c>).</para>
            <para>On Linux, this is <c>~/.local/share/godot/app_userdata/[project_name]</c>, or <c>~/.local/share/[custom_name]</c> if <c>use_custom_user_dir</c> is set.</para>
            <para>On macOS, this is <c>~/Library/Application Support/Godot/app_userdata/[project_name]</c>, or <c>~/Library/Application Support/[custom_name]</c> if <c>use_custom_user_dir</c> is set.</para>
            <para>On Windows, this is <c>%APPDATA%/Godot/app_userdata/[project_name]</c>, or <c>%APPDATA%/[custom_name]</c> if <c>use_custom_user_dir</c> is set.</para>
            <para>If the project name is empty, <c>user://</c> falls back to <c>res://</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemDir(Godot.OS.SystemDir)">
            <summary>
            <para>Returns the actual path to commonly used folders across different platforms. Available locations are specified in <see cref="T:Godot.OS.SystemDir"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUniqueId">
            <summary>
            <para>Returns a string that is unique to the device.</para>
            <para>Returns empty string on HTML5 and UWP which are not supported yet.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsOkLeftAndCancelRight">
            <summary>
            <para>Returns <c>true</c> if the "Okay" button should appear on the left and "Cancel" on the right.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllTexturesBySize">
            <summary>
            <para>Shows the list of loaded textures sorted by size in memory.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesByType(System.String[])">
            <summary>
            <para>Shows the number of resources loaded by the game of the given types.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoPlay(System.String,System.Single,System.String,System.String)">
            <summary>
            <para>Plays native video from the specified path, at the given volume and with audio and subtitle tracks.</para>
            <para>Note: This method is only implemented on Android and iOS, and the current Android implementation does not support the <c>volume</c>, <c>audio_track</c> and <c>subtitle_track</c> options.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoIsPlaying">
            <summary>
            <para>Returns <c>true</c> if native video is playing.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoStop">
            <summary>
            <para>Stops native video playback.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoPause">
            <summary>
            <para>Pauses native video playback.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoUnpause">
            <summary>
            <para>Resumes native video playback.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetScancodeString(System.Int32)">
            <summary>
            <para>Returns the given scancode as a string (e.g. Return values: "Escape", "Shift+Escape").</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsScancodeUnicode(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the input code has a unicode character.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.FindScancodeFromString(System.String)">
            <summary>
            <para>Returns the scancode of the given string (e.g. "Escape")</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetUseFileAccessSaveAndSwap(System.Boolean)">
            <summary>
            <para>Enables backup saves if <c>enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.Alert(System.String,System.String)">
            <summary>
            <para>Displays a modal dialog box utilizing the host OS.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetThreadName(System.String)">
            <summary>
            <para>Sets the name of the current thread.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasFeature(System.String)">
            <summary>
            <para>Returns <c>true</c> if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. See feature tags documentation.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerState">
            <summary>
            <para>Returns the current state of the device regarding battery and power. See <c>POWERSTATE_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerSecondsLeft">
            <summary>
            <para>Returns the time in seconds before the device runs out of battery.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerPercentLeft">
            <summary>
            <para>Returns the amount of battery left in the device as a percentage.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.RequestPermission(System.String)">
            <summary>
            <para>At the moment this function is only used by <c>AudioDriverOpenSL</c> to request permission for <c>RECORD_AUDIO</c> on Android.</para>
            </summary>
        </member>
        <member name="P:Godot.PackedDataContainer.__Data___">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainer.Pack(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainer.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainerRef.Size">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PackedScene">
            <summary>
            <para>A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.</para>
            <para>Can be used to save a node to a file. When saving, the node as well as all the node it owns get saved (see <c>owner</c> property on <see cref="T:Godot.Node"/>). Note that the node doesn't need to own itself.</para>
            <para>Example of saving a node with different owners: The following example creates 3 objects: <c>Node2D</c> (<c>node</c>), <c>RigidBody2D</c> (<c>rigid</c>) and <c>CollisionObject2D</c> (<c>collision</c>). <c>collision</c> is a child of <c>rigid</c> which is a child of <c>node</c>. Only <c>rigid</c> is owned by <c>node</c> and <c>pack</c> will therefore only save those two nodes, but not <c>collision</c>.</para>
            <para><code>
            # create the objects
            var node = Node2D.new()
            var rigid = RigidBody2D.new()
            var collision = CollisionShape2D.new()
            
            # create the object hierarchy
            rigid.add_child(collision)
            node.add_child(rigid)
            
            # change owner of rigid, but not of collision
            rigid.owner = node
            
            var scene = PackedScene.new()
            # only node and rigid are now packed
            var result = scene.pack(node)
            if result == OK:
                ResourceSaver.save("res://path/name.scn", scene) # or user://...
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Disabled">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, blocks edits to the scene state.</para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Instance">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene. Requires tools compiled.</para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Main">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled.</para>
            </summary>
        </member>
        <member name="P:Godot.PackedScene._Bundled">
            <summary>
            <para>A dictionary representation of the scene contents.</para>
            <para>Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for base scene children overrides, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Pack(Godot.Node)">
            <summary>
            <para>Pack will ignore any sub-nodes not owned by given node. See <see cref="P:Godot.Node.Owner"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)">
            <summary>
            <para>Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers <see cref="T:Godot.Node"/>'s <c>NOTIFICATION_INSTANCED</c> notification on the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.CanInstance">
            <summary>
            <para>Returns <c>true</c> if the scene file has nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.GetState">
            <summary>
            <para>Returns the <c>SceneState</c> representing the scene file contents.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeer">
            <summary>
            <para>PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.</para>
            </summary>
        </member>
        <member name="P:Godot.PacketPeer.AllowObjectDecoding">
            <summary>
            <para>Deprecated. Use <c>get_var</c> and <c>put_var</c> parameters instead.</para>
            <para>If <c>true</c> the PacketPeer will allow encoding and decoding of object via <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/> and <see cref="M:Godot.PacketPeer.PutVar(System.Object,System.Boolean)"/>.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetVar(System.Boolean)">
            <summary>
            <para>Get a Variant. When <c>allow_objects</c> (or <see cref="P:Godot.PacketPeer.AllowObjectDecoding"/>) is <c>true</c> decoding objects is allowed.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutVar(System.Object,System.Boolean)">
            <summary>
            <para>Send a Variant as a packet. When <c>full_objects</c> (or <see cref="P:Godot.PacketPeer.AllowObjectDecoding"/>) is <c>true</c> encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacket">
            <summary>
            <para>Get a raw packet.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutPacket(System.Byte[])">
            <summary>
            <para>Send a raw packet.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacketError">
            <summary>
            <para>Return the error state of the last packet received (via <see cref="M:Godot.PacketPeer.GetPacket"/> and <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetAvailablePacketCount">
            <summary>
            <para>Return the number of packets currently available in the ring-buffer.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeerStream">
            <summary>
            <para>PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.</para>
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.InputBufferMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.OutputBufferMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.StreamPeer">
            <summary>
            <para>The wrapped <see cref="T:Godot.StreamPeer"/> object.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeerUDP">
            <summary>
            <para>UDP packet peer. Can be used to send raw UDP packets as well as <c>Variant</c>s.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Make this <c>PacketPeerUDP</c> listen on the "port" binding to "bind_address" with a buffer size "recv_buf_size".</para>
            <para>If "bind_address" is set as "*" (default), the peer will listen on all available addresses (both IPv4 and IPv6).</para>
            <para>If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the peer will listen on all available addresses matching that IP type.</para>
            <para>If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Close">
            <summary>
            <para>Close the UDP socket the <c>PacketPeerUDP</c> is currently listening on.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Wait">
            <summary>
            <para>Wait for a packet to arrive on the listening port, see <see cref="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.IsListening">
            <summary>
            <para>Return whether this <c>PacketPeerUDP</c> is listening.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketIp">
            <summary>
            <para>Return the IP of the remote peer that sent the last packet(that was received with <see cref="M:Godot.PacketPeer.GetPacket"/> or <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketPort">
            <summary>
            <para>Return the port of the remote peer that sent the last packet(that was received with <see cref="M:Godot.PacketPeer.GetPacket"/> or <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.SetDestAddress(System.String,System.Int32)">
            <summary>
            <para>Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.</para>
            </summary>
        </member>
        <member name="T:Godot.Panel">
            <summary>
            <para>Panel is a <see cref="T:Godot.Control"/> that displays an opaque background. It's commonly used as a parent and container for other types of <see cref="T:Godot.Control"/> nodes.</para>
            </summary>
        </member>
        <member name="T:Godot.PanelContainer">
            <summary>
            <para>Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.</para>
            </summary>
        </member>
        <member name="T:Godot.PanoramaSky">
            <summary>
            <para>A resource referenced in an <see cref="T:Godot.Environment"/> that is used to draw a background. The Panorama sky functions similar to skyboxes in other engines except it uses a equirectangular sky map instead of a cube map.</para>
            </summary>
        </member>
        <member name="P:Godot.PanoramaSky.Panorama">
            <summary>
            <para><see cref="T:Godot.Texture"/> to be applied to the PanoramaSky.</para>
            </summary>
        </member>
        <member name="T:Godot.ParallaxBackground">
            <summary>
            <para>A ParallaxBackground uses one or more <see cref="T:Godot.ParallaxLayer"/> child nodes to create a parallax effect. Each <see cref="T:Godot.ParallaxLayer"/> can move at a different speed using <see cref="P:Godot.ParallaxLayer.MotionOffset"/>. This creates an illusion of depth in a 2D game. If not used with a <see cref="T:Godot.Camera2D"/>, you must manually calculate the <see cref="P:Godot.ParallaxBackground.ScrollOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollOffset">
            <summary>
            <para>The ParallaxBackground's scroll value. Calculated automatically when using a <see cref="T:Godot.Camera2D"/>, but can be used to manually manage scrolling when no camera is present.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseOffset">
            <summary>
            <para>Base position offset of all <see cref="T:Godot.ParallaxLayer"/> children.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseScale">
            <summary>
            <para>Base motion scale of all <see cref="T:Godot.ParallaxLayer"/> children.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitBegin">
            <summary>
            <para>Top left limits for scrolling to begin. If the camera is outside of this limit the background will stop scrolling. Must be lower than <see cref="P:Godot.ParallaxBackground.ScrollLimitEnd"/> to work.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitEnd">
            <summary>
            <para>Right bottom limits for scrolling to end. If the camera is outside of this limit the background will stop scrolling. Must be higher than <see cref="P:Godot.ParallaxBackground.ScrollLimitBegin"/> to work.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollIgnoreCameraZoom">
            <summary>
            <para>If <c>true</c>, elements in <see cref="T:Godot.ParallaxLayer"/> child aren't affected by the zoom level of the camera.</para>
            </summary>
        </member>
        <member name="T:Godot.ParallaxLayer">
            <summary>
            <para>A ParallaxLayer must be the child of a <see cref="T:Godot.ParallaxBackground"/> node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the <see cref="P:Godot.ParallaxBackground.ScrollOffset"/> value.</para>
            <para>This node's children will be affected by its scroll offset.</para>
            <para>Note that any changes to this node's position and scale made after it enters the scene will be ignored.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionScale">
            <summary>
            <para>Multiplies the ParallaxLayer's motion. If an axis is set to <c>0</c> it will not scroll.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionOffset">
            <summary>
            <para>The ParallaxLayer's offset relative to the parent ParallaxBackground's <see cref="P:Godot.ParallaxBackground.ScrollOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionMirroring">
            <summary>
            <para>The ParallaxLayer's <see cref="T:Godot.Texture"/> mirroring. Useful for creating an infinite scrolling background. If an axis is set to <c>0</c> the <see cref="T:Godot.Texture"/> will not be mirrored. Default value: <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Particles">
            <summary>
            <para>3D particle node used to create a variety of particle systems and effects. <c>Particles</c> features an emitter that generates some number of particles at a given rate.</para>
            <para>Use the <c>process_material</c> property to add a <see cref="T:Godot.ParticlesMaterial"/> to configure particle appearance and behavior. Alternatively, you can add a <see cref="T:Godot.ShaderMaterial"/> which will be applied to all particles.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles.MaxDrawPasses">
            <summary>
            <para>Maximum number of draw passes supported.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles.DrawOrderEnum.ViewDepth">
            <summary>
            <para>Particles are drawn in order of depth.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Amount">
            <summary>
            <para>Number of particles to emit.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Lifetime">
            <summary>
            <para>Amount of time each particle will exist. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.OneShot">
            <summary>
            <para>If <c>true</c>, only <c>amount</c> particles will be emitted. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Preprocess">
            <summary>
            <para>Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.SpeedScale">
            <summary>
            <para>Speed scaling ratio. Default value: <c>1</c>. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Explosiveness">
            <summary>
            <para>Time ratio between each emission. If <c>0</c> particles are emitted continuously. If <c>1</c> all particles are emitted simultaneously. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.Randomness">
            <summary>
            <para>Emission randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.FixedFps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Particles.FractDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Particles.VisibilityAabb">
            <summary>
            <para>The <see cref="T:Godot.AABB"/> that determines the area of the world part of which needs to be visible on screen for the particle system to be active.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <c>DRAW_ORDER_*</c> values. Default value: <c>DRAW_ORDER_INDEX</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.ProcessMaterial">
            <summary>
            <para><see cref="T:Godot.Material"/> for processing particles. Can be a <see cref="T:Godot.ParticlesMaterial"/> or a <see cref="T:Godot.ShaderMaterial"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPasses">
            <summary>
            <para>The number of draw passes when rendering particles.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass1">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the first draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass2">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the second draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass3">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the third draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass4">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the fourth draw pass.</para>
            </summary>
        </member>
        <member name="M:Godot.Particles.Restart">
            <summary>
            <para>Restarts the particle emmission, clearing existing particles.</para>
            </summary>
        </member>
        <member name="M:Godot.Particles.CaptureAabb">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Particles2D">
            <summary>
            <para>2D particle node used to create a variety of particle systems and effects. <c>Particles2D</c> features an emitter that generates some number of particles at a given rate.</para>
            <para>Use the <c>process_material</c> property to add a <see cref="T:Godot.ParticlesMaterial"/> to configure particle appearance and behavior. Alternatively, you can add a <see cref="T:Godot.ShaderMaterial"/> which will be applied to all particles.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles2D.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.Particles2D.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Amount">
            <summary>
            <para>Number of particles emitted in one emission cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Lifetime">
            <summary>
            <para>Amount of time each particle will exist. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.OneShot">
            <summary>
            <para>If <c>true</c>, only one emission cycle occurs. If set <c>true</c> during a cycle, emission will stop at the cycle's end. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Preprocess">
            <summary>
            <para>Particle system starts as if it had already run for this many seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.SpeedScale">
            <summary>
            <para>Particle system's running speed scaling ratio. Default value: <c>1</c>. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Explosiveness">
            <summary>
            <para>How rapidly particles in an emission cycle are emitted. If greater than <c>0</c>, there will be a gap in emissions before the next cycle begins. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Randomness">
            <summary>
            <para>Emission lifetime randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.FixedFps">
            <summary>
            <para>The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.FractDelta">
            <summary>
            <para>If <c>true</c>, results in fractional delta calculation which has a smoother particles display effect. Default value: <c>true</c></para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.VisibilityRect">
            <summary>
            <para>Editor visibility helper.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <c>DRAW_ORDER_*</c> values. Default value: <c>DRAW_ORDER_INDEX</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.ProcessMaterial">
            <summary>
            <para><see cref="T:Godot.Material"/> for processing particles. Can be a <see cref="T:Godot.ParticlesMaterial"/> or a <see cref="T:Godot.ShaderMaterial"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Texture">
            <summary>
            <para>Particle texture. If <c>null</c> particles will be squares.</para>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.NormalMap">
            <summary>
            <para>Normal map to be used for the <c>texture</c> property.</para>
            </summary>
        </member>
        <member name="M:Godot.Particles2D.CaptureRect">
            <summary>
            <para>Returns a rectangle containing the positions of all existing particles.</para>
            </summary>
        </member>
        <member name="M:Godot.Particles2D.Restart">
            <summary>
            <para>Restarts all the existing particles.</para>
            </summary>
        </member>
        <member name="T:Godot.ParticlesMaterial">
            <summary>
            <para>ParticlesMaterial defines particle properties and behavior. It is used in the <c>process_material</c> of <see cref="T:Godot.Particles"/> and <see cref="T:Godot.Particles2D"/> emitter nodes.</para>
            <para>Some of this material's properties are applied to each particle when emitted, while others can have a <see cref="T:Godot.CurveTexture"/> applied to vary values over the lifetime of the particle.</para>
            <para>When a randomness ratio is applied to a property it is used to scale that property by a random amount. The random ratio is used to interpolate between <c>1.0</c> and a random number less than one, the result is multiplied by the property to obtain the randomized property. For example a random ratio of <c>0.4</c> would scale the original property between <c>0.4-1.0</c> of its original value.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Flags.AlignYToVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetFlag(Godot.ParticlesMaterial.Flags,System.Boolean)"/> to set <see cref="P:Godot.ParticlesMaterial.FlagAlignY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Flags.RotateY">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetFlag(Godot.ParticlesMaterial.Flags,System.Boolean)"/> to set <see cref="P:Godot.ParticlesMaterial.FlagRotateY"/></para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Flags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Point">
            <summary>
            <para>All particles will be emitted from a single point.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Sphere">
            <summary>
            <para>Particles will be emitted in the volume of a sphere.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Box">
            <summary>
            <para>Particles will be emitted in the volume of a box.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Points">
            <summary>
            <para>Particles will be emitted at a position determined by sampling a random point on the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Particle color will be modulated by <see cref="P:Godot.ParticlesMaterial.EmissionColorTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.DirectedPoints">
            <summary>
            <para>Particles will be emitted at a position determined by sampling a random point on the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Particle velocity and rotation will be set based on <see cref="P:Godot.ParticlesMaterial.EmissionNormalTexture"/>. Particle color will be modulated by <see cref="P:Godot.ParticlesMaterial.EmissionColorTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.InitialLinearVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set initial velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AngularVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set angular velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.OrbitVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set orbital_velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.LinearAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set linear acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.RadialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set radial acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.TangentialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set tangential acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Damping">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set damping properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Angle">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set angle properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Scale">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set scale properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.HueVariation">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set hue_variation properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AnimSpeed">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set animation speed properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AnimOffset">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture)"/> to set animation offset properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailDivisor">
            <summary>
            <para>Emitter will emit <c>amount</c> divided by <c>trail_divisor</c> particles. The remaining particles will be used as trail(s).</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailSizeModifier">
            <summary>
            <para>Trail particles' size will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailColorModifier">
            <summary>
            <para>Trail particles' color will vary along this <see cref="T:Godot.GradientTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionShape">
            <summary>
            <para>Particles will be emitted inside this region. Use <c>EMISSION_SHAPE_*</c> constants for values. Default value: <c>EMISSION_SHAPE_POINT</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionSphereRadius">
            <summary>
            <para>The sphere's radius if <c>emission_shape</c> is set to <c>EMISSION_SHAPE_SPHERE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionBoxExtents">
            <summary>
            <para>The box's extents if <c>emission_shape</c> is set to <c>EMISSION_SHAPE_BOX</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointTexture">
            <summary>
            <para>Particles will be emitted at positions determined by sampling this texture at a random position. Used with <c>EMISSION_SHAPE_POINTS</c> and <c>EMISSION_SHAPE_DIRECTED_POINTS</c>. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionNormalTexture">
            <summary>
            <para>Particle velocity and rotation will be set by sampling this texture at the same point as the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Used only in <c>EMISSION_SHAPE_DIRECTED</c>. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionColorTexture">
            <summary>
            <para>Particle color will be modulated by color determined by sampling this texture at the same point as the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointCount">
            <summary>
            <para>The number of emission points if <c>emission_shape</c> is set to <c>EMISSION_SHAPE_POINTS</c> or <c>EMISSION_SHAPE_DIRECTED_POINTS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagAlignY">
            <summary>
            <para>Align y-axis of particle with the direction of its velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagRotateY">
            <summary>
            <para>If <c>true</c>, particles rotate around y-axis by <see cref="P:Godot.ParticlesMaterial.Angle"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagDisableZ">
            <summary>
            <para>If <c>true</c>, particles will not move on the z axis. Default value: <c>true</c> for <see cref="T:Godot.Particles2D"/>, <c>false</c> for <see cref="T:Godot.Particles"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Spread">
            <summary>
            <para>Each particle's initial direction range from <c>+spread</c> to <c>-spread</c> degrees. Default value: <c>45</c>. Applied to X/Z plane and Y/Z planes.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Flatness">
            <summary>
            <para>Amount of <see cref="P:Godot.ParticlesMaterial.Spread"/> in Y/Z plane. A value of <c>1</c> restricts particles to X/Z plane. Default <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Gravity">
            <summary>
            <para>Gravity applied to every particle. Default value: <c>(0, 98, 0)</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocity">
            <summary>
            <para>Initial velocity magnitude for each particle. Direction comes from <see cref="P:Godot.ParticlesMaterial.Spread"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocityRandom">
            <summary>
            <para>Initial velocity randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocity">
            <summary>
            <para>Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.</para>
            <para>Only applied when <see cref="P:Godot.ParticlesMaterial.FlagDisableZ"/> or <see cref="P:Godot.ParticlesMaterial.FlagRotateY"/> are <c>true</c> or the <see cref="T:Godot.SpatialMaterial"/> being used to draw the particle is using <c>BillboardMode.BILLBOARD_PARTICLES</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityRandom">
            <summary>
            <para>Angular velocity randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityCurve">
            <summary>
            <para>Each particle's angular velocity will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocity">
            <summary>
            <para>Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.</para>
            <para>Only available when <see cref="P:Godot.ParticlesMaterial.FlagDisableZ"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityRandom">
            <summary>
            <para>Orbital velocity randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityCurve">
            <summary>
            <para>Each particle's orbital velocity will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccel">
            <summary>
            <para>Linear acceleration applied to each particle. Acceleration increases velocity magnitude each frame without affecting direction.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelRandom">
            <summary>
            <para>Linear acceleration randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelCurve">
            <summary>
            <para>Each particle's linear acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccel">
            <summary>
            <para>Radial acceleration applied to each particle. Makes particle accelerate away from origin.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelRandom">
            <summary>
            <para>Radial acceleration randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelCurve">
            <summary>
            <para>Each particle's radial acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccel">
            <summary>
            <para>Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelRandom">
            <summary>
            <para>Tangential acceleration randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelCurve">
            <summary>
            <para>Each particle's tangential acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Damping">
            <summary>
            <para>The rate at which particles lose velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingRandom">
            <summary>
            <para>Damping randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingCurve">
            <summary>
            <para>Damping will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Angle">
            <summary>
            <para>Initial rotation applied to each particle, in degrees.</para>
            <para>Only applied when <see cref="P:Godot.ParticlesMaterial.FlagDisableZ"/> or <see cref="P:Godot.ParticlesMaterial.FlagRotateY"/> are <c>true</c> or the <see cref="T:Godot.SpatialMaterial"/> being used to draw the particle is using <c>BillboardMode.BILLBOARD_PARTICLES</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleRandom">
            <summary>
            <para>Rotation randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleCurve">
            <summary>
            <para>Each particle's rotation will be animated along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Scale">
            <summary>
            <para>Initial scale applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleRandom">
            <summary>
            <para>Scale randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleCurve">
            <summary>
            <para>Each particle's scale will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Color">
            <summary>
            <para>Each particle's initial color. If the <see cref="T:Godot.Particles2D"/>'s <c>texture</c> is defined, it will be multiplied by this color. To have particle display color in a <see cref="T:Godot.SpatialMaterial"/> make sure to set <see cref="P:Godot.SpatialMaterial.VertexColorUseAsAlbedo"/> to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ColorRamp">
            <summary>
            <para>Each particle's color will vary along this <see cref="T:Godot.GradientTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariation">
            <summary>
            <para>Initial hue variation applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationRandom">
            <summary>
            <para>Hue variation randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationCurve">
            <summary>
            <para>Each particle's hue will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeed">
            <summary>
            <para>Particle animation speed.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedRandom">
            <summary>
            <para>Animation speed randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedCurve">
            <summary>
            <para>Each particle's animation speed will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffset">
            <summary>
            <para>Particle animation offset.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetRandom">
            <summary>
            <para>Animation offset randomness ratio. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetCurve">
            <summary>
            <para>Each particle's animation offset will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Path">
            <summary>
            <para>This class is a container/Node-ification of a <see cref="T:Godot.Curve3D"/>, so it can have <see cref="T:Godot.Spatial"/> properties and <see cref="T:Godot.Node"/> info.</para>
            </summary>
        </member>
        <member name="P:Godot.Path.Curve">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Path2D">
            <summary>
            <para>Can have <see cref="T:Godot.PathFollow2D"/> child-nodes moving along the <see cref="T:Godot.Curve2D"/>. See <see cref="T:Godot.PathFollow2D"/> for more information on this usage.</para>
            </summary>
        </member>
        <member name="P:Godot.Path2D.Curve">
            <summary>
            <para>A <see cref="T:Godot.Curve2D"/> describing the path.</para>
            </summary>
        </member>
        <member name="T:Godot.PathFollow">
            <summary>
            <para>This node takes its parent <see cref="T:Godot.Path"/>, and returns the coordinates of a point within it, given a distance from the first vertex.</para>
            <para>It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow.RotationModeEnum.None">
            <summary>
            <para>Forbids the PathFollow to rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow.RotationModeEnum.Y">
            <summary>
            <para>Allows the PathFollow to rotate in the Y axis only.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow.RotationModeEnum.Xy">
            <summary>
            <para>Allows the PathFollow to rotate in both the X, and Y axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow.RotationModeEnum.Xyz">
            <summary>
            <para>Allows the PathFollow to rotate in any axis.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow.RotationModeEnum.Oriented">
            <summary>
            <para>Uses the up vector information in a <see cref="T:Godot.Curve3D"/> to enforce orientation. This rotation mode requires the <see cref="T:Godot.Path"/>'s <see cref="P:Godot.Curve3D.UpVectorEnabled"/> property to be set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.Offset">
            <summary>
            <para>The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.UnitOffset">
            <summary>
            <para>The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.HOffset">
            <summary>
            <para>The node's offset along the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.VOffset">
            <summary>
            <para>The node's offset perpendicular to the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.RotationMode">
            <summary>
            <para>Allows or forbids rotation on one or more axes, depending on the constants being used.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.CubicInterp">
            <summary>
            <para>If <c>true</c>, the position between two cached points is interpolated cubically, and linearly otherwise.</para>
            <para>The points along the <see cref="T:Godot.Curve3D"/> of the <see cref="T:Godot.Path"/> are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.</para>
            <para>There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow.Loop">
            <summary>
            <para>If <c>true</c>, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.</para>
            </summary>
        </member>
        <member name="T:Godot.PathFollow2D">
            <summary>
            <para>This node takes its parent <see cref="T:Godot.Path2D"/>, and returns the coordinates of a point within it, given a distance from the first vertex.</para>
            <para>It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Offset">
            <summary>
            <para>The distance along the path in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.UnitOffset">
            <summary>
            <para>The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.HOffset">
            <summary>
            <para>The node's offset along the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.VOffset">
            <summary>
            <para>The node's offset perpendicular to the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Rotate">
            <summary>
            <para>If <c>true</c>, this node rotates to follow the path, making its descendants rotate.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.CubicInterp">
            <summary>
            <para>If <c>true</c>, the position between two cached points is interpolated cubically, and linearly otherwise.</para>
            <para>The points along the <see cref="T:Godot.Curve2D"/> of the <see cref="T:Godot.Path2D"/> are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.</para>
            <para>There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Loop">
            <summary>
            <para>If <c>true</c>, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Lookahead">
            <summary>
            <para>How far to look ahead of the curve to calculate the tangent if the node is rotating. E.g. shorter lookaheads will lead to faster rotations. Default value: <c>4</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.PckStart(System.String,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.AddFile(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.Flush(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Performance">
            <summary>
            <para>This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the Monitor tab in the editor's Debugger panel. By using the <see cref="M:Godot.Performance.GetMonitor(Godot.Performance.Monitor)"/> method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build.</para>
            <para>Many of these monitors are not updated in real-time, so there may be a short delay between changes.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimeFps">
            <summary>
            <para>Frames per second.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimeProcess">
            <summary>
            <para>Time it took to complete one frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimePhysicsProcess">
            <summary>
            <para>Time it took to complete one physics frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryStatic">
            <summary>
            <para>Static memory currently used, in bytes. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryDynamic">
            <summary>
            <para>Dynamic memory currently used, in bytes. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryStaticMax">
            <summary>
            <para>Available static memory. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryDynamicMax">
            <summary>
            <para>Available dynamic memory. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryMessageBufferMax">
            <summary>
            <para>Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectCount">
            <summary>
            <para>Number of objects currently instanced (including nodes).</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectResourceCount">
            <summary>
            <para>Number of resources currently used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectNodeCount">
            <summary>
            <para>Number of nodes currently instanced. This also includes the root node, as well as any nodes not in the scene tree.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderObjectsInFrame">
            <summary>
            <para>3D objects drawn per frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVerticesInFrame">
            <summary>
            <para>Vertices drawn per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderMaterialChangesInFrame">
            <summary>
            <para>Material changes per frame. 3D only</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderShaderChangesInFrame">
            <summary>
            <para>Shader changes per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderSurfaceChangesInFrame">
            <summary>
            <para>Render surface changes per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderDrawCallsInFrame">
            <summary>
            <para>Draw calls per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVideoMemUsed">
            <summary>
            <para>Video memory used. Includes both texture and vertex memory.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderTextureMemUsed">
            <summary>
            <para>Texture memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVertexMemUsed">
            <summary>
            <para>Vertex memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderUsageVideoMemTotal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dActiveObjects">
            <summary>
            <para>Number of active <see cref="T:Godot.RigidBody2D"/> nodes in the game.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dCollisionPairs">
            <summary>
            <para>Number of collision pairs in the 2D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dIslandCount">
            <summary>
            <para>Number of islands in the 2D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dActiveObjects">
            <summary>
            <para>Number of active <see cref="T:Godot.RigidBody"/> and <see cref="T:Godot.VehicleBody"/> nodes in the game.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dCollisionPairs">
            <summary>
            <para>Number of collision pairs in the 3D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dIslandCount">
            <summary>
            <para>Number of islands in the 3D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.AudioOutputLatency">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MonitorMax">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Performance.GetMonitor(Godot.Performance.Monitor)">
            <summary>
            <para>Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this:</para>
            <para><code>
            print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.PHashTranslation">
            <summary>
            <para>Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.</para>
            </summary>
        </member>
        <member name="M:Godot.PHashTranslation.Generate(Godot.Translation)">
            <summary>
            <para>Generates and sets an optimized translation from the given <see cref="T:Godot.Translation"/> resource.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.Pin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.Cone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.Hinge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.Slider">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicalBone.JointTypeEnum.Type6dof">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.JointType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.JointOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.BodyOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.Mass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.Friction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.Bounce">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone.GravityScale">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicalBone.IsStaticBody">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicalBone.GetSimulatePhysics">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicalBone.IsSimulatingPhysics">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicalBone.GetBoneId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Physics2DDirectBodyState">
            <summary>
            <para>Provides direct access to a physics body in the <see cref="T:Godot.Physics2DServer"/>, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.Physics2DDirectBodyState)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Step">
            <summary>
            <para>The timestep (delta) used for the simulation.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.InverseMass">
            <summary>
            <para>The inverse of the mass of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.InverseInertia">
            <summary>
            <para>The inverse of the inertia of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalAngularDamp">
            <summary>
            <para>The rate at which the body stops rotating, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalLinearDamp">
            <summary>
            <para>The rate at which the body stops moving, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalGravity">
            <summary>
            <para>The total gravity vector being currently applied to this body.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Sleeping">
            <summary>
            <para>If <c>true</c>, this body is currently sleeping (not active).</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Transform">
            <summary>
            <para>The body's transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.AddCentralForce(Godot.Vector2)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.AddForce(Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.AddTorque(System.Single)">
            <summary>
            <para>Adds a constant rotational force.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.ApplyCentralImpulse(Godot.Vector2)">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.ApplyTorqueImpulse(System.Single)">
            <summary>
            <para>Applies a rotational impulse to the body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.ApplyImpulse(Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The offset uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactCount">
            <summary>
            <para>Returns the number of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts. See <see cref="P:Godot.RigidBody2D.ContactMonitor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalPosition(System.Int32)">
            <summary>
            <para>Returns the local position of the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalNormal(System.Int32)">
            <summary>
            <para>Returns the local normal at the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalShape(System.Int32)">
            <summary>
            <para>Returns the local shape index of the collision.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactCollider(System.Int32)">
            <summary>
            <para>Returns the collider's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderPosition(System.Int32)">
            <summary>
            <para>Returns the contact position in the collider.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderId(System.Int32)">
            <summary>
            <para>Returns the collider's object id.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderObject(System.Int32)">
            <summary>
            <para>Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderShape(System.Int32)">
            <summary>
            <para>Returns the collider's shape index.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderShapeMetadata(System.Int32)">
            <summary>
            <para>Returns the collided shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            <para>Returns the linear velocity vector at the collider's contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.IntegrateForces">
            <summary>
            <para>Calls the built-in force integration code.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetSpaceState">
            <summary>
            <para>Returns the current state of the space, useful for queries.</para>
            </summary>
        </member>
        <member name="T:Godot.Physics2DDirectSpaceState">
            <summary>
            <para>Direct access object to a space in the <see cref="T:Godot.Physics2DServer"/>. It's used mainly to do queries against objects and areas residing in a given space.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectPoint(Godot.Vector2,System.Int32,Godot.Collections.Array,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Checks whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody"/>s or <see cref="T:Godot.Area"/>s, respectively.</para>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectPointOnCanvas(Godot.Vector2,System.Int32,System.Int32,Godot.Collections.Array,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectRay(Godot.Vector2,Godot.Vector2,Godot.Collections.Array,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Intersects a ray in a given space. The returned object is a dictionary with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>position</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the ray did not intersect anything, then an empty dictionary is returned instead.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody"/>s or <see cref="T:Godot.Area"/>s, respectively.</para>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectShape(Godot.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.Physics2DShapeQueryParameters"/> object, against the space. Note that this method does not take into account the <c>motion</c> property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>The number of intersections can be limited with the <c>max_results</c> parameter, to reduce the processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.CastMotion(Godot.Physics2DShapeQueryParameters)">
            <summary>
            <para>Checks how far the shape can travel toward a point. Note that both the shape and the motion are supplied through a <see cref="T:Godot.Physics2DShapeQueryParameters"/> object. The method will return an array with two floats between 0 and 1, both representing a fraction of <c>motion</c>. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be <c>[1, 1]</c>.</para>
            <para>If the shape can not move, the array will be empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.CollideShape(Godot.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.Physics2DShapeQueryParameters"/> object, against the space. The resulting array contains a list of points where the shape intersects another. Like with <see cref="M:Godot.Physics2DDirectSpaceState.IntersectShape(Godot.Physics2DShapeQueryParameters,System.Int32)"/>, the number of returned results can be limited to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.GetRestInfo(Godot.Physics2DShapeQueryParameters)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.Physics2DShapeQueryParameters"/> object, against the space. If it collides with more than one shape, the nearest one is selected. Note that this method does not take into account the <c>motion</c> property of the object. The returned object is a dictionary containing the following fields:</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>linear_velocity</c>: The colliding object's velocity <see cref="T:Godot.Vector2"/>. If the object is an <see cref="T:Godot.Area2D"/>, the result is <c>(0, 0)</c>.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>point</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the shape did not intersect anything, then an empty dictionary is returned instead.</para>
            </summary>
        </member>
        <member name="T:Godot.Physics2DServer">
            <summary>
            <para>Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ProcessInfo.ActiveObjects">
            <summary>
            <para>Constant to get the number of objects that are not sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ProcessInfo.CollisionPairs">
            <summary>
            <para>Constant to get the number of possible collisions.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ProcessInfo.IslandCount">
            <summary>
            <para>Constant to get the number of space regions where a collision could occur.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaBodyStatus.Added">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object enters one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaBodyStatus.Removed">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object exits one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.DampedStringParam.RestLength">
            <summary>
            <para>Set the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.DampedStringParam.Stiffness">
            <summary>
            <para>Set the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.DampedStringParam.Damping">
            <summary>
            <para>Set the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyMode.Static">
            <summary>
            <para>Constant for static bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyMode.Kinematic">
            <summary>
            <para>Constant for kinematic bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyMode.Rigid">
            <summary>
            <para>Constant for rigid bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyMode.Character">
            <summary>
            <para>Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Line">
            <summary>
            <para>This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Ray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Segment">
            <summary>
            <para>This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Circle">
            <summary>
            <para>This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Rectangle">
            <summary>
            <para>This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Capsule">
            <summary>
            <para>This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.ConvexPolygon">
            <summary>
            <para>This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the <see cref="P:Godot.CollisionPolygon2D.Polygon"/> property, polygons modified with <see cref="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)"/> do not verify that the points supplied form is a convex polygon.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.ConcavePolygon">
            <summary>
            <para>This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.ShapeType.Custom">
            <summary>
            <para>This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointParam.Bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointParam.MaxBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointParam.MaxForce">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.ContactRecycleRadius">
            <summary>
            <para>Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.ContactMaxSeparation">
            <summary>
            <para>Constant to set/get the maximum distance a shape can be from another before they are considered separated.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.BodyMaxAllowedPenetration">
            <summary>
            <para>Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.BodyLinearVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.BodyAngularVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.BodyTimeToSleep">
            <summary>
            <para>Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.ConstraintDefaultBias">
            <summary>
            <para>Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.SpaceParameter.TestMotionMinContactDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointType.Pin">
            <summary>
            <para>Constant to create pin joints.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointType.Groove">
            <summary>
            <para>Constant to create groove joints.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.JointType.DampedSpring">
            <summary>
            <para>Constant to create damped spring joints.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.CCDMode.Disabled">
            <summary>
            <para>Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.CCDMode.CastRay">
            <summary>
            <para>Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.CCDMode.CastShape">
            <summary>
            <para>Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyState.Transform">
            <summary>
            <para>Constant to set/get the current transform matrix of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyState.LinearVelocity">
            <summary>
            <para>Constant to set/get the current linear velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyState.AngularVelocity">
            <summary>
            <para>Constant to set/get the current angular velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyState.Sleeping">
            <summary>
            <para>Constant to sleep/wake up a body, or to get whether it is sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyState.CanSleep">
            <summary>
            <para>Constant to set/get whether the body can sleep.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.Bounce">
            <summary>
            <para>Constant to set/get a body's bounce factor.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.Friction">
            <summary>
            <para>Constant to set/get a body's friction.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.Mass">
            <summary>
            <para>Constant to set/get a body's mass.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.Inertia">
            <summary>
            <para>Constant to set/get a body's inertia.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.GravityScale">
            <summary>
            <para>Constant to set/get a body's gravity multiplier.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.LinearDamp">
            <summary>
            <para>Constant to set/get a body's linear dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.AngularDamp">
            <summary>
            <para>Constant to set/get a body's angular dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.BodyParameter.Max">
            <summary>
            <para>This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaSpaceOverrideMode.Disabled">
            <summary>
            <para>This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaSpaceOverrideMode.Combine">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaSpaceOverrideMode.CombineReplace">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaSpaceOverrideMode.Replace">
            <summary>
            <para>This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaSpaceOverrideMode.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.Gravity">
            <summary>
            <para>Constant to set/get gravity strength in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.GravityVector">
            <summary>
            <para>Constant to set/get gravity vector/center in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.GravityIsPoint">
            <summary>
            <para>Constant to set/get whether the gravity vector of an area is a direction, or a center point.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.GravityDistanceScale">
            <summary>
            <para>Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.GravityPointAttenuation">
            <summary>
            <para>This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.LinearDamp">
            <summary>
            <para>Constant to set/get the linear dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.AngularDamp">
            <summary>
            <para>Constant to set/get the angular dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.Physics2DServer.AreaParameter.Priority">
            <summary>
            <para>Constant to set/get the priority (order of processing) of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.LineShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.RayShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SegmentShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.CircleShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.RectangleShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.CapsuleShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ConvexPolygonShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ConcavePolygonShapeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            <para>Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created <see cref="M:Godot.Physics2DServer.ShapeGetType(Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeGetType(Godot.RID)">
            <summary>
            <para>Returns the type of shape (see SHAPE_* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeGetData(Godot.RID)">
            <summary>
            <para>Returns the shape data.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceCreate">
            <summary>
            <para>Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with <see cref="M:Godot.Physics2DServer.AreaSetSpace(Godot.RID,Godot.RID)"/>, or to a body with <see cref="M:Godot.Physics2DServer.BodySetSpace(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Marks a space as active. It will not have an effect, unless it is assigned to an area or body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceIsActive(Godot.RID)">
            <summary>
            <para>Returns whether the space is active.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceSetParam(Godot.RID,Godot.Physics2DServer.SpaceParameter,System.Single)">
            <summary>
            <para>Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceGetParam(Godot.RID,Godot.Physics2DServer.SpaceParameter)">
            <summary>
            <para>Returns the value of a space parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the state of a space, a <see cref="T:Godot.Physics2DDirectSpaceState"/>. This object can be used to make collision/intersection queries.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaCreate">
            <summary>
            <para>Creates an <see cref="T:Godot.Area2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetSpace(Godot.RID)">
            <summary>
            <para>Returns the space assigned to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetSpaceOverrideMode(Godot.RID,Godot.Physics2DServer.AreaSpaceOverrideMode)">
            <summary>
            <para>Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            <para>Returns the space override mode for the area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D})">
            <summary>
            <para>Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            <param name="transform">If the parameter is null, then the default value is Transform2D.Identity</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given area shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for an area shape.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            <para>Disables a given shape in an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a shape within an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from an area. It does not delete the shape, so it can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to one or many physics layers.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            <para>Sets which physics layers the area will monitor.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetParam(Godot.RID,Godot.Physics2DServer.AreaParameter,System.Object)">
            <summary>
            <para>Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetParam(Godot.RID,Godot.Physics2DServer.AreaParameter)">
            <summary>
            <para>Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetTransform(Godot.RID)">
            <summary>
            <para>Returns the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaAttachCanvasInstanceId(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetCanvasInstanceId(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            <para>Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:</para>
            <para>1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.</para>
            <para>2: <see cref="T:Godot.RID"/> of the object that entered/exited the area.</para>
            <para>3: Instance ID of the object that entered/exited the area.</para>
            <para>4: The shape index of the object that entered/exited the area.</para>
            <para>5: The shape index of the area where the object entered/exited.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetAreaMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetMonitorable(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyCreate">
            <summary>
            <para>Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the body (see <see cref="M:Godot.Physics2DServer.SpaceCreate"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetSpace(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the space assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetMode(Godot.RID,Godot.Physics2DServer.BodyMode)">
            <summary>
            <para>Sets the body mode, from one of the constants BODY_MODE*.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetMode(Godot.RID)">
            <summary>
            <para>Returns the body mode.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D})">
            <summary>
            <para>Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            <param name="transform">If the parameter is null, then the default value is Transform2D.Identity</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given body shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeMetadata(Godot.RID,System.Int32,System.Object)">
            <summary>
            <para>Sets metadata of a shape within a body. This metadata is different from <see cref="M:Godot.Object.SetMeta(System.String,System.Object)"/>, and can be retrieved on shape queries.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeMetadata(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the metadata of a shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from a body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            <para>Disables shape in body if <c>disable</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeAsOneWayCollision(Godot.RID,System.Int32,System.Boolean,System.Single)">
            <summary>
            <para>Enables one way collision on body if <c>enable</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAttachCanvasInstanceId(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetCanvasInstanceId(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetContinuousCollisionDetectionMode(Godot.RID,Godot.Physics2DServer.CCDMode)">
            <summary>
            <para>Sets the continuous collision detection mode from any of the CCD_MODE_* constants.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetContinuousCollisionDetectionMode(Godot.RID)">
            <summary>
            <para>Returns the continuous collision detection mode.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetCollisionMask(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetParam(Godot.RID,Godot.Physics2DServer.BodyParameter,System.Single)">
            <summary>
            <para>Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetParam(Godot.RID,Godot.Physics2DServer.BodyParameter)">
            <summary>
            <para>Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetState(Godot.RID,Godot.Physics2DServer.BodyState,System.Object)">
            <summary>
            <para>Sets a body state (see BODY_STATE* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetState(Godot.RID,Godot.Physics2DServer.BodyState)">
            <summary>
            <para>Returns a body state.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyApplyCentralImpulse(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyApplyTorqueImpulse(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyApplyImpulse(Godot.RID,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddCentralForce(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddForce(Godot.RID,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Adds a positioned force to the applied force and torque. As with <see cref="M:Godot.Physics2DServer.BodyApplyImpulse(Godot.RID,Godot.Vector2,Godot.Vector2)"/>, both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddTorque(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetAxisVelocity(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a body to the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Removes a body from the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            <para>Returns the maximum contacts that can be reported. See <see cref="M:Godot.Physics2DServer.BodySetMaxContactsReported(Godot.RID,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.Physics2DServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            <para>Returns whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.Physics2DServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)">
            <summary>
            <para>Sets the function used to calculate physics for an object, if that object allows it (see <see cref="M:Godot.Physics2DServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyTestMotion(Godot.RID,Godot.Transform2D,Godot.Vector2,System.Boolean,System.Single,Godot.Physics2DTestMotionResult)">
            <summary>
            <para>Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a <see cref="T:Godot.Physics2DTestMotionResult"/> can be passed to return additional information in.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.Physics2DDirectBodyState"/> of the body.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointSetParam(Godot.RID,Godot.Physics2DServer.JointParam,System.Single)">
            <summary>
            <para>Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointGetParam(Godot.RID,Godot.Physics2DServer.JointParam)">
            <summary>
            <para>Returns the value of a joint parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.PinJointCreate(Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.</para>
            <param name="bodyB">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.GrooveJointCreate(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.</para>
            <param name="bodyA">If the parameter is null, then the default value is new RID()</param>
            <param name="bodyB">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedSpringJointCreate(Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.</para>
            <param name="bodyB">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedStringJointSetParam(Godot.RID,Godot.Physics2DServer.DampedStringParam,System.Single)">
            <summary>
            <para>Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedStringJointGetParam(Godot.RID,Godot.Physics2DServer.DampedStringParam)">
            <summary>
            <para>Returns the value of a damped spring joint parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointGetType(Godot.RID)">
            <summary>
            <para>Returns the type of a joint (see JOINT_* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.FreeRid(Godot.RID)">
            <summary>
            <para>Destroys any of the objects created by Physics2DServer. If the <see cref="T:Godot.RID"/> passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SetActive(System.Boolean)">
            <summary>
            <para>Activates or deactivates the 2D physics engine.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.GetProcessInfo(Godot.Physics2DServer.ProcessInfo)">
            <summary>
            <para>Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.</para>
            </summary>
        </member>
        <member name="T:Godot.Physics2DShapeQueryParameters">
            <summary>
            <para>This class contains the shape and other parameters for intersection/collision queries.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.CollisionLayer">
            <summary>
            <para>The physics layer the query should be made on.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Exclude">
            <summary>
            <para>The list of objects or object <see cref="T:Godot.RID"/>s, that will be excluded from collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Margin">
            <summary>
            <para>The collision margin for the shape.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Motion">
            <summary>
            <para>The motion of the shape being queried for.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.ShapeRid">
            <summary>
            <para>The <see cref="T:Godot.RID"/> of the queried shape. See <see cref="M:Godot.Physics2DShapeQueryParameters.SetShape(Godot.Resource)"/> also.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Transform">
            <summary>
            <para>the transform matrix of the queried shape.</para>
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.CollideWithBodies">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.CollideWithAreas">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryParameters.SetShape(Godot.Resource)">
            <summary>
            <para>Set the <see cref="T:Godot.Shape2D"/> that will be used for collision/intersection queries.</para>
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultRid(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObjectId(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObject(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObjectShape(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.Motion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.MotionRemainder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.CollisionPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.CollisionNormal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderRid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.Collider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderShape">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody">
            <summary>
            <para>PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody.CollisionMask">
            <summary>
            <para>The physics layers this area scans for collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody2D">
            <summary>
            <para>PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.Layers">
            <summary>
            <para>Both <see cref="P:Godot.PhysicsBody2D.CollisionLayer"/> and <see cref="P:Godot.PhysicsBody2D.CollisionMask"/>. Returns <see cref="P:Godot.PhysicsBody2D.CollisionLayer"/> when accessed. Updates <see cref="P:Godot.PhysicsBody2D.CollisionLayer"/> and <see cref="P:Godot.PhysicsBody2D.CollisionMask"/> when modified.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionMask">
            <summary>
            <para>The physics layers this area scans for collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectBodyState">
            <summary>
            <para>Provides direct access to a physics body in the <see cref="T:Godot.PhysicsServer"/>, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See <see cref="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Step">
            <summary>
            <para>The timestep (delta) used for the simulation.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.InverseMass">
            <summary>
            <para>The inverse of the mass of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalAngularDamp">
            <summary>
            <para>The rate at which the body stops rotating, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalLinearDamp">
            <summary>
            <para>The rate at which the body stops moving, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.InverseInertia">
            <summary>
            <para>The inverse of the inertia of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalGravity">
            <summary>
            <para>The total gravity vector being currently applied to this body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.CenterOfMass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.PrincipalInertiaAxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Sleeping">
            <summary>
            <para>If <c>true</c>, this body is currently sleeping (not active).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Transform">
            <summary>
            <para>The body's transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.AddCentralForce(Godot.Vector3)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            <para>This is equivalent to <c>add_force(force, Vector3(0,0,0))</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.AddForce(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.AddTorque(Godot.Vector3)">
            <summary>
            <para>Adds a constant rotational force without affecting position.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyCentralImpulse(Godot.Vector3)">
            <summary>
            <para>Applies a single directional impulse without affecting rotation.</para>
            <para>This is equivalent to <c>apply_impulse(Vector3(0, 0, 0), impulse)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyImpulse(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyTorqueImpulse(Godot.Vector3)">
            <summary>
            <para>Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the passed in vector.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactCount">
            <summary>
            <para>Returns the number of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts. See <see cref="P:Godot.RigidBody.ContactMonitor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalPosition(System.Int32)">
            <summary>
            <para>Returns the local position of the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalNormal(System.Int32)">
            <summary>
            <para>Returns the local normal at the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactImpulse(System.Int32)">
            <summary>
            <para>Impulse created by the contact. Only implemented for Bullet physics.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalShape(System.Int32)">
            <summary>
            <para>Returns the local shape index of the collision.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactCollider(System.Int32)">
            <summary>
            <para>Returns the collider's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderPosition(System.Int32)">
            <summary>
            <para>Returns the contact position in the collider.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderId(System.Int32)">
            <summary>
            <para>Returns the collider's object id.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderObject(System.Int32)">
            <summary>
            <para>Returns the collider object.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderShape(System.Int32)">
            <summary>
            <para>Returns the collider's shape index.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            <para>Returns the linear velocity vector at the collider's contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.IntegrateForces">
            <summary>
            <para>Calls the built-in force integration code.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetSpaceState">
            <summary>
            <para>Returns the current state of the space, useful for queries.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectSpaceState">
            <summary>
            <para>Direct access object to a space in the <see cref="T:Godot.PhysicsServer"/>. It's used mainly to do queries against objects and areas residing in a given space.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.IntersectRay(Godot.Vector3,Godot.Vector3,Godot.Collections.Array,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Intersects a ray in a given space. The returned object is a dictionary with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>position</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the ray did not intersect anything, then an empty dictionary is returned instead.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody"/>s or <see cref="T:Godot.Area"/>s, respectively.</para>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.IntersectShape(Godot.PhysicsShapeQueryParameters,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters"/> object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>The number of intersections can be limited with the <c>max_results</c> parameter, to reduce the processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.CastMotion(Godot.PhysicsShapeQueryParameters,Godot.Vector3)">
            <summary>
            <para>Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of <c>motion</c>. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be <c>[1, 1]</c>.</para>
            <para>If the shape can not move, the returned array will be <c>[0, 0]</c> under Bullet, and empty under GodotPhysics.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.CollideShape(Godot.PhysicsShapeQueryParameters,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters"/> object, against the space. The resulting array contains a list of points where the shape intersects another. Like with <see cref="M:Godot.PhysicsDirectSpaceState.IntersectShape(Godot.PhysicsShapeQueryParameters,System.Int32)"/>, the number of returned results can be limited to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.GetRestInfo(Godot.PhysicsShapeQueryParameters)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters"/> object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>linear_velocity</c>: The colliding object's velocity <see cref="T:Godot.Vector3"/>. If the object is an <see cref="T:Godot.Area"/>, the result is <c>(0, 0, 0)</c>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>point</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the shape did not intersect anything, then an empty dictionary is returned instead.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsMaterial">
            <summary>
            <para>Provides a means of modifying the collision properties of a <see cref="T:Godot.PhysicsBody"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Friction">
            <summary>
            <para>The body's friction. Values range from <c>0</c> (frictionless) to <c>1</c> (maximum friction). Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Rough">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Bounce">
            <summary>
            <para>The body's bounciness. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Absorbent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PhysicsServer">
            <summary>
            <para>Everything related to physics in 3D.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.LinearX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.LinearY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.LinearZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.AngularX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.AngularY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyAxis.AngularZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ProcessInfo.ActiveObjects">
            <summary>
            <para>Constant to get the number of objects that are not sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ProcessInfo.CollisionPairs">
            <summary>
            <para>Constant to get the number of possible collisions.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ProcessInfo.IslandCount">
            <summary>
            <para>Constant to get the number of space regions where a collision could occur.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaBodyStatus.Added">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object enters one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaBodyStatus.Removed">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object exits one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyMode.Static">
            <summary>
            <para>Constant for static bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyMode.Kinematic">
            <summary>
            <para>Constant for kinematic bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyMode.Rigid">
            <summary>
            <para>Constant for rigid bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyMode.Character">
            <summary>
            <para>Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Plane">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.PlaneShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Ray">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.RayShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Sphere">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.SphereShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Box">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.BoxShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Capsule">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.CapsuleShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Cylinder">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.CylinderShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.ConvexPolygon">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.ConvexPolygonShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.ConcavePolygon">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.ConcavePolygonShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Heightmap">
            <summary>
            <para>The <see cref="T:Godot.Shape"/> is a <see cref="T:Godot.HeightMapShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ShapeType.Custom">
            <summary>
            <para>This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.PinJointParam.Bias">
            <summary>
            <para>The strength with which the pinned objects try to stay in positional relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.PinJointParam.Damping">
            <summary>
            <para>The strength with which the pinned objects try to stay in velocity relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.PinJointParam.ImpulseClamp">
            <summary>
            <para>If above 0, this value is the maximum value for an impulse that this Joint puts on its ends.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.ContactRecycleRadius">
            <summary>
            <para>Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.ContactMaxSeparation">
            <summary>
            <para>Constant to set/get the maximum distance a shape can be from another before they are considered separated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.BodyMaxAllowedPenetration">
            <summary>
            <para>Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.BodyLinearVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.BodyAngularVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.BodyTimeToSleep">
            <summary>
            <para>Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.BodyAngularVelocityDampRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.ConstraintDefaultBias">
            <summary>
            <para>Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SpaceParameter.TestMotionMinContactDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ConeTwistJointParam.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected allong the swing axis.</para>
            <para>Could be defined as looseness in the <see cref="T:Godot.ConeTwistJoint"/>.</para>
            <para>If below 0.05, this behaviour is locked. Default value: <c>PI/4</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ConeTwistJointParam.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ConeTwistJointParam.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ConeTwistJointParam.Softness">
            <summary>
            <para>The ease with which the Joint twists, if it's too low, it takes more force to twist the joint.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.ConeTwistJointParam.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.JointType.Pin">
            <summary>
            <para>The <see cref="T:Godot.Joint"/> is a <see cref="T:Godot.PinJoint"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.JointType.Hinge">
            <summary>
            <para>The <see cref="T:Godot.Joint"/> is a <see cref="T:Godot.HingeJoint"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.JointType.Slider">
            <summary>
            <para>The <see cref="T:Godot.Joint"/> is a <see cref="T:Godot.SliderJoint"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.JointType.ConeTwist">
            <summary>
            <para>The <see cref="T:Godot.Joint"/> is a <see cref="T:Godot.ConeTwistJoint"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.JointType.Joint6dof">
            <summary>
            <para>The <see cref="T:Godot.Joint"/> is a <see cref="T:Godot.Generic6DOFJoint"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyState.Transform">
            <summary>
            <para>Constant to set/get the current transform matrix of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyState.LinearVelocity">
            <summary>
            <para>Constant to set/get the current linear velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyState.AngularVelocity">
            <summary>
            <para>Constant to set/get the current angular velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyState.Sleeping">
            <summary>
            <para>Constant to sleep/wake up a body, or to get whether it is sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyState.CanSleep">
            <summary>
            <para>Constant to set/get whether the body can sleep.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.Bounce">
            <summary>
            <para>Constant to set/get a body's bounce factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.Friction">
            <summary>
            <para>Constant to set/get a body's friction.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.Mass">
            <summary>
            <para>Constant to set/get a body's mass.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.GravityScale">
            <summary>
            <para>Constant to set/get a body's gravity multiplier.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.LinearDamp">
            <summary>
            <para>Constant to set/get a body's linear dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.AngularDamp">
            <summary>
            <para>Constant to set/get a body's angular dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.BodyParameter.Max">
            <summary>
            <para>This is the last ID for body parameters. Any attempt to set this property is ignored. Any attempt to get it returns 0.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearLowerLimit">
            <summary>
            <para>The minimum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearUpperLimit">
            <summary>
            <para>The maximum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearLimitSoftness">
            <summary>
            <para>A factor that gets applied to the movement across the axes. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearRestitution">
            <summary>
            <para>The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearDamping">
            <summary>
            <para>The amount of damping that happens at the linear motion across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearMotorTargetVelocity">
            <summary>
            <para>The velocity that the joint's linear motor will attempt to reach.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.LinearMotorForceLimit">
            <summary>
            <para>The maximum force that the linear motor can apply while trying to reach the target velocity.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularLowerLimit">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularUpperLimit">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularLimitSoftness">
            <summary>
            <para>A factor that gets multiplied onto all rotations across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularDamping">
            <summary>
            <para>The amount of rotational damping across the axes. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularRestitution">
            <summary>
            <para>The amount of rotational restitution across the axes. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularForceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularErp">
            <summary>
            <para>When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularMotorTargetVelocity">
            <summary>
            <para>Target speed for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisParam.AngularMotorForceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearLimitUpper">
            <summary>
            <para>The maximum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearLimitLower">
            <summary>
            <para>The minimum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearLimitRestitution">
            <summary>
            <para>The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearLimitDamping">
            <summary>
            <para>The amount of damping once the slider limits are surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearMotionSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearMotionRestitution">
            <summary>
            <para>The amount of restitution inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearMotionDamping">
            <summary>
            <para>The amount of damping inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearOrthogonalSoftness">
            <summary>
            <para>A factor applied to the movement across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearOrthogonalRestitution">
            <summary>
            <para>The amount of restitution when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.LinearOrthogonalDamping">
            <summary>
            <para>The amount of damping when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularLimitUpper">
            <summary>
            <para>The upper limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularLimitLower">
            <summary>
            <para>The lower limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularLimitSoftness">
            <summary>
            <para>A factor applied to the all rotation once the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularLimitRestitution">
            <summary>
            <para>The amount of restitution of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularLimitDamping">
            <summary>
            <para>The amount of damping of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularMotionSoftness">
            <summary>
            <para>A factor that gets applied to the all rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularMotionRestitution">
            <summary>
            <para>The amount of restitution of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularMotionDamping">
            <summary>
            <para>The amount of damping of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularOrthogonalSoftness">
            <summary>
            <para>A factor that gets applied to the all rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularOrthogonalRestitution">
            <summary>
            <para>The amount of restitution of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.AngularOrthogonalDamping">
            <summary>
            <para>The amount of damping of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.SliderJointParam.Max">
            <summary>
            <para>End flag of SLIDER_JOINT_* constants, used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.Bias">
            <summary>
            <para>The speed with which the two bodies get pulled together when they move in different directions.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.LimitUpper">
            <summary>
            <para>The maximum rotation across the Hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.LimitLower">
            <summary>
            <para>The minimum rotation across the Hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.LimitBias">
            <summary>
            <para>The speed with which the rotation across the axis perpendicular to the hinge gets corrected.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.LimitSoftness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.LimitRelaxation">
            <summary>
            <para>The lower this value, the more the rotation gets slowed down.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.MotorTargetVelocity">
            <summary>
            <para>Target speed for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointParam.MotorMaxImpulse">
            <summary>
            <para>Maximum acceleration for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisFlag.LinearLimit">
            <summary>
            <para>If <c>set</c> there is linear motion possible within the given limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisFlag.AngularLimit">
            <summary>
            <para>If <c>set</c> there is rotational motion possible.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisFlag.Motor">
            <summary>
            <para>If <c>set</c> there is a rotational motor across these axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.G6DOFJointAxisFlag.LinearMotor">
            <summary>
            <para>If <c>set</c> there is a linear motor on this axis that targets a specific velocity.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointFlag.UseLimit">
            <summary>
            <para>If <c>true</c>, the Hinge has a maximum and a minimum rotation.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.HingeJointFlag.EnableMotor">
            <summary>
            <para>If <c>true</c>, a motor turns the Hinge</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaSpaceOverrideMode.Disabled">
            <summary>
            <para>This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaSpaceOverrideMode.Combine">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaSpaceOverrideMode.CombineReplace">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaSpaceOverrideMode.Replace">
            <summary>
            <para>This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaSpaceOverrideMode.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.Gravity">
            <summary>
            <para>Constant to set/get gravity strength in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.GravityVector">
            <summary>
            <para>Constant to set/get gravity vector/center in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.GravityIsPoint">
            <summary>
            <para>Constant to set/get whether the gravity vector of an area is a direction, or a center point.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.GravityDistanceScale">
            <summary>
            <para>Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.GravityPointAttenuation">
            <summary>
            <para>This constant was used to set/get the falloff factor for point gravity. It has been superseded by AREA_PARAM_GRAVITY_DISTANCE_SCALE.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.LinearDamp">
            <summary>
            <para>Constant to set/get the linear dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.AngularDamp">
            <summary>
            <para>Constant to set/get the angular dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer.AreaParameter.Priority">
            <summary>
            <para>Constant to set/get the priority (order of processing) of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeCreate(Godot.PhysicsServer.ShapeType)">
            <summary>
            <para>Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use <see cref="M:Godot.PhysicsServer.AreaSetShape(Godot.RID,System.Int32,Godot.RID)"/> or <see cref="M:Godot.PhysicsServer.BodySetShape(Godot.RID,System.Int32,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            <para>Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created <see cref="M:Godot.PhysicsServer.ShapeGetType(Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeGetType(Godot.RID)">
            <summary>
            <para>Returns the type of shape (see SHAPE_* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeGetData(Godot.RID)">
            <summary>
            <para>Returns the shape data.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceCreate">
            <summary>
            <para>Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with <see cref="M:Godot.PhysicsServer.AreaSetSpace(Godot.RID,Godot.RID)"/>, or to a body with <see cref="M:Godot.PhysicsServer.BodySetSpace(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Marks a space as active. It will not have an effect, unless it is assigned to an area or body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceIsActive(Godot.RID)">
            <summary>
            <para>Returns whether the space is active.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceSetParam(Godot.RID,Godot.PhysicsServer.SpaceParameter,System.Single)">
            <summary>
            <para>Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceGetParam(Godot.RID,Godot.PhysicsServer.SpaceParameter)">
            <summary>
            <para>Returns the value of a space parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the state of a space, a <see cref="T:Godot.PhysicsDirectSpaceState"/>. This object can be used to make collision/intersection queries.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaCreate">
            <summary>
            <para>Creates an <see cref="T:Godot.Area"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetSpace(Godot.RID)">
            <summary>
            <para>Returns the space assigned to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetSpaceOverrideMode(Godot.RID,Godot.PhysicsServer.AreaSpaceOverrideMode)">
            <summary>
            <para>Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            <para>Returns the space override mode for the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform})">
            <summary>
            <para>Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            <param name="transform">If the parameter is null, then the default value is new Transform()</param>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given area shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for an area shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a shape within an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from an area. It does not delete the shape, so it can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to one or many physics layers.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            <para>Sets which physics layers the area will monitor.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetParam(Godot.RID,Godot.PhysicsServer.AreaParameter,System.Object)">
            <summary>
            <para>Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetParam(Godot.RID,Godot.PhysicsServer.AreaParameter)">
            <summary>
            <para>Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetTransform(Godot.RID)">
            <summary>
            <para>Returns the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            <para>Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:</para>
            <para>1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.</para>
            <para>2: <see cref="T:Godot.RID"/> of the object that entered/exited the area.</para>
            <para>3: Instance ID of the object that entered/exited the area.</para>
            <para>4: The shape index of the object that entered/exited the area.</para>
            <para>5: The shape index of the area where the object entered/exited.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetAreaMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetMonitorable(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets object pickable with rays.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaIsRayPickable(Godot.RID)">
            <summary>
            <para>If <c>true</c>, area collides with rays.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyCreate(Godot.PhysicsServer.BodyMode,System.Boolean)">
            <summary>
            <para>Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the body (see <see cref="M:Godot.PhysicsServer.SpaceCreate"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetSpace(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the space assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetMode(Godot.RID,Godot.PhysicsServer.BodyMode)">
            <summary>
            <para>Sets the body mode, from one of the constants BODY_MODE*.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetMode(Godot.RID)">
            <summary>
            <para>Returns the body mode.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetCollisionMask(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body can collide with.</para>
            <para>-</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform})">
            <summary>
            <para>Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            <param name="transform">If the parameter is null, then the default value is new Transform()</param>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given body shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetEnableContinuousCollisionDetection(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the continuous collision detection mode is enabled.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsContinuousCollisionDetectionEnabled(Godot.RID)">
            <summary>
            <para>If <c>true</c>, the continuous collision detection mode is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetParam(Godot.RID,Godot.PhysicsServer.BodyParameter,System.Single)">
            <summary>
            <para>Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetParam(Godot.RID,Godot.PhysicsServer.BodyParameter)">
            <summary>
            <para>Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetKinematicSafeMargin(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetKinematicSafeMargin(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetState(Godot.RID,Godot.PhysicsServer.BodyState,System.Object)">
            <summary>
            <para>Sets a body state (see BODY_STATE* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetState(Godot.RID,Godot.PhysicsServer.BodyState)">
            <summary>
            <para>Returns a body state.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddCentralForce(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddForce(Godot.RID,Godot.Vector3,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddTorque(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyApplyCentralImpulse(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyApplyImpulse(Godot.RID,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Gives the body a push at a <c>position</c> in the direction of the <c>impulse</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyApplyTorqueImpulse(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Gives the body a push to rotate it.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetAxisVelocity(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetAxisLock(Godot.RID,Godot.PhysicsServer.BodyAxis,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsAxisLocked(Godot.RID,Godot.PhysicsServer.BodyAxis)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a body to the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Removes a body from the list of bodies exempt from collisions.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            <para>Returns the maximum contacts that can be reported. See <see cref="M:Godot.PhysicsServer.BodySetMaxContactsReported(Godot.RID,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            <para>Returns whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)">
            <summary>
            <para>Sets the function used to calculate physics for an object, if that object allows it (see <see cref="M:Godot.PhysicsServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets the body pickable with rays if <c>enabled</c> is set.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsRayPickable(Godot.RID)">
            <summary>
            <para>If <c>true</c>, the body can be detected by rays</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.PhysicsDirectBodyState"/> of the body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreatePin(Godot.RID,Godot.Vector3,Godot.RID,Godot.Vector3)">
            <summary>
            <para>Creates a <see cref="T:Godot.PinJoint"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetParam(Godot.RID,Godot.PhysicsServer.PinJointParam,System.Single)">
            <summary>
            <para>Sets a pin_joint parameter (see PIN_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetParam(Godot.RID,Godot.PhysicsServer.PinJointParam)">
            <summary>
            <para>Gets a pin_joint parameter (see PIN_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetLocalA(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets position of the joint in the local space of body a of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetLocalA(Godot.RID)">
            <summary>
            <para>Returns position of the joint in the local space of body a of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetLocalB(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets position of the joint in the local space of body b of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetLocalB(Godot.RID)">
            <summary>
            <para>Returns position of the joint in the local space of body b of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateHinge(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.HingeJoint"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointSetParam(Godot.RID,Godot.PhysicsServer.HingeJointParam,System.Single)">
            <summary>
            <para>Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointGetParam(Godot.RID,Godot.PhysicsServer.HingeJointParam)">
            <summary>
            <para>Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointSetFlag(Godot.RID,Godot.PhysicsServer.HingeJointFlag,System.Boolean)">
            <summary>
            <para>Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointGetFlag(Godot.RID,Godot.PhysicsServer.HingeJointFlag)">
            <summary>
            <para>Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateSlider(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.SliderJoint"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SliderJointSetParam(Godot.RID,Godot.PhysicsServer.SliderJointParam,System.Single)">
            <summary>
            <para>Gets a slider_joint parameter (see SLIDER_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SliderJointGetParam(Godot.RID,Godot.PhysicsServer.SliderJointParam)">
            <summary>
            <para>Gets a slider_joint parameter (see SLIDER_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateConeTwist(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.ConeTwistJoint"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ConeTwistJointSetParam(Godot.RID,Godot.PhysicsServer.ConeTwistJointParam,System.Single)">
            <summary>
            <para>Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ConeTwistJointGetParam(Godot.RID,Godot.PhysicsServer.ConeTwistJointParam)">
            <summary>
            <para>Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointGetType(Godot.RID)">
            <summary>
            <para>Returns the type of the Joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointSetSolverPriority(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the priority value of the Joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointGetSolverPriority(Godot.RID)">
            <summary>
            <para>Gets the priority value of the Joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateGeneric6dof(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.Generic6DOFJoint"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointSetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisParam,System.Single)">
            <summary>
            <para>Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointGetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisParam)">
            <summary>
            <para>Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointSetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisFlag,System.Boolean)">
            <summary>
            <para>Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointGetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisFlag)">
            <summary>
            <para>Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.FreeRid(Godot.RID)">
            <summary>
            <para>Destroys any of the objects created by PhysicsServer. If the <see cref="T:Godot.RID"/> passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SetActive(System.Boolean)">
            <summary>
            <para>Activates or deactivates the 3D physics engine.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.GetProcessInfo(Godot.PhysicsServer.ProcessInfo)">
            <summary>
            <para>Returns an Info defined by the <see cref="T:Godot.PhysicsServer.ProcessInfo"/> input given.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.CollisionMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Exclude">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.ShapeRid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.CollideWithBodies">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.CollideWithAreas">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryParameters.SetShape(Godot.Resource)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultRid(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObjectId(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObject(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObjectShape(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PinJoint">
            <summary>
            <para>Pin Joint for 3D Rigid Bodies. It pins 2 bodies (rigid or static) together.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint.Param.Bias">
            <summary>
            <para>The force with which the pinned objects stay in positional relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint.Param.Damping">
            <summary>
            <para>The force with which the pinned objects stay in velocity relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint.Param.ImpulseClamp">
            <summary>
            <para>If above 0, this value is the maximum value for an impulse that this Joint produces.</para>
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__bias">
            <summary>
            <para>The force with which the pinned objects stay in positional relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__damping">
            <summary>
            <para>The force with which the pinned objects stay in velocity relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__impulseClamp">
            <summary>
            <para>If above 0, this value is the maximum value for an impulse that this Joint produces.</para>
            </summary>
        </member>
        <member name="T:Godot.PinJoint2D">
            <summary>
            <para>Pin Joint for 2D Rigid Bodies. It pins two bodies (rigid or static) together.</para>
            </summary>
        </member>
        <member name="P:Godot.PinJoint2D.Softness">
            <summary>
            <para>The higher this value, the more the bond to the pinned partner can flex.</para>
            </summary>
        </member>
        <member name="T:Godot.PlaneMesh">
            <summary>
            <para>Class representing a planar <see cref="T:Godot.PrimitiveMesh"/>. This flat mesh does not have a thickness.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.Size">
            <summary>
            <para>Size of the generated plane. Defaults to (2.0, 2.0).</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideWidth">
            <summary>
            <para>Number of subdivision along the x-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideDepth">
            <summary>
            <para>Number of subdivision along the z-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneShape.Plane">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PluginScript.New(System.Object[])">
            <summary>
            <para>Returns a new instance of the script.</para>
            </summary>
        </member>
        <member name="T:Godot.Polygon2D">
            <summary>
            <para>A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Color">
            <summary>
            <para>The polygon's fill color. If <c>texture</c> is defined, it will be multiplied by this color. It will also be the default color for vertices not set in <c>vertex_colors</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Offset">
            <summary>
            <para>The offset applied to each vertex.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Antialiased">
            <summary>
            <para>If <c>true</c>, polygon edges will be anti-aliased. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Texture">
            <summary>
            <para>The polygon's fill texture. Use <c>uv</c> to set texture coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureOffset">
            <summary>
            <para>Amount to offset the polygon's <c>texture</c>. If <c>(0, 0)</c> the texture's origin (its top-left corner) will be placed at the polygon's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureScale">
            <summary>
            <para>Amount to multiply the <c>uv</c> coordinates when using a <c>texture</c>. Larger values make the texture smaller, and vice versa.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotationDegrees">
            <summary>
            <para>The texture's rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotation">
            <summary>
            <para>The texture's rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Skeleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertEnable">
            <summary>
            <para>If <c>true</c>, polygon will be inverted, containing the area outside the defined points and extending to the <c>invert_border</c>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertBorder">
            <summary>
            <para>Added padding applied to the bounding box when using <c>invert</c>. Setting this value too small may result in a "Bad Polygon" error. Default value: <c>100</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Polygon">
            <summary>
            <para>The polygon's list of vertices. The final point will be connected to the first. Note that this returns a copy of the <see cref="T:Godot.Vector2"/> rather than a reference.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Uv">
            <summary>
            <para>Texture coordinates for each vertex of the polygon. There should be one <c>uv</c> per polygon vertex. If there are fewer, undefined vertices will use <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.VertexColors">
            <summary>
            <para>Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use <c>color</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Polygons">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Bones">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InternalVertexCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.AddBone(Godot.NodePath,System.Single[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBoneCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBonePath(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBoneWeights(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.EraseBone(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.ClearBones">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.SetBonePath(System.Int32,Godot.NodePath)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.SetBoneWeights(System.Int32,System.Single[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.Setup(Godot.Vector2[],System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.FindPath(Godot.Vector2,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetIntersections(Godot.Vector2,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetClosestPoint(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.IsPointInside(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.SetPointPenalty(System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetPointPenalty(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetBounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Popup">
            <summary>
            <para>Popup is a base <see cref="T:Godot.Control"/> used to show dialogs and popups. It's a subwindow and modal by default (see <see cref="T:Godot.Control"/>) and has helpers for custom popup behavior.</para>
            </summary>
        </member>
        <member name="F:Godot.Popup.NotificationPostPopup">
            <summary>
            <para>Notification sent right after the popup is shown.</para>
            </summary>
        </member>
        <member name="F:Godot.Popup.NotificationPopupHide">
            <summary>
            <para>Notification sent right after the popup is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.Popup.PopupExclusive">
            <summary>
            <para>If <c>true</c>, the popup will not be hidden when a click event occurs outside of it, or when it receives the <c>ui_cancel</c> action event.</para>
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCentered(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Popup (show the control in modal form) in the center of the screen relative to its current canvas transform, at the current size, or at a size determined by "size".</para>
            <param name="size">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCenteredRatio(System.Single)">
            <summary>
            <para>Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, scaled at a ratio of size of the screen.</para>
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCenteredMinsize(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, ensuring the size is never smaller than <c>minsize</c>.</para>
            <param name="minsize">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Popup.Popup_(System.Nullable{Godot.Rect2})">
            <summary>
            <para>Popup (show the control in modal form).</para>
            <param name="bounds">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            </summary>
        </member>
        <member name="T:Godot.PopupDialog">
            <summary>
            <para>PopupDialog is a base class for popup dialogs, along with <see cref="T:Godot.WindowDialog"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupMenu">
            <summary>
            <para>PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnItemSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnCheckableItemSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnStateItemSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.SubmenuPopupDelay">
            <summary>
            <para>Sets the delay time for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item. Default value: <c>0.3</c> seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconItem(Godot.Texture,System.String,System.Int32,System.Int32)">
            <summary>
            <para>Add a new item with text "label" and icon "texture". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddItem(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Add a new item with text "label". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckItem(Godot.Texture,System.String,System.Int32,System.Int32)">
            <summary>
            <para>Add a new checkable item with text "label" and icon "texture". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be</para>
            <para>created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckItem(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Add a new checkable item with text "label". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckItem(System.String,System.Int32,System.Int32)">
            <summary>
            <para>The same as <see cref="M:Godot.PopupMenu.AddCheckItem(System.String,System.Int32,System.Int32)"/> but the inserted item will look as a radio button. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSubmenuItem(System.String,System.String,System.Int32)">
            <summary>
            <para>Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconShortcut(Godot.Texture,Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckShortcut(Godot.Texture,Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Set the text of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
            <para>Set the checkstate status of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemId(System.Int32,System.Int32)">
            <summary>
            <para>Set the id of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAccelerator(System.Int32,System.Int32)">
            <summary>
            <para>Set the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata of an item, which might be of any type. You can later get it with <see cref="M:Godot.PopupMenu.GetItemMetadata(System.Int32)"/>, which provides a simple way of assigning context data to items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the item at index "idx" is disabled or not. When it is disabled it can't be selected, or its action invoked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemSubmenu(System.Int32,System.String)">
            <summary>
            <para>Sets the submenu of the item at index "idx". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsSeparator(System.Int32,System.Boolean)">
            <summary>
            <para>Mark the item at index "idx" as a separator, which means that it would be displayed as a line.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsCheckable(System.Int32,System.Boolean)">
            <summary>
            <para>Set whether the item at index "idx" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsRadioCheckable(System.Int32,System.Boolean)">
            <summary>
            <para>The same as <see cref="M:Godot.PopupMenu.SetItemAsCheckable(System.Int32,System.Boolean)"/> but placing a radio button in case of enabling. If used for disabling, it's the same.</para>
            <para>Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemTooltip(System.Int32,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemShortcut(System.Int32,Godot.ShortCut,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMultistate(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemShortcutDisabled(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemChecked(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemMultistate(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemText(System.Int32)">
            <summary>
            <para>Return the text of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIcon(System.Int32)">
            <summary>
            <para>Return the icon of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemChecked(System.Int32)">
            <summary>
            <para>Return whether the item at index "idx" is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemId(System.Int32)">
            <summary>
            <para>Return the id of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIndex(System.Int32)">
            <summary>
            <para>Find and return the index of the item containing a given id.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)">
            <summary>
            <para>Return the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemMetadata(System.Int32)">
            <summary>
            <para>Return the metadata of an item, which might be of any type. You can set it with <see cref="M:Godot.PopupMenu.SetItemMetadata(System.Int32,System.Object)"/>, which provides a simple way of assigning context data to items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemDisabled(System.Int32)">
            <summary>
            <para>Return whether the item at index "idx" is disabled. When it is disabled it can't be selected, or its action invoked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemSubmenu(System.Int32)">
            <summary>
            <para>Return the submenu name of the item at index "idx".</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemSeparator(System.Int32)">
            <summary>
            <para>Return whether the item is a separator. If it is, it would be displayed as a line.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemCheckable(System.Int32)">
            <summary>
            <para>Return whether the item at index "idx" is checkable in some way, i.e., whether has a checkbox or radio button. Note that checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemRadioCheckable(System.Int32)">
            <summary>
            <para>Return whether the item at index "idx" has radio-button-style checkability. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemShortcutDisabled(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemTooltip(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemShortcut(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemCount">
            <summary>
            <para>Return the amount of items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at index "idx" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSeparator(System.String)">
            <summary>
            <para>Add a separator between items. Separators also occupy an index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.Clear">
            <summary>
            <para>Clear the popup menu, in effect removing all items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetHideOnWindowLoseFocus(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsHideOnWindowLoseFocus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PopupPanel">
            <summary>
            <para>Class for displaying popups with a panel background. In some cases it might be simpler to use than <see cref="T:Godot.Popup"/>, since it provides a configurable background. If you are making windows, better check <see cref="T:Godot.WindowDialog"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Position2D">
            <summary>
            <para>Generic 2D Position hint for editing. It's just like a plain <see cref="T:Godot.Node2D"/> but displays as a cross in the 2D-Editor at all times.</para>
            </summary>
        </member>
        <member name="T:Godot.Position3D">
            <summary>
            <para>Generic 3D Position hint for editing. It's just like a plain <see cref="T:Godot.Spatial"/> but displays as a cross in the 3D-Editor at all times.</para>
            </summary>
        </member>
        <member name="T:Godot.PrimitiveMesh">
            <summary>
            <para>Base class for all primitive meshes. Handles applying a <see cref="T:Godot.Material"/> to a primitive mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.Material">
            <summary>
            <para>The current <see cref="T:Godot.Material"/> of the primitive mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.CustomAabb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.FlipFaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.PrimitiveMesh.GetMeshArrays">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.PrismMesh">
            <summary>
            <para>Class representing a prism-shaped <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.LeftToRight">
            <summary>
            <para>Displacement of the upper edge along the x-axis. 0.0 positions edge straight above the bottome left edge. Defaults to 0.5 (positioned on the midpoint).</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.Size">
            <summary>
            <para>Size of the prism. Defaults to (2.0, 2.0, 2.0).</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideWidth">
            <summary>
            <para>Number of added edge loops along the x-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideHeight">
            <summary>
            <para>Number of added edge loops along the y-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideDepth">
            <summary>
            <para>Number of added edge loops along the z-axis. Defaults to 0.</para>
            </summary>
        </member>
        <member name="T:Godot.ProceduralSky">
            <summary>
            <para>ProceduralSky provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are very similar, they are defined by a color at the horizon, another color, and finally an easing curve to interpolate between these two colors. Similarly the sun is described by a position in the sky, a color, and an easing curve. However, the sun also defines a minimum and maximum angle, these two values define at what distance the easing curve begins and ends from the sun, and thus end up defining the size of the sun in the sky.</para>
            <para>The ProceduralSky is updated on the CPU after the parameters change and stored in a texture and then displayed as a background in the scene. This makes it relatively unsuitable for realtime updates during gameplay. But with a small texture size it is still feasible to update relatively frequently because it is updated on a background thread when multi-threading is available.</para>
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Size256">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Size512">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Size1024">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Size2048">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Size4096">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProceduralSky.TextureSizeEnum.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyTopColor">
            <summary>
            <para>Color of the sky at the top.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyHorizonColor">
            <summary>
            <para>Color of the sky at the horizon.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyCurve">
            <summary>
            <para>How quickly the <see cref="P:Godot.ProceduralSky.SkyHorizonColor"/> fades into the <see cref="P:Godot.ProceduralSky.SkyTopColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyEnergy">
            <summary>
            <para>Amount of energy contribution from the sky.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundBottomColor">
            <summary>
            <para>Color of the ground at the bottom.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundHorizonColor">
            <summary>
            <para>Color of the ground at the horizon.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundCurve">
            <summary>
            <para>How quickly the <see cref="P:Godot.ProceduralSky.GroundHorizonColor"/> fades into the <see cref="P:Godot.ProceduralSky.GroundBottomColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundEnergy">
            <summary>
            <para>Amount of energy contribution from the ground.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunColor">
            <summary>
            <para>Color of the sun.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunLatitude">
            <summary>
            <para>The suns height using polar coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunLongitude">
            <summary>
            <para>The direction of the sun using polar coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunAngleMin">
            <summary>
            <para>Distance from sun where it goes from solid to starting to fade.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunAngleMax">
            <summary>
            <para>Distance from center of sun where it fades out completely.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunCurve">
            <summary>
            <para>How quickly the sun fades away between <see cref="P:Godot.ProceduralSky.SunAngleMin"/> and <see cref="P:Godot.ProceduralSky.SunAngleMax"/></para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunEnergy">
            <summary>
            <para>Amount of energy contribution from the sun.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.TextureSize">
            <summary>
            <para>Size of <see cref="T:Godot.Texture"/> that the ProceduralSky will generate.</para>
            </summary>
        </member>
        <member name="T:Godot.ProgressBar">
            <summary>
            <para>General purpose progress bar. Shows fill percentage from right to left.</para>
            </summary>
        </member>
        <member name="P:Godot.ProgressBar.PercentVisible">
            <summary>
            <para>If <c>true</c>, the fill percentage is displayed on the bar. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.ProjectSettings">
            <summary>
            <para>Contains global variables accessible from everywhere. Use "ProjectSettings.get_setting(variable)", "ProjectSettings.set_setting(variable,value)" or "ProjectSettings.has_setting(variable)" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.HasSetting(System.String)">
            <summary>
            <para>Return true if a configuration value is present.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetSetting(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetSetting(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetOrder(System.String,System.Int32)">
            <summary>
            <para>Set the order of a configuration value (influences when saved to the config file).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetOrder(System.String)">
            <summary>
            <para>Return the order of a configuration value (influences when saved to the config file).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetInitialValue(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.AddPropertyInfo(Godot.Collections.Dictionary)">
            <summary>
            <para>Add a custom property info to a property. The dictionary must contain: name:<see cref="T:System.String"/>(the name of the property) and type:<see cref="T:System.Int32"/>(see TYPE_* in <c>@GlobalScope</c>), and optionally hint:<see cref="T:System.Int32"/>(see PROPERTY_HINT_* in <c>@GlobalScope</c>), hint_string:<see cref="T:System.String"/>.</para>
            <para>Example:</para>
            <para><code>
            ProjectSettings.set("category/property_name", 0)
            
            var property_info = {
                "name": "category/property_name",
                "type": TYPE_INT,
                "hint": PROPERTY_HINT_ENUM,
                "hint_string": "one,two,three"
            }
            
            ProjectSettings.add_property_info(property_info)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Clear(System.String)">
            <summary>
            <para>Clear the whole configuration (not recommended, may break things).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LocalizePath(System.String)">
            <summary>
            <para>Convert a path to a localized path (res:// path).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GlobalizePath(System.String)">
            <summary>
            <para>Convert a localized path (res://) to a full native OS path.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Save">
            <summary>
            <para>Saves the configuration to the project.godot file.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LoadResourcePack(System.String)">
            <summary>
            <para>Loads the contents of the .pck or .zip file specified by <c>pack</c> into the resource filesystem (res://). Returns true on success.</para>
            <para>Note: If a file from <c>pack</c> shares the same path as a file already in the resource filesystem, any attempts to load that file will use the file from <c>pack</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyCanRevert(System.String)">
            <summary>
            <para>Returns true if the specified property exists and its initial value differs from the current value.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyGetRevert(System.String)">
            <summary>
            <para>Returns the initial value of the specified property. Returns null if the property does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SaveCustom(System.String)">
            <summary>
            <para>Saves the configuration to a custom file.</para>
            </summary>
        </member>
        <member name="T:Godot.ProximityGroup">
            <summary>
            <para>General purpose proximity-detection node.</para>
            </summary>
        </member>
        <member name="F:Godot.ProximityGroup.DispatchModeEnum.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ProximityGroup.DispatchModeEnum.Signal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.DispatchMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.GridRadius">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ProximityGroup.Broadcast(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ProxyTexture.Base">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.QuadMesh">
            <summary>
            <para>Class representing a square mesh with size (2,2,0). Consider using a <see cref="T:Godot.PlaneMesh"/> if you require a differently sized plane.</para>
            </summary>
        </member>
        <member name="P:Godot.QuadMesh.Size">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.RandomNumberGenerator">
            <summary>
            <para>RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses PCG32. The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.</para>
            </summary>
        </member>
        <member name="P:Godot.RandomNumberGenerator.Seed">
            <summary>
            <para>The seed used by the random number generator. A given seed will give a reproducible sequence of pseudo-random numbers.</para>
            <para>Note: The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randi">
            <summary>
            <para>Generates pseudo-random 32-bit unsigned integer between '0' and '4294967295', inclusive.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randf">
            <summary>
            <para>Generates pseudo-random float between '0.0' and '1.0', inclusive.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randfn(System.Single,System.Single)">
            <summary>
            <para>Generates normally(gaussian) distributed pseudo-random number, using Box-Muller transform with the specified <c>mean</c> and a standard <c>deviation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.RandfRange(System.Single,System.Single)">
            <summary>
            <para>Generates pseudo-random float between <c>from</c> and <c>to</c>, inclusive.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.RandiRange(System.Int32,System.Int32)">
            <summary>
            <para>Generates pseudo-random 32-bit signed integer between <c>from</c> and <c>to</c> (inclusive).</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randomize">
            <summary>
            <para>Setups a time-based seed to generator.</para>
            </summary>
        </member>
        <member name="T:Godot.Range">
            <summary>
            <para>Range is a base class for <see cref="T:Godot.Control"/> nodes that change a floating point value between a minimum and a maximum, using step and page, for example a <see cref="T:Godot.ScrollBar"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.MinValue">
            <summary>
            <para>Minimum value. Range is clamped if <c>value</c> is less than <c>min_value</c>. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.MaxValue">
            <summary>
            <para>Maximum value. Range is clamped if <c>value</c> is greater than <c>max_value</c>. Default value: <c>100</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Step">
            <summary>
            <para>If greater than 0, <c>value</c> will always be rounded to a multiple of <c>step</c>. If <c>rounded</c> is also <c>true</c>, <c>value</c> will first be rounded to a multiple of <c>step</c> then rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Page">
            <summary>
            <para>Page size. Used mainly for <see cref="T:Godot.ScrollBar"/>. ScrollBar's length is its size multiplied by <c>page</c> over the difference between <c>min_value</c> and <c>max_value</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Value">
            <summary>
            <para>Range's current value.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Ratio">
            <summary>
            <para>The value mapped between 0 and 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.ExpEdit">
            <summary>
            <para>If <c>true</c>, and <c>min_value</c> is greater than 0, <c>value</c> will be represented exponentially rather than linearly.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Rounded">
            <summary>
            <para>If <c>true</c>, <c>value</c> will always be rounded to the nearest integer. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.AllowGreater">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Range.Value"/> may be greater than <see cref="P:Godot.Range.MaxValue"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.AllowLesser">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Range.Value"/> may be less than <see cref="P:Godot.Range.MinValue"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Range.Share(Godot.Node)">
            <summary>
            <para>Binds two ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group.</para>
            </summary>
        </member>
        <member name="M:Godot.Range.Unshare">
            <summary>
            <para>Stop range from sharing its member variables with any other.</para>
            </summary>
        </member>
        <member name="T:Godot.RayCast">
            <summary>
            <para>A RayCast represents a line from its origin to its destination position, <c>cast_to</c>. It is used to query the 3D space in order to find the closest object along the path of the ray.</para>
            <para>RayCast can ignore some objects by adding them to the exception list via <c>add_exception</c> or by setting proper filtering with collision layers and masks.</para>
            <para>RayCast can be configured to report collisions with <see cref="T:Godot.Area"/>s (<see cref="P:Godot.RayCast.CollideWithAreas"/>) and/or <see cref="T:Godot.PhysicsBody"/>s (<see cref="P:Godot.RayCast.CollideWithBodies"/>).</para>
            <para>Only enabled raycasts will be able to query the space and report collisions.</para>
            <para>RayCast calculates intersection every physics frame (see <see cref="T:Godot.Node"/>), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame), use <see cref="M:Godot.RayCast.ForceRaycastUpdate"/> after adjusting the raycast.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.Enabled">
            <summary>
            <para>If <c>true</c>, collisions will be reported. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.ExcludeParent">
            <summary>
            <para>If <c>true</c>, collisions will be ignored for this RayCast's immediate parent. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.CastTo">
            <summary>
            <para>The ray's destination point, relative to the RayCast's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.CollisionMask">
            <summary>
            <para>The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.Area"/>s will be reported. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.PhysicsBody"/>s will be reported. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.IsColliding">
            <summary>
            <para>Return whether any object is intersecting with the ray's vector (considering the vector length).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.ForceRaycastUpdate">
            <summary>
            <para>Updates the collision information for the ray.</para>
            <para>Use this method to update the collision information immediately instead of waiting for the next <c>_physics_process</c> call, for example if the ray or its parent has changed state. Note: <c>enabled == true</c> is not required for this to work.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollider">
            <summary>
            <para>Return the first object that the ray intersects, or <c>null</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetColliderShape">
            <summary>
            <para>Returns the shape ID of the first object that the ray intersects, or <c>0</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionPoint">
            <summary>
            <para>Returns the collision point at which the ray intersects the closest object. Note: this point is in the global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionNormal">
            <summary>
            <para>Returns the normal of the intersecting object's shape at the collision point.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.AddExceptionRid(Godot.RID)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.AddException(Godot.Object)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.RemoveExceptionRid(Godot.RID)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.RemoveException(Godot.Object)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.ClearExceptions">
            <summary>
            <para>Removes all collision exceptions for this ray.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the bit index passed to the <c>value</c> passed. Note that bit indexes range from 0-19.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the bit index passed is turned on. Note that bit indexes range from 0-19.</para>
            </summary>
        </member>
        <member name="T:Godot.RayCast2D">
            <summary>
            <para>A RayCast represents a line from its origin to its destination position, <c>cast_to</c>. It is used to query the 2D space in order to find the closest object along the path of the ray.</para>
            <para>RayCast2D can ignore some objects by adding them to the exception list via <c>add_exception</c>, by setting proper filtering with collision layers, or by filtering object types with type masks.</para>
            <para>RayCast2D can be configured to report collisions with <see cref="T:Godot.Area2D"/>s (<see cref="P:Godot.RayCast2D.CollideWithAreas"/>) and/or <see cref="T:Godot.PhysicsBody2D"/>s (<see cref="P:Godot.RayCast2D.CollideWithBodies"/>).</para>
            <para>Only enabled raycasts will be able to query the space and report collisions.</para>
            <para>RayCast2D calculates intersection every physics frame (see <see cref="T:Godot.Node"/>), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use <see cref="M:Godot.RayCast2D.ForceRaycastUpdate"/> after adjusting the raycast.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.Enabled">
            <summary>
            <para>If <c>true</c>, collisions will be reported. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.ExcludeParent">
            <summary>
            <para>If <c>true</c>, the parent node will be excluded from collision detection. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CastTo">
            <summary>
            <para>The ray's destination point, relative to the RayCast's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollisionMask">
            <summary>
            <para>The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.Area2D"/>s will be reported. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.PhysicsBody2D"/>s will be reported. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.IsColliding">
            <summary>
            <para>Return whether any object is intersecting with the ray's vector (considering the vector length).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ForceRaycastUpdate">
            <summary>
            <para>Updates the collision information for the ray. Use this method to update the collision information immediately instead of waiting for the next <c>_physics_process</c> call, for example if the ray or its parent has changed state. Note: <c>enabled == true</c> is not required for this to work.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollider">
            <summary>
            <para>Return the first object that the ray intersects, or <c>null</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast2D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetColliderShape">
            <summary>
            <para>Returns the shape ID of the first object that the ray intersects, or <c>0</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast2D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionPoint">
            <summary>
            <para>Returns the collision point at which the ray intersects the closest object. Note: this point is in the global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionNormal">
            <summary>
            <para>Returns the normal of the intersecting object's shape at the collision point.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddExceptionRid(Godot.RID)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddException(Godot.Object)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveExceptionRid(Godot.RID)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveException(Godot.Object)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ClearExceptions">
            <summary>
            <para>Removes all collision exceptions for this ray.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Return an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="T:Godot.RayShape">
            <summary>
            <para>Ray shape for 3D collisions, which can be set into a <see cref="T:Godot.PhysicsBody"/> or <see cref="T:Godot.Area"/>. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape.Length">
            <summary>
            <para>The ray's length.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape.SlipsOnSlope">
            <summary>
            <para>If <c>true</c>, allow the shape to return the correct normal. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.RayShape2D">
            <summary>
            <para>Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape2D.Length">
            <summary>
            <para>The ray's length.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape2D.SlipsOnSlope">
            <summary>
            <para>If <c>true</c>, allow the shape to return the correct normal. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.RectangleShape2D">
            <summary>
            <para>Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.</para>
            </summary>
        </member>
        <member name="P:Godot.RectangleShape2D.Extents">
            <summary>
            <para>The rectangle's half extents. The width and height of this shape is twice the half extents.</para>
            </summary>
        </member>
        <member name="T:Godot.Reference">
            <summary>
            <para>Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.</para>
            </summary>
        </member>
        <member name="M:Godot.Reference.InitRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Reference.Reference_">
            <summary>
            <para>Increase the internal reference counter. Use this only if you really know what you are doing.</para>
            </summary>
        </member>
        <member name="M:Godot.Reference.Unreference">
            <summary>
            <para>Decrease the internal reference counter. Use this only if you really know what you are doing.</para>
            </summary>
        </member>
        <member name="T:Godot.ReferenceRect">
            <summary>
            <para>Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.</para>
            </summary>
        </member>
        <member name="P:Godot.ReferenceRect.BorderColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ReflectionProbe.UpdateModeEnum.Once">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ReflectionProbe.UpdateModeEnum.Always">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.UpdateMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Intensity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.MaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Extents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.OriginOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.BoxProjection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.EnableShadows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.CullMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorEnable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientEnergy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientContrib">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.RegEx">
            <summary>
            <para>Regular Expression (or regex) is a compact programming language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of <c>ab[0-9]</c> would find any string that is <c>ab</c> followed by any number from <c>0</c> to <c>9</c>. For a more in-depth look, you can easily find various tutorials and detailed explanations on the Internet.</para>
            <para>To begin, the RegEx object needs to be compiled with the search pattern using <see cref="M:Godot.RegEx.Compile(System.String)"/> before it can be used.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            </code></para>
            <para>The search pattern must be escaped first for gdscript before it is escaped for the expression. For example, <c>compile("\\d+")</c> would be read by RegEx as <c>\d+</c>. Similarly, <c>compile("\"(?:\\\\.|[^\"])*\"")</c> would be read as <c>"(?:\\.|[^"])*"</c></para>
            <para>Using <see cref="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)"/> you can find the pattern within the given text. If a pattern is found, <see cref="T:Godot.RegExMatch"/> is returned and you can retrieve details of the results using functions such as <see cref="M:Godot.RegExMatch.GetString(System.Object)"/> and <see cref="M:Godot.RegExMatch.GetStart(System.Object)"/>.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            var result = regex.search("abc n-0123")
            if result:
                print(result.get_string()) # Would print n-0123
            </code></para>
            <para>The results of capturing groups <c>()</c> can be retrieved by passing the group number to the various functions in <see cref="T:Godot.RegExMatch"/>. Group 0 is the default and would always refer to the entire pattern. In the above example, calling <c>result.get_string(1)</c> would give you <c>0123</c>.</para>
            <para>This version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("d(?&lt;digit&gt;[0-9]+)|x(?&lt;digit&gt;[0-9a-f]+)")
            var result = regex.search("the number is x2f")
            if result:
                print(result.get_string("digit")) # Would print 2f
            </code></para>
            <para>If you need to process multiple results, <see cref="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)"/> generates a list of all non-overlapping results. This can be combined with a for-loop for convenience.</para>
            <para><code>
            for result in regex.search_all("d01, d03, d0c, x3f and x42"):
                print(result.get_string("digit"))
            # Would print 01 03 3f 42
            # Note that d0c would not match
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Clear">
            <summary>
            <para>This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Compile(System.String)">
            <summary>
            <para>Compiles and assign the search pattern to use. Returns OK if the compilation is successful. If an error is encountered the details are printed to STDOUT and FAILED is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern. Returns a <see cref="T:Godot.RegExMatch"/> container of the first matching result if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern. Returns an array of <see cref="T:Godot.RegExMatch"/> containers for each non-overlapping result. If no results were found an empty array is returned instead. The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Sub(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as <c>\1</c> and <c>\g&lt;name&gt;</c> expanded and resolved. By default only the first instance is replaced but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.IsValid">
            <summary>
            <para>Returns whether this object has a valid search pattern assigned.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetPattern">
            <summary>
            <para>Returns the original search pattern that was compiled.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetGroupCount">
            <summary>
            <para>Returns the number of capturing groups in compiled pattern.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetNames">
            <summary>
            <para>Returns an array of names of named capturing groups in the compiled pattern. They are ordered by appearance.</para>
            </summary>
        </member>
        <member name="T:Godot.RegExMatch">
            <summary>
            <para>Contains the results of a single regex match returned by <see cref="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)"/> and <see cref="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)"/>. It can be used to find the position and range of the match and its capturing groups, and it can extract its sub-string for you.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Subject">
            <summary>
            <para>The source string used with the search pattern to find this matching result.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Names">
            <summary>
            <para>A dictionary of named groups and its corresponding group number. Only groups with that were matched are included. If multiple groups have the same name, that name would refer to the first matching one.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Strings">
            <summary>
            <para>An <see cref="T:Godot.Collections.Array"/> of the match and its capturing groups.</para>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetGroupCount">
            <summary>
            <para>Returns the number of capturing groups.</para>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetString(System.Object)">
            <summary>
            <para>Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns an empty string if the group did not match or doesn't exist.</para>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetStart(System.Object)">
            <summary>
            <para>Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns -1 if the group did not match or doesn't exist.</para>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetEnd(System.Object)">
            <summary>
            <para>Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns -1 if the group did not match or doesn't exist.</para>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
            </summary>
        </member>
        <member name="T:Godot.RemoteTransform">
            <summary>
            <para>RemoteTransform pushes its own <see cref="T:Godot.Transform"/> to another <see cref="T:Godot.Spatial"/> derived Node (called the remote node) in the scene.</para>
            <para>It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.RemotePath">
            <summary>
            <para>The <see cref="T:Godot.NodePath"/> to the remote node, relative to the RemoteTransform's position in the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UseGlobalCoordinates">
            <summary>
            <para>If <c>true</c>, global coordinates are used. If <c>false</c>, local coordinates are used. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdatePosition">
            <summary>
            <para>If <c>true</c>, the remote node's position is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdateRotation">
            <summary>
            <para>If <c>true</c>, the remote node's rotation is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdateScale">
            <summary>
            <para>If <c>true</c>, the remote node's scale is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.RemoteTransform2D">
            <summary>
            <para>RemoteTransform2D pushes its own <see cref="T:Godot.Transform2D"/> to another <see cref="T:Godot.CanvasItem"/> derived Node (called the remote node) in the scene.</para>
            <para>It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.RemotePath">
            <summary>
            <para>The <see cref="T:Godot.NodePath"/> to the remote node, relative to the RemoteTransform2D's position in the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UseGlobalCoordinates">
            <summary>
            <para>If <c>true</c>, global coordinates are used. If <c>false</c>, local coordinates are used. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdatePosition">
            <summary>
            <para>If <c>true</c>, the remote node's position is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateRotation">
            <summary>
            <para>If <c>true</c>, the remote node's rotation is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateScale">
            <summary>
            <para>If <c>true</c>, the remote node's scale is updated. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Resource">
            <summary>
            <para>Resource is the base class for all resource types, serving primarily as data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a <see cref="T:Godot.Node"/>, which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a <see cref="T:Godot.Node"/> or another resource.</para>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceLocalToScene">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourcePath">
            <summary>
            <para>The path to the resource. In case it has its own file, it will return its filepath. If it's tied to the scene, it will return the scene's path, followed by the resource's index.</para>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceName">
            <summary>
            <para>The name of the resource. This is an optional identifier.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource._SetupLocalToScene">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Resource.TakeOverPath(System.String)">
            <summary>
            <para>Sets the path of the resource. Differs from <c>set_path()</c>, if another <c>Resource</c> exists with "path" it over-takes it, instead of failing.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.GetRid">
            <summary>
            <para>Returns the RID of the resource (or an empty RID). Many resources (such as <see cref="T:Godot.Texture"/>, <see cref="T:Godot.Mesh"/>, etc) are high level abstractions of resources stored in a server, so this function will return the original RID.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.GetLocalScene">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Resource.SetupLocalToScene">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Resource.Duplicate(System.Boolean)">
            <summary>
            <para>Duplicates the resource, returning a new resource. By default, sub-resources are shared between resource copies for efficiency, this can be changed by passing <c>true</c> to the <c>subresources</c> argument.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceFormatLoader">
            <summary>
            <para>Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They get queried when you call <c>load</c>, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoader are registered in the engine.</para>
            <para>Extending this class allows you to define your own. You should give it a global class name with <c>class_name</c> for it to be registered. You may as well implement a <see cref="T:Godot.ResourceFormatSaver"/>.</para>
            <para>Note: You can also extend <see cref="!:Godot.EditorImportPlugin"/> if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. Example: it's better to import .PNG textures as .STEX first, so they can be loaded with better efficiency on the graphics card.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetDependencies(System.String,System.String)">
            <summary>
            <para>If implemented, gets the dependencies of a given resource. If <c>add_types</c> is <c>true</c>, paths should be appended <c>::TypeName</c>, where <c>TypeName</c> is the class name of the dependency. Note that custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just return <c>Resource</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetRecognizedExtensions">
            <summary>
            <para>Gets the list of extensions for files this loader is able to read.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetResourceType(System.String)">
            <summary>
            <para>Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return <c>""</c>. Note that custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just return <c>"Resource"</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.HandlesType(System.String)">
            <summary>
            <para>Tells which resource class this loader can load. Note that custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just handle <c>"Resource"</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.Load(System.String,System.String)">
            <summary>
            <para>Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, <c>original_path</c> will target the source file. Returns a resource object if succeeded, or an <c>ERR_*</c> constant listed in <c>@GlobalScope</c> if it failed.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.RenameDependencies(System.String,System.String)">
            <summary>
            <para>If implemented, renames dependencies within the given resource and saves it. <c>renames</c> is a dictionary <c>{ String =&gt; String }</c> mapping old dependency paths to new paths. Returns <c>OK</c> on success, or an <c>ERR_*</c> constant listed in <c>@GlobalScope</c> in case of failure.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceFormatSaver">
            <summary>
            <para>The engine can save resources when you do it from the editor, or when you call <see cref="M:Godot.ResourceSaver.Save(System.String,Godot.Resource,System.Int32)"/>. This is accomplished with multiple <c>ResourceFormatSaver</c>s, each handling its own format.</para>
            <para>By default, Godot saves resources as <c>.tres</c>, <c>.res</c> or another built-in format, but you can choose to create your own format by extending this class. You should give it a global class name with <c>class_name</c> for it to be registered. You may as well implement a <see cref="T:Godot.ResourceFormatLoader"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.GetRecognizedExtensions(Godot.Resource)">
            <summary>
            <para>Gets the list of extensions for files this saver is able to write.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.Recognize(Godot.Resource)">
            <summary>
            <para>Returns true if the given resource object can be saved by this saver.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.Save(System.String,Godot.Resource,System.Int32)">
            <summary>
            <para>Saves the given resource object to a file. <c>flags</c> is a bitmask composed with <c>FLAG_*</c> constants defined in <see cref="T:Godot.ResourceSaver"/>. Returns <c>OK</c> on success, or an <c>ERR_*</c> constant listed in <c>@GlobalScope</c> if it failed.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceInteractiveLoader">
            <summary>
            <para>Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetResource">
            <summary>
            <para>Return the loaded resource (only if loaded). Otherwise, returns null.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.Poll">
            <summary>
            <para>Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling <see cref="M:Godot.ResourceInteractiveLoader.GetResource"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.Wait">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetStage">
            <summary>
            <para>Return the load stage. The total amount of stages can be queried with <see cref="M:Godot.ResourceInteractiveLoader.GetStageCount"/></para>
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetStageCount">
            <summary>
            <para>Return the total amount of stages (calls to <see cref="M:Godot.ResourceInteractiveLoader.Poll"/>) needed to completely load this resource.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourcePreloader">
            <summary>
            <para>This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.AddResource(System.String,Godot.Resource)">
            <summary>
            <para>Adds a resource to the preloader with the given <c>name</c>. If a resource with the given <c>name</c> already exists, the new resource will be renamed to "<c>name</c> N" where N is an incrementing number starting from 2.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RemoveResource(System.String)">
            <summary>
            <para>Removes the resource associated to <c>name</c> from the preloader.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RenameResource(System.String,System.String)">
            <summary>
            <para>Renames a resource inside the preloader from <c>name</c> to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.HasResource(System.String)">
            <summary>
            <para>Returns true if the preloader contains a resource associated to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResource(System.String)">
            <summary>
            <para>Returns the resource associated to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResourceList">
            <summary>
            <para>Returns the list of resources inside the preloader.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceSaver">
            <summary>
            <para>Resource saving interface, used for saving resources to disk.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.RelativePaths">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.BundleResources">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.ChangePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.OmitEditorProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.SaveBigEndian">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.Compress">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.ReplaceSubresourcePaths">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.Save(System.String,Godot.Resource,System.Int32)">
            <summary>
            <para>Saves a resource to disk.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.GetRecognizedExtensions(Godot.Resource)">
            <summary>
            <para>Returns the list of extensions available for saving a resource of a given type.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel">
            <summary>
            <para>Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.</para>
            <para>Note that assignments to <see cref="P:Godot.RichTextLabel.BbcodeText"/> clear the tag stack and reconstruct it from the property's contents. Any edits made to <see cref="P:Godot.RichTextLabel.BbcodeText"/> will erase previous edits made from other manual sources such as <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/> and the <c>push_*</c> / <see cref="M:Godot.RichTextLabel.Pop"/> methods.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Fill">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Numbers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Letters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Dots">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Frame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Image">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Newline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Font">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Underline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Strikethrough">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Align">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Indent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.List">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Table">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ItemType.Meta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeEnabled">
            <summary>
            <para>If <c>true</c>, the label uses BBCode formatting. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeText">
            <summary>
            <para>The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.VisibleCharacters">
            <summary>
            <para>The restricted number of characters to display in the label.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.PercentVisible">
            <summary>
            <para>The text's visibility, as a <see cref="T:System.Single"/> between 0.0 and 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.MetaUnderlined">
            <summary>
            <para>If <c>true</c>, the label underlines meta tags such as <c>[url]{text}[/url]</c>. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.TabSize">
            <summary>
            <para>The number of spaces associated with a single tab length. Does not affect "\t" in text tags, only indent tags.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.Text">
            <summary>
            <para>The raw text of the label.</para>
            <para>When set, clears the tag stack and adds a raw text tag to the top of it. Does not parse bbcodes. Does not modify <see cref="P:Godot.RichTextLabel.BbcodeText"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollActive">
            <summary>
            <para>If <c>true</c>, the scrollbar is visible. Does not block scrolling completely. See <see cref="M:Godot.RichTextLabel.ScrollToLine(System.Int32)"/>. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollFollowing">
            <summary>
            <para>If <c>true</c>, the window scrolls down to display new content automatically. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.SelectionEnabled">
            <summary>
            <para>If <c>true</c>, the label allows text selection.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.OverrideSelectedFontColor">
            <summary>
            <para>If <c>true</c>, the label uses the custom font color. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddText(System.String)">
            <summary>
            <para>Adds raw non-bbcode-parsed text to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddImage(Godot.Texture)">
            <summary>
            <para>Adds an image's opening and closing tags to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Newline">
            <summary>
            <para>Adds a newline tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.RemoveLine(System.Int32)">
            <summary>
            <para>Removes a line of content from the label. Returns <c>true</c> if the line exists.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushFont(Godot.Font)">
            <summary>
            <para>Adds a <c>[font]</c> tag to the tag stack. Overrides default fonts for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushColor(Godot.Color)">
            <summary>
            <para>Adds a <c>[color]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushAlign(Godot.RichTextLabel.Align)">
            <summary>
            <para>Adds an alignment tag based on the given <c>align</c> value. See <see cref="T:Godot.RichTextLabel.Align"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushIndent(System.Int32)">
            <summary>
            <para>Adds an <c>[indent]</c> tag to the tag stack. Multiplies "level" by current tab_size to determine new margin length.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushList(Godot.RichTextLabel.ListType)">
            <summary>
            <para>Adds a list tag to the tag stack. Similar to the bbcodes <c>[ol]</c> or <c>[ul]</c>, but supports more list types. Not fully implemented!</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushMeta(System.Object)">
            <summary>
            <para>Adds a meta tag to the tag stack. Similar to the bbcode <c>[url=something]{text}[/url]</c>, but supports non-<see cref="T:System.String"/> metadata types.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushUnderline">
            <summary>
            <para>Adds a <c>[u]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushStrikethrough">
            <summary>
            <para>Adds a <c>[s]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushTable(System.Int32)">
            <summary>
            <para>Adds a <c>[table=columns]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetTableColumnExpand(System.Int32,System.Boolean,System.Int32)">
            <summary>
            <para>Edits the selected columns expansion options. If <c>expand</c> is <c>true</c>, the column expands in proportion to its expansion ratio versus the other columns' ratios.</para>
            <para>For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.</para>
            <para>Columns with a <c>false</c> expand will not contribute to the total ratio.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushCell">
            <summary>
            <para>Adds a <c>[cell]</c> tag to the tag stack. Must be inside a <c>[table]</c> tag. See <see cref="M:Godot.RichTextLabel.PushTable(System.Int32)"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Pop">
            <summary>
            <para>Terminates the current tag. Use after <c>push_*</c> methods to close bbcodes manually. Does not need to follow <c>add_*</c> methods.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Clear">
            <summary>
            <para>Clears the tag stack and sets <see cref="P:Godot.RichTextLabel.BbcodeText"/> to an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVScroll">
            <summary>
            <para>Returns the vertical scrollbar.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ScrollToLine(System.Int32)">
            <summary>
            <para>Scrolls the window's top line to match <c>line</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ParseBbcode(System.String)">
            <summary>
            <para>The assignment version of <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/>. Clears the tag stack and inserts the new content. Returns <c>OK</c> if parses <c>bbcode</c> successfully.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AppendBbcode(System.String)">
            <summary>
            <para>Parses <c>bbcode</c> and adds tags to the tag stack as needed. Returns the result of the parsing, <c>OK</c> if successful.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetTotalCharacterCount">
            <summary>
            <para>Returns the total number of characters from text tags. Does not include bbcodes.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetLineCount">
            <summary>
            <para>Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVisibleLineCount">
            <summary>
            <para>Returns the number of visible lines.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetContentHeight">
            <summary>
            <para>Returns the height of the content.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody">
            <summary>
            <para>This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.</para>
            <para>A RigidBody has 4 behavior <see cref="P:Godot.RigidBody.Mode"/>s: Rigid, Static, Character, and Kinematic.</para>
            <para>Note: Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior. If you need to directly affect the body's state, use <see cref="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)"/>, which allows you to directly access the physics state.</para>
            <para>If you need to override the default physics behavior, you can write a custom force integration. See <see cref="P:Godot.RigidBody.CustomIntegrator"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody.ModeEnum.Rigid">
            <summary>
            <para>Rigid body mode. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody.ModeEnum.Static">
            <summary>
            <para>Static mode. The body behaves like a <see cref="T:Godot.StaticBody"/>, and can only move by user code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody.ModeEnum.Character">
            <summary>
            <para>Character body mode. This behaves like a rigid body, but can not rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody.ModeEnum.Kinematic">
            <summary>
            <para>Kinematic body mode. The body behaves like a <see cref="T:Godot.KinematicBody"/>, and can only move by user code.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Mode">
            <summary>
            <para>The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Mass">
            <summary>
            <para>The body's mass.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Weight">
            <summary>
            <para>The body's weight based on its mass and the global 3D gravity. Global values are set in "Project &gt; Project Settings &gt; Physics &gt; 3d".</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Friction">
            <summary>
            <para>The body's friction, from 0 (frictionless) to 1 (max friction).</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Bounce">
            <summary>
            <para>RigidBody's bounciness.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.PhysicsMaterialOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.RigidBody.GravityScale">
            <summary>
            <para>This is multiplied by the global 3D gravity setting found in "Project &gt; Project Settings &gt; Physics &gt; 3d" to produce RigidBody's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.CustomIntegrator">
            <summary>
            <para>If <c>true</c>, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the <see cref="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)"/> function, if defined.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContinuousCd">
            <summary>
            <para>If <c>true</c>, continuous collision detection is used.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContactsReported">
            <summary>
            <para>The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContactMonitor">
            <summary>
            <para>If <c>true</c>, the RigidBody will emit signals when it collides with another RigidBody.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Sleeping">
            <summary>
            <para>If <c>true</c>, the body is sleeping and will not calculate forces until woken up by a collision or the <c>apply_impulse</c> method.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.CanSleep">
            <summary>
            <para>If <c>true</c>, the RigidBody will not calculate forces and will act as a static body while there is no movement. It will wake up when forces are applied through other collisions or when the <c>apply_impulse</c> method is used.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearX">
            <summary>
            <para>Lock the body's movement in the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearY">
            <summary>
            <para>Lock the body's movement in the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearZ">
            <summary>
            <para>Lock the body's movement in the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularX">
            <summary>
            <para>Lock the body's rotation in the x-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularY">
            <summary>
            <para>Lock the body's rotation in the y-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularZ">
            <summary>
            <para>Lock the body's rotation in the z-axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.LinearVelocity">
            <summary>
            <para>The body's linear velocity. Can be used sporadically, but DON'T SET THIS IN EVERY FRAME, because physics may run in another thread and runs at a different granularity. Use <see cref="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)"/> as your process loop for precise control of the body state.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.LinearDamp">
            <summary>
            <para>The body's linear damp. Default value: -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AngularVelocity">
            <summary>
            <para>RigidBody's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AngularDamp">
            <summary>
            <para>Damps RigidBody's rotational forces.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)">
            <summary>
            <para>Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the <see cref="P:Godot.RigidBody.CustomIntegrator"/> property allows you to disable the default behavior and do fully custom force integration for a body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.SetAxisVelocity(Godot.Vector3)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.AddCentralForce(Godot.Vector3)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            <para>This is equivalent to <c>add_force(force, Vector3(0,0,0))</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.AddForce(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Adds a constant force (i.e. acceleration).</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.AddTorque(Godot.Vector3)">
            <summary>
            <para>Adds a constant rotational force (i.e. a motor) without affecting position.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.ApplyCentralImpulse(Godot.Vector3)">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            <para>This is equivalent to <c>apply_impulse(Vector3(0,0,0), impulse)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.ApplyImpulse(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.ApplyTorqueImpulse(Godot.Vector3)">
            <summary>
            <para>Applies a torque impulse which will be affected by the body mass and shape. This will rotate the body around the passed in vector.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody.GetCollidingBodies">
            <summary>
            <para>Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0, see the <see cref="P:Godot.RigidBody.ContactsReported"/> property to increase it. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D">
            <summary>
            <para>This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.</para>
            <para>A RigidBody2D has 4 behavior <see cref="P:Godot.RigidBody2D.Mode"/>s: Rigid, Static, Character, and Kinematic.</para>
            <para>Note: You should not change a RigidBody2D's <c>position</c> or <c>linear_velocity</c> every frame or even very often. If you need to directly affect the body's state, use <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.Physics2DDirectBodyState)"/>, which allows you to directly access the physics state.</para>
            <para>If you need to override the default physics behavior, you can write a custom force integration. See <see cref="P:Godot.RigidBody2D.CustomIntegrator"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Rigid">
            <summary>
            <para>Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Static">
            <summary>
            <para>Static mode. The body behaves like a <see cref="T:Godot.StaticBody2D"/> and does not move.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Character">
            <summary>
            <para>Character mode. Similar to <c>MODE_RIGID</c>, but the body can not rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Kinematic">
            <summary>
            <para>Kinematic mode. The body behaves like a <see cref="T:Godot.KinematicBody2D"/>, and must be moved by code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.Disabled">
            <summary>
            <para>Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.CastRay">
            <summary>
            <para>Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.CastShape">
            <summary>
            <para>Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mode">
            <summary>
            <para>The body's mode. See <c>MODE_*</c> constants. Default value: <c>MODE_RIGID</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mass">
            <summary>
            <para>The body's mass. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Inertia">
            <summary>
            <para>The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Weight">
            <summary>
            <para>The body's weight based on its mass and the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d".</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Friction">
            <summary>
            <para>The body's friction. Values range from <c>0</c> (frictionless) to <c>1</c> (maximum friction). Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Bounce">
            <summary>
            <para>The body's bounciness. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.PhysicsMaterialOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.GravityScale">
            <summary>
            <para>Multiplies the gravity applied to the body. The body's gravity is calculated from the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d" and/or any additional gravity vector applied by <see cref="T:Godot.Area2D"/>s. Default value: <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CustomIntegrator">
            <summary>
            <para>If <c>true</c>, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.Physics2DDirectBodyState)"/> function.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContinuousCd">
            <summary>
            <para>Continuous collision detection mode. Default value: <c>CCD_MODE_DISABLED</c>.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See <c>CCD_MODE_</c> constants for details.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactsReported">
            <summary>
            <para>The maximum number of contacts to report. Default value: <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactMonitor">
            <summary>
            <para>If <c>true</c>, the body will emit signals when it collides with another RigidBody2D. See also <see cref="P:Godot.RigidBody2D.ContactsReported"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Sleeping">
            <summary>
            <para>If <c>true</c>, the body is sleeping and will not calculate forces until woken up by a collision or by using <see cref="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,Godot.Vector2)"/> or <see cref="M:Godot.RigidBody2D.AddForce(Godot.Vector2,Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CanSleep">
            <summary>
            <para>If <c>true</c>, the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using <see cref="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,Godot.Vector2)"/> or <see cref="M:Godot.RigidBody2D.AddForce(Godot.Vector2,Godot.Vector2)"/>. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearDamp">
            <summary>
            <para>Damps the body's <see cref="P:Godot.RigidBody2D.LinearVelocity"/>. If <c>-1</c> the body will use the "Default Linear Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: <c>-1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularDamp">
            <summary>
            <para>Damps the body's <see cref="P:Godot.RigidBody2D.AngularVelocity"/>. If <c>-1</c> the body will use the "Default Angular Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: <c>-1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedForce">
            <summary>
            <para>The body's total applied force.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedTorque">
            <summary>
            <para>The body's total applied torque.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D._IntegrateForces(Godot.Physics2DDirectBodyState)">
            <summary>
            <para>Allows you to read and safely modify the simulation state for the object. Use this instead of <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> if you need to directly change the body's <c>position</c> or other physics properties. By default, it works in addition to the usual physics behavior, but <see cref="P:Godot.RigidBody2D.CustomIntegrator"/> allows you to disable the default behavior and write custom force integration for a body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.SetAxisVelocity(Godot.Vector2)">
            <summary>
            <para>Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyCentralImpulse(Godot.Vector2)">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyTorqueImpulse(System.Single)">
            <summary>
            <para>Applies a rotational impulse to the body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddCentralForce(Godot.Vector2)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddForce(Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddTorque(System.Single)">
            <summary>
            <para>Adds a constant rotational force.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.TestMotion(Godot.Vector2,System.Boolean,System.Single,Godot.Physics2DTestMotionResult)">
            <summary>
            <para>Returns <c>true</c> if a collision would result from moving in the given vector. <c>margin</c> increases the size of the shapes involved in the collision detection, and <c>result</c> is an object of type <see cref="T:Godot.Physics2DTestMotionResult"/>, which contains additional information about the collision (should there be one).</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.GetCollidingBodies">
            <summary>
            <para>Returns a list of the bodies colliding with this one. Use <see cref="P:Godot.RigidBody2D.ContactsReported"/> to set the maximum number reported. You must also set <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to <c>true</c>. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneState">
            <summary>
            <para>Maintains a list of resources, nodes, exported, and overridden properties, and built-in scripts associated with a scene.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Disabled">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, blocks edits to the scene state.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Instance">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides inherited scene resources to the local scene. Requires tools compiled.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Main">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene. Only the main scene should receive the main edit state. Requires tools compiled.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeCount">
            <summary>
            <para>Returns the number of nodes in the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeType(System.Int32)">
            <summary>
            <para>Returns the type of the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeName(System.Int32)">
            <summary>
            <para>Returns the name of the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePath(System.Int32,System.Boolean)">
            <summary>
            <para>Returns the path to the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeOwnerPath(System.Int32)">
            <summary>
            <para>Returns the path to the owner of the node at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.IsNodeInstancePlaceholder(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the node at <c>idx</c> is an <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstancePlaceholder(System.Int32)">
            <summary>
            <para>Returns the path to the represented scene file if the node at <c>idx</c> is an <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstance(System.Int32)">
            <summary>
            <para>Returns the scene for the node at <c>idx</c> or <c>null</c> if the node is not an instance.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeGroups(System.Int32)">
            <summary>
            <para>Returns the list of group names associated with the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyCount(System.Int32)">
            <summary>
            <para>Returns the number of exported or overridden properties for the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyName(System.Int32,System.Int32)">
            <summary>
            <para>Returns the name of the property at <c>prop_idx</c> for the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyValue(System.Int32,System.Int32)">
            <summary>
            <para>Returns the value of the property at <c>prop_idx</c> for the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionCount">
            <summary>
            <para>Returns the number of signal connections in the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSource(System.Int32)">
            <summary>
            <para>Returns the path to the node that owns the signal at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSignal(System.Int32)">
            <summary>
            <para>Returns the name of the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionTarget(System.Int32)">
            <summary>
            <para>Returns the path to the node that owns the method connected to the signal at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionMethod(System.Int32)">
            <summary>
            <para>Returns the method connected to the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionFlags(System.Int32)">
            <summary>
            <para>Returns the flags for the signal at <c>idx</c>. See <see cref="T:Godot.Object"/>'s <c>CONNECT_*</c> flags.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionBinds(System.Int32)">
            <summary>
            <para>Returns the list of bound parameters for the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree">
            <summary>
            <para>As one of the most important classes, the <c>SceneTree</c> manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded. You can also use the SceneTree to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchAspect.Ignore">
            <summary>
            <para>Fill the window with the content stretched to cover excessive space. Content may appear elongated.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchAspect.Keep">
            <summary>
            <para>Retain the same aspect ratio by padding with black bars in either axes. No expansion of content.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchAspect.KeepWidth">
            <summary>
            <para>Expand vertically. Left/right black bars may appear if the window is too wide.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchAspect.KeepHeight">
            <summary>
            <para>Expand horizontally. Top/bottom black bars may appear if the window is too tall.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchAspect.Expand">
            <summary>
            <para>Expand in both directions, retaining the same aspect ratio. No black bars.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Default">
            <summary>
            <para>Call a group with no flags (default).</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Reverse">
            <summary>
            <para>Call a group in reverse scene order.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Realtime">
            <summary>
            <para>Call a group immediately (calls are normally made on idle).</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Unique">
            <summary>
            <para>Call a group only once even if the call is executed many times.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchMode.Disabled">
            <summary>
            <para>No stretching.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchMode.Mode2d">
            <summary>
            <para>Render stretching in higher resolution (interpolated).</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.StretchMode.Viewport">
            <summary>
            <para>Keep the specified display resolution. No interpolation. Content may appear pixelated.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugCollisionsHint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugNavigationHint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Paused">
            <summary>
            <para>If <c>true</c>, the SceneTree is paused.</para>
            <para>Doing so will have the following behavior:</para>
            <para>* 2D and 3D physics will be stopped.</para>
            <para>* _process and _physics_process will not be called anymore in nodes.</para>
            <para>* _input and _input_event will not be called anymore either.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.RefuseNewNetworkConnections">
            <summary>
            <para>If <c>true</c>, the SceneTree's <see cref="P:Godot.SceneTree.NetworkPeer"/> refuses new incoming connections.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.UseFontOversampling">
            <summary>
            <para>If <c>true</c>, font oversampling is used.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.EditedSceneRoot">
            <summary>
            <para>The root of the edited scene.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.CurrentScene">
            <summary>
            <para>The current scene.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.NetworkPeer">
            <summary>
            <para>The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the SceneTree will become a network server (check with <see cref="M:Godot.SceneTree.IsNetworkServer"/>) and will set root node's network mode to master (see NETWORK_MODE_* constants in <see cref="T:Godot.Node"/>), or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Root">
            <summary>
            <para>The SceneTree's <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Multiplayer">
            <summary>
            <para>The default <see cref="T:Godot.MultiplayerAPI"/> instance for this SceneTree.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.MultiplayerPoll">
            <summary>
            <para>If <c>true</c>, (default) enable the automatic polling of the <see cref="T:Godot.MultiplayerAPI"/> for this SceneTree during <c>idle_frame</c>.</para>
            <para>When <c>false</c> you need to manually call <see cref="M:Godot.MultiplayerAPI.Poll"/> for processing network packets and delivering RPCs/RSETs. This allows to run RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual <see cref="T:Godot.Mutex"/> protection when accessing the <see cref="T:Godot.MultiplayerAPI"/> from threads.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasGroup(System.String)">
            <summary>
            <para>Returns <c>true</c> if the given group exists.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetAutoAcceptQuit(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the application automatically accepts quitting.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetQuitOnGoBack(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the application quits automatically on going back (e.g. on Android).</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetInputAsHandled">
            <summary>
            <para>Marks the most recent input event as handled.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.IsInputHandled">
            <summary>
            <para>Returns <c>true</c> if the most recent InputEvent was marked as handled with <see cref="M:Godot.SceneTree.SetInputAsHandled"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)">
            <summary>
            <para>Returns a <see cref="T:Godot.SceneTreeTimer"/> which will <c>SceneTreeTimer.timeout</c> after the given time in seconds elapsed in this SceneTree. If <c>pause_mode_process</c> is set to false, pausing the SceneTree will also pause the timer.</para>
            <para>Commonly used to create a one-shot delay timer as in the following example:</para>
            <para><code>
            func some_function():
            print("start")
            yield(get_tree().create_timer(1.0), "timeout")
            print("end")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodeCount">
            <summary>
            <para>Returns the number of nodes in this SceneTree.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetFrame">
            <summary>
            <para>Returns the current frame, i.e. number of frames since the application started.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.Quit">
            <summary>
            <para>Quits the application.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetScreenStretch(Godot.SceneTree.StretchMode,Godot.SceneTree.StretchAspect,Godot.Vector2,System.Single)">
            <summary>
            <para>Configures screen stretching to the given <see cref="T:Godot.SceneTree.StretchMode"/>, <see cref="T:Godot.SceneTree.StretchAspect"/>, minimum size and <c>shrink</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.QueueDelete(Godot.Object)">
            <summary>
            <para>Queues the given object for deletion, delaying the call to <see cref="M:Godot.Object.Free"/> to after the current frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroupFlags(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            <para>Calls <c>method</c> on each member of the given group, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroupFlags(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sends the given notification to all members of the <c>group</c>, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroupFlags(System.Int32,System.String,System.String,System.Object)">
            <summary>
            <para>Sets the given <c>property</c> to <c>value</c> on all members of the given group, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroup(System.String,System.String,System.Object[])">
            <summary>
            <para>Calls <c>method</c> on each member of the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroup(System.String,System.Int32)">
            <summary>
            <para>Sends the given notification to all members of the <c>group</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroup(System.String,System.String,System.Object)">
            <summary>
            <para>Sets the given <c>property</c> to <c>value</c> on all members of the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodesInGroup(System.String)">
            <summary>
            <para>Returns all nodes assigned to the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeScene(System.String)">
            <summary>
            <para>Changes to the scene at the given <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeSceneTo(Godot.PackedScene)">
            <summary>
            <para>Changes to the given <see cref="T:Godot.PackedScene"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ReloadCurrentScene">
            <summary>
            <para>Reloads the currently active scene.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.IsNetworkServer">
            <summary>
            <para>Returns <c>true</c> if this SceneTree's <see cref="P:Godot.SceneTree.NetworkPeer"/> is in server mode (listening for connections).</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasNetworkPeer">
            <summary>
            <para>Returns <c>true</c> if there is a <see cref="P:Godot.SceneTree.NetworkPeer"/> set.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkConnectedPeers">
            <summary>
            <para>Returns the peer IDs of all connected peers of this SceneTree's <see cref="P:Godot.SceneTree.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkUniqueId">
            <summary>
            <para>Returns the unique peer ID of this SceneTree's <see cref="P:Godot.SceneTree.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetRpcSenderId">
            <summary>
            <para>Returns the sender's peer ID for the most recently received RPC call.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTreeTimer">
            <summary>
            <para>A one-shot timer managed by the scene tree, which emits <c>timeout</c> on completion. See also <see cref="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)"/>.</para>
            <para>As opposed to <see cref="T:Godot.Timer"/>, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:</para>
            <para><code>
            func some_function():
            print("start")
            yield(get_tree().create_timer(1.0), "timeout")
            print("end")
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.SceneTreeTimer.TimeLeft">
            <summary>
            <para>The time remaining.</para>
            </summary>
        </member>
        <member name="T:Godot.Script">
            <summary>
            <para>A class stored as a resource. A script exends the functionality of all objects that instance it.</para>
            <para>The <c>new</c> method of a script subclass creates a new instance. <see cref="M:Godot.Object.SetScript(Godot.Reference)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            </summary>
        </member>
        <member name="P:Godot.Script.SourceCode">
            <summary>
            <para>The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.CanInstance">
            <summary>
            <para>Returns <c>true</c> if the script can be instanced.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.InstanceHas(Godot.Object)">
            <summary>
            <para>Returns <c>true</c> if <c>base_object</c> is an instance of this script.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.HasSourceCode">
            <summary>
            <para>Returns <c>true</c> if the script contains non-empty source code.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.Reload(System.Boolean)">
            <summary>
            <para>Reloads the script's class implementation. Returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetBaseScript">
            <summary>
            <para>Returns the script directly inherited by this script.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetInstanceBaseType">
            <summary>
            <para>Returns the script's base type.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.HasScriptSignal(System.String)">
            <summary>
            <para>Returns <c>true</c> if the script, or a base class, defines a signal with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.IsTool">
            <summary>
            <para>Returns <c>true</c> if the script is a tool script. A tool script can run in the editor.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollBar">
            <summary>
            <para>Scrollbars are a <see cref="T:Godot.Range"/> based <see cref="T:Godot.Control"/>, that display a draggable area (the size of the page). Horizontal (<see cref="T:Godot.HScrollBar"/>) and Vertical (<see cref="T:Godot.VScrollBar"/>) versions are available.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollBar.CustomStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ScrollContainer">
            <summary>
            <para>A ScrollContainer node meant to contain a <see cref="T:Godot.Control"/> child. ScrollContainers will automatically create a scrollbar child (<see cref="T:Godot.HScrollBar"/>, <see cref="T:Godot.VScrollBar"/>, or both) when needed and will only draw the Control within the ScrollContainer area. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer. Works great with a <see cref="T:Godot.Panel"/> control. You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontalEnabled">
            <summary>
            <para>If <c>true</c>, enables horizontal scrolling.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontal">
            <summary>
            <para>The current horizontal scroll value.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVerticalEnabled">
            <summary>
            <para>If <c>true</c>, enables vertical scrolling.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVertical">
            <summary>
            <para>The current vertical scroll value.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollDeadzone">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ScrollContainer.GetHScrollbar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ScrollContainer.GetVScrollbar">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SegmentShape2D">
            <summary>
            <para>Segment shape for 2D collisions. Consists of two points, <c>a</c> and <c>b</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.A">
            <summary>
            <para>The segment's first point position.</para>
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.B">
            <summary>
            <para>The segment's second point position.</para>
            </summary>
        </member>
        <member name="T:Godot.Semaphore">
            <summary>
            <para>A synchronization Semaphore. Element used to synchronize multiple <see cref="T:Godot.Thread"/>s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see <see cref="T:Godot.Mutex"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Wait">
            <summary>
            <para>Tries to wait for the <c>Semaphore</c>, if its value is zero, blocks until non-zero. Returns <c>OK</c> on success, <c>ERR_BUSY</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Post">
            <summary>
            <para>Lowers the <c>Semaphore</c>, allowing one more thread in. Returns <c>OK</c> on success, <c>ERR_BUSY</c> otherwise.</para>
            </summary>
        </member>
        <member name="T:Godot.Separator">
            <summary>
            <para>Separator is a <see cref="T:Godot.Control"/> used for separating other controls. It's purely a visual decoration. Horizontal (<see cref="T:Godot.HSeparator"/>) and Vertical (<see cref="T:Godot.VSeparator"/>) versions are available.</para>
            </summary>
        </member>
        <member name="T:Godot.Shader">
            <summary>
            <para>This class allows you to define a custom shader program that can be used for various materials to render objects.</para>
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.Spatial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.CanvasItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.Particles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Shader.Code">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Shader.GetMode">
            <summary>
            <para>Returns the shader mode for the shader, either <c>MODE_CANVAS_ITEM</c>, <c>MODE_SPATIAL</c> or <c>MODE_PARTICLES</c></para>
            </summary>
        </member>
        <member name="M:Godot.Shader.SetDefaultTextureParam(System.String,Godot.Texture)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Shader.GetDefaultTextureParam(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Shader.HasParam(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ShaderMaterial">
            <summary>
            <para>A material that uses a custom <see cref="T:Godot.Shader"/> program to render either items to screen or process particles. You can create multiple materials for the same shader but configure different values for the uniforms defined in the shader.</para>
            </summary>
        </member>
        <member name="P:Godot.ShaderMaterial.Shader">
            <summary>
            <para>The <see cref="T:Godot.Shader"/> program used to render this material.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.SetShaderParam(System.String,System.Object)">
            <summary>
            <para>Changes the value set for this material of a uniform in the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.GetShaderParam(System.String)">
            <summary>
            <para>Returns the current value set for this material of a uniform in the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.PropertyCanRevert(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.PropertyGetRevert(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Shape">
            <summary>
            <para>Base class for all 3D shape resources. Nodes that inherit from this can be used as shapes for a <see cref="T:Godot.PhysicsBody"/> or <see cref="T:Godot.Area"/> objects.</para>
            </summary>
        </member>
        <member name="P:Godot.Shape.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Shape2D">
            <summary>
            <para>Base class for all 2D Shapes. All 2D shape types inherit from this.</para>
            </summary>
        </member>
        <member name="P:Godot.Shape2D.CustomSolverBias">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Shape2D.Collide(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            <para>Returns <c>true</c> if this shape is colliding with another.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the shape to check collisions with (<c>with_shape</c>), and the transformation matrix of that shape (<c>shape_xform</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotion(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            <para>Return whether this shape would collide with another, if a given movement was applied.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the movement to test on this shape (<c>local_motion</c>), the shape to check collisions with (<c>with_shape</c>), the transformation matrix of that shape (<c>shape_xform</c>), and the movement to test onto the other object (<c>shape_motion</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideAndGetContacts(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            <para>Returns a list of the points where this shape touches another. If there are no collisions the list is empty.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the shape to check collisions with (<c>with_shape</c>), and the transformation matrix of that shape (<c>shape_xform</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotionAndGetContacts(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            <para>Returns a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions the list is empty.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the movement to test on this shape (<c>local_motion</c>), the shape to check collisions with (<c>with_shape</c>), the transformation matrix of that shape (<c>shape_xform</c>), and the movement to test onto the other object (<c>shape_motion</c>).</para>
            </summary>
        </member>
        <member name="T:Godot.ShortCut">
            <summary>
            <para>A shortcut for binding input.</para>
            <para>Shortcuts are commonly used for interacting with a <see cref="T:Godot.Control"/> element from a <see cref="T:Godot.InputEvent"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ShortCut.Shortcut">
            <summary>
            <para>The shortcut's <see cref="T:Godot.InputEvent"/>.</para>
            <para>Generally the <see cref="T:Godot.InputEvent"/> is a keyboard key, though it can be any <see cref="T:Godot.InputEvent"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ShortCut.IsValid">
            <summary>
            <para>If <c>true</c>, this shortcut is valid.</para>
            </summary>
        </member>
        <member name="M:Godot.ShortCut.IsShortcut(Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the shortcut's <see cref="T:Godot.InputEvent"/> equals <c>event</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ShortCut.GetAsText">
            <summary>
            <para>Returns the shortcut's <see cref="T:Godot.InputEvent"/> as a <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Skeleton">
            <summary>
            <para>Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see <see cref="T:Godot.Animation"/>). Skeleton will support rag doll dynamics in the future.</para>
            <para>The overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose.</para>
            <para>Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone.</para>
            </summary>
        </member>
        <member name="F:Godot.Skeleton.NotificationUpdateSkeleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Skeleton.BonesInWorldTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.AddBone(System.String)">
            <summary>
            <para>Add a bone, with name "name". <see cref="M:Godot.Skeleton.GetBoneCount"/> will become the bone index.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.FindBone(System.String)">
            <summary>
            <para>Return the bone index that matches "name" as its name.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneName(System.Int32)">
            <summary>
            <para>Return the name of the bone at index "index".</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneParent(System.Int32)">
            <summary>
            <para>Return the bone index which is the parent of the bone at "bone_idx". If -1, then bone has no parent. Note that the parent bone returned will always be less than "bone_idx".</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneParent(System.Int32,System.Int32)">
            <summary>
            <para>Set the bone index "parent_idx" as the parent of the bone at "bone_idx". If -1, then bone has no parent. Note: "parent_idx" must be less than "bone_idx".</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneCount">
            <summary>
            <para>Return the amount of bones in the skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.UnparentBoneAndRest(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneRest(System.Int32)">
            <summary>
            <para>Return the rest transform for a bone "bone_idx".</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneRest(System.Int32,Godot.Transform)">
            <summary>
            <para>Set the rest transform for bone "bone_idx"</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneDisableRest(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.IsBoneRestDisabled(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.BindChildNodeToBone(System.Int32,Godot.Node)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.UnbindChildNodeFromBone(System.Int32,Godot.Node)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoundChildNodesToBone(System.Int32)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.ClearBones">
            <summary>
            <para>Clear all the bones in this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBonePose(System.Int32)">
            <summary>
            <para>Return the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBonePose(System.Int32,Godot.Transform)">
            <summary>
            <para>Return the pose transform for bone "bone_idx".</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneGlobalPose(System.Int32,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneGlobalPose(System.Int32)">
            <summary>
            <para>Return the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneCustomPose(System.Int32)">
            <summary>
            <para>Return the custom pose of the specified bone. Custom pose is applied on top of the rest pose.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneCustomPose(System.Int32,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneTransform(System.Int32)">
            <summary>
            <para>Return the combination of custom pose and pose. The returned transform is in skeleton's reference frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.PhysicalBonesStopSimulation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.PhysicalBonesStartSimulation(Godot.Collections.Array)">
            <summary>
            
            <param name="bones">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.PhysicalBonesAddCollisionException(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.PhysicalBonesRemoveCollisionException(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneIgnoreAnimation(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetBoneCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetBone(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetSkeleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.RootBone">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.TipBone">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.Interpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.OverrideTipBasis">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.UseMagnet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.Magnet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.TargetNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.MinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SkeletonIK.MaxIterations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SkeletonIK.GetParentSkeleton">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SkeletonIK.IsRunning">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SkeletonIK.Start(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SkeletonIK.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Sky">
            <summary>
            <para>The base class for <see cref="T:Godot.PanoramaSky"/> and <see cref="T:Godot.ProceduralSky"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size32">
            <summary>
            <para>Radiance texture size is 32x32 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size64">
            <summary>
            <para>Radiance texture size is 64x64 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size128">
            <summary>
            <para>Radiance texture size is 128x128 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size256">
            <summary>
            <para>Radiance texture size is 256x256 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size512">
            <summary>
            <para>Radiance texture size is 512x512 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size1024">
            <summary>
            <para>Radiance texture size is 1024x1024 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size2048">
            <summary>
            <para>Radiance texture size is 2048x2048 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Max">
            <summary>
            <para>Radiance texture size is the largest size it can be.</para>
            </summary>
        </member>
        <member name="P:Godot.Sky.RadianceSize">
            <summary>
            <para>The Sky's radiance map size.</para>
            <para>The higher the radiance map size, the more detailed the lighting from the Sky will be.</para>
            <para>See RADIANCE_SIZE_* constants for values. Default size is RADIANCE_SIZE_512.</para>
            </summary>
        </member>
        <member name="T:Godot.Slider">
            <summary>
            <para>Base class for GUI Sliders.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.Editable">
            <summary>
            <para>If <c>true</c>, the slider can be interacted with. If <c>false</c>, the value can be changed only by code.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.Scrollable">
            <summary>
            <para>If <c>true</c>, the value can be changed using the mouse wheel.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.TickCount">
            <summary>
            <para>Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.TicksOnBorders">
            <summary>
            <para>If <c>true</c>, the slider will display ticks for minimum and maximum values.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.FocusMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SliderJoint">
            <summary>
            <para>Slides across the x-axis of the pivot object.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearLimitUpper">
            <summary>
            <para>The maximum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearLimitLower">
            <summary>
            <para>The minimum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearLimitRestitution">
            <summary>
            <para>The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearLimitDamping">
            <summary>
            <para>The amount of damping once the slider limits are surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearMotionSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearMotionRestitution">
            <summary>
            <para>The amount of restitution inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearMotionDamping">
            <summary>
            <para>The amount of damping inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearOrthogonalSoftness">
            <summary>
            <para>A factor applied to the movement across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearOrthogonalRestitution">
            <summary>
            <para>The amount of restitution when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.LinearOrthogonalDamping">
            <summary>
            <para>The amount of damping when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularLimitUpper">
            <summary>
            <para>The upper limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularLimitLower">
            <summary>
            <para>The lower limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularLimitSoftness">
            <summary>
            <para>A factor applied to the all rotation once the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularLimitRestitution">
            <summary>
            <para>The amount of restitution of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularLimitDamping">
            <summary>
            <para>The amount of damping of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularMotionSoftness">
            <summary>
            <para>A factor applied to the all rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularMotionRestitution">
            <summary>
            <para>The amount of restitution of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularMotionDamping">
            <summary>
            <para>The amount of damping of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularOrthogonalSoftness">
            <summary>
            <para>A factor applied to the all rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularOrthogonalRestitution">
            <summary>
            <para>The amount of restitution of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.AngularOrthogonalDamping">
            <summary>
            <para>The amount of damping of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint.Param.Max">
            <summary>
            <para>End flag of PARAM_* constants, used internally.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__upperDistance">
            <summary>
            <para>The maximum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__lowerDistance">
            <summary>
            <para>The minimum difference between the pivot points on their x-axis before damping happens.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__softness">
            <summary>
            <para>A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__restitution">
            <summary>
            <para>The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__damping">
            <summary>
            <para>The amount of damping that happens once the limit defined by <see cref="P:Godot.SliderJoint.LinearLimit__lowerDistance"/> and <see cref="P:Godot.SliderJoint.LinearLimit__upperDistance"/> is surpassed.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__softness">
            <summary>
            <para>A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__restitution">
            <summary>
            <para>The amount of restitution inside the slider limits.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__damping">
            <summary>
            <para>The amount of damping inside the slider limits.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__softness">
            <summary>
            <para>A factor applied to the movement across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__restitution">
            <summary>
            <para>The amount of restitution when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__damping">
            <summary>
            <para>The amount of damping when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__upperAngle">
            <summary>
            <para>The upper limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__lowerAngle">
            <summary>
            <para>The lower limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__softness">
            <summary>
            <para>A factor applied to the all rotation once the limit is surpassed.</para>
            <para>Makes all rotation slower when between 0 and 1.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__restitution">
            <summary>
            <para>The amount of restitution of the rotation when the limit is surpassed.</para>
            <para>Does not affect damping.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__damping">
            <summary>
            <para>The amount of damping of the rotation when the limit is surpassed.</para>
            <para>A lower damping value allows a rotation initiated by body A to travel to body B slower.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__softness">
            <summary>
            <para>A factor applied to the all rotation in the limits.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__restitution">
            <summary>
            <para>The amount of restitution of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__damping">
            <summary>
            <para>The amount of damping of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__softness">
            <summary>
            <para>A factor applied to the all rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__restitution">
            <summary>
            <para>The amount of restitution of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__damping">
            <summary>
            <para>The amount of damping of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="T:Godot.SoftBody">
            <summary>
            <para>A deformable physics body. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody.CollisionMask">
            <summary>
            <para>The physics layers this area scans for collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody.ParentCollisionIgnore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.SimulationPrecision">
            <summary>
            <para>Increasing this value will improve the resulting simulation, but can affect performance. Use with care.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody.TotalMass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.LinearStiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.AreaAngularStiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.VolumeStiffness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.PressureCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.DampingCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.DragCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SoftBody.PoseMatchingCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SoftBody.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody.SetRayPickable(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SoftBody.IsRayPickable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Spatial">
            <summary>
            <para>Most basic 3D game object, with a 3D <see cref="T:Godot.Transform"/> and visibility settings. All other 3D game objects inherit from Spatial. Use <c>Spatial</c> as a parent node to move, scale, rotate and show/hide children in a 3D project.</para>
            <para>Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the <c>Spatial</c> object is set as top level. Affine operations in this coordinate system correspond to direct affine operations on the <c>Spatial</c>'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the <c>Spatial</c> object itself is referred to as object-local coordinate system.</para>
            </summary>
        </member>
        <member name="F:Godot.Spatial.NotificationTransformChanged">
            <summary>
            <para>Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.</para>
            <para>In order for <c>NOTIFICATION_TRANSFORM_CHANGED</c> to work, users first need to ask for it, with <see cref="M:Godot.Spatial.SetNotifyTransform(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Spatial.NotificationEnterWorld">
            <summary>
            <para>Spatial nodes receives this notification when they are registered to new <see cref="T:Godot.World"/> resource.</para>
            </summary>
        </member>
        <member name="F:Godot.Spatial.NotificationExitWorld">
            <summary>
            <para>Spatial nodes receives this notification when they are unregistered from current <see cref="T:Godot.World"/> resource.</para>
            </summary>
        </member>
        <member name="F:Godot.Spatial.NotificationVisibilityChanged">
            <summary>
            <para>Spatial nodes receives this notification when their visibility changes.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.GlobalTransform">
            <summary>
            <para>World space (global) <see cref="T:Godot.Transform"/> of this node.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Translation">
            <summary>
            <para>Local translation of this node.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.RotationDegrees">
            <summary>
            <para>Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle).</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Rotation">
            <summary>
            <para>Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle).</para>
            <para>Note that in the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <see cref="T:Godot.Vector3"/> data structure not because the rotation is a vector, but only because <see cref="T:Godot.Vector3"/> exists as a convenient data-structure to store 3 floating point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Scale">
            <summary>
            <para>Scale part of the local transformation.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Transform">
            <summary>
            <para>Local space <see cref="T:Godot.Transform"/> of this node, with respect to the parent node.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Visible">
            <summary>
            <para>If <c>true</c>, this node is drawn. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Spatial.Gizmo">
            <summary>
            <para>The <see cref="T:Godot.SpatialGizmo"/> for this node. Used for example in <see cref="!:Godot.EditorSpatialGizmo"/> as custom visualization and editing handles in Editor.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.GetParentSpatial">
            <summary>
            <para>Returns the parent <c>Spatial</c>, or an empty <see cref="T:Godot.Object"/> if no parent exists or parent is not of type <c>Spatial</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetIgnoreTransformNotification(System.Boolean)">
            <summary>
            <para>Set whether the node ignores notification that its transformation (global or local) changed.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetAsToplevel(System.Boolean)">
            <summary>
            <para>Makes the node ignore its parents transformations. Node transformations are only in global space.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsSetAsToplevel">
            <summary>
            <para>Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetDisableScale(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsScaleDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Spatial.GetWorld">
            <summary>
            <para>Returns the current <see cref="T:Godot.World"/> resource this <c>Spatial</c> node is registered to.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.ForceUpdateTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Spatial.UpdateGizmo">
            <summary>
            <para>Updates the <see cref="T:Godot.SpatialGizmo"/> of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsVisibleInTree">
            <summary>
            <para>Returns whether the node is visible, taking into consideration that its parents visibility.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.Show">
            <summary>
            <para>Enables rendering of this node. Changes <see cref="P:Godot.Spatial.Visible"/> to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.Hide">
            <summary>
            <para>Disables rendering of this node. Changes <see cref="P:Godot.Spatial.Visible"/> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            <para>Set whether the node notifies about its local transformation changes. <c>Spatial</c> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsLocalTransformNotificationEnabled">
            <summary>
            <para>Returns whether node notifies about its local transformation changes. <c>Spatial</c> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetNotifyTransform(System.Boolean)">
            <summary>
            <para>Set whether the node notifies about its global and local transformation changes. <c>Spatial</c> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsTransformNotificationEnabled">
            <summary>
            <para>Returns whether the node notifies about its global and local transformation changes. <c>Spatial</c> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.Rotate(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the local transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalRotate(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the global (world) transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians. The rotation axis is in global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalScale(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalTranslate(Godot.Vector3)">
            <summary>
            <para>Moves the global (world) transformation by <see cref="T:Godot.Vector3"/> offset. The offset is in global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateObjectLocal(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the local transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians. The rotation axis is in object-local coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.ScaleObjectLocal(Godot.Vector3)">
            <summary>
            <para>Scales the local transformation by given 3D scale factors in object-local coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.TranslateObjectLocal(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateX(System.Single)">
            <summary>
            <para>Rotates the local transformation around the X axis by angle in radians</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateY(System.Single)">
            <summary>
            <para>Rotates the local transformation around the Y axis by angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateZ(System.Single)">
            <summary>
            <para>Rotates the local transformation around the Z axis by angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.Translate(Godot.Vector3)">
            <summary>
            <para>Changes the node's position by given offset <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.Orthonormalize">
            <summary>
            <para>Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetIdentity">
            <summary>
            <para>Reset all transformations for this node. Set its <see cref="T:Godot.Transform"/> to identity matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.LookAt(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Rotates itself so that the local -Z axis points towards the <c>target</c> position.</para>
            <para>The transform will first be rotated around the given <c>up</c> vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the <c>target</c> and <c>up</c> vectors.</para>
            <para>Operations take place in global space.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.LookAtFromPosition(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Moves the node to the specified <c>position</c>, and then rotates itself to point toward the <c>target</c> as per <see cref="M:Godot.Spatial.LookAt(Godot.Vector3,Godot.Vector3)"/>. Operations take place in global space.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.ToLocal(Godot.Vector3)">
            <summary>
            <para>Transforms <see cref="T:Godot.Vector3"/> "global_point" from world space to this node's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Spatial.ToGlobal(Godot.Vector3)">
            <summary>
            <para>Transforms <see cref="T:Godot.Vector3"/> "local_point" from this node's local space to world space.</para>
            </summary>
        </member>
        <member name="T:Godot.SpatialMaterial">
            <summary>
            <para>This provides a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.EmissionOperatorEnum.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.EmissionOperatorEnum.Multiply">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DiffuseMode.Burley">
            <summary>
            <para>Default diffuse scattering algorithm.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DiffuseMode.Lambert">
            <summary>
            <para>Diffuse scattering ignores roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DiffuseMode.LambertWrap">
            <summary>
            <para>Extends Lambert to cover more than 90 degrees when roughness increases.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DiffuseMode.OrenNayar">
            <summary>
            <para>Attempts to use roughness to emulate microsurfacing.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DiffuseMode.Toon">
            <summary>
            <para>Uses a hard cut for lighting, with smoothing affected by roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.SpecularMode.SchlickGgx">
            <summary>
            <para>Default specular blob.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.SpecularMode.Blinn">
            <summary>
            <para>Older specular algorithm, included for compatibility.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.SpecularMode.Phong">
            <summary>
            <para>Older specular algorithm, included for compatibility.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.SpecularMode.Toon">
            <summary>
            <para>Toon blob which changes size based on roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.SpecularMode.Disabled">
            <summary>
            <para>No specular blob.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Emission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.NormalMapping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Rim">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Clearcoat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Anisotropy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.AmbientOcclusion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.DepthMapping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.SubsuraceScattering">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Transmission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Refraction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Detail">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Feature.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.Unshaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.UseVertexLighting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.DisableDepthTest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.AlbedoFromVertexColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.SrgbVertexColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.UsePointSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.FixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.BillboardKeepScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.Uv1UseTriplanar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.Uv2UseTriplanar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.AoOnUv2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.EmissionOnUv2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.UseAlphaScissor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.TriplanarUseWorld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.AlbedoTextureForceSrgb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.DontReceiveShadows">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.DisableAmbientLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.EnsureCorrectNormals">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.Flags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.CullMode.Back">
            <summary>
            <para>Default cull mode. The back of the object is culled when not visible.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.CullMode.Front">
            <summary>
            <para>The front of the object is culled when not visible.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.CullMode.Disabled">
            <summary>
            <para>No culling is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DetailUV.Uv1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DetailUV.Uv2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DistanceFadeModeEnum.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DistanceFadeModeEnum.PixelAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DistanceFadeModeEnum.PixelDither">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DistanceFadeModeEnum.ObjectDither">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BillboardMode.Disabled">
            <summary>
            <para>Default value.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BillboardMode.Enabled">
            <summary>
            <para>The object's z-axis will always face the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BillboardMode.FixedY">
            <summary>
            <para>The object's x-axis will always face the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BillboardMode.Particles">
            <summary>
            <para>Used for particle systems. Enables particle animation options.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DepthDrawMode.OpaqueOnly">
            <summary>
            <para>Default depth draw mode. Depth is drawn only for opaque objects.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DepthDrawMode.Always">
            <summary>
            <para>Depth draw is calculated for both opaque and transparent objects.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DepthDrawMode.Disabled">
            <summary>
            <para>No depth draw.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.DepthDrawMode.AlphaOpaquePrepass">
            <summary>
            <para>For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureChannel.Red">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureChannel.Green">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureChannel.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureChannel.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureChannel.Grayscale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BlendMode.Mix">
            <summary>
            <para>Default blend mode.</para>
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BlendMode.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BlendMode.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.BlendMode.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Albedo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Metallic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Roughness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Emission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Rim">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Clearcoat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Flowmap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.AmbientOcclusion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.SubsurfaceScattering">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Transmission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Refraction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.DetailMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.DetailAlbedo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.DetailNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpatialMaterial.TextureParam.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsTransparent">
            <summary>
            <para>If <c>true</c>, transparency is enabled on the body. Default value: <c>false</c>. See also <see cref="P:Godot.SpatialMaterial.ParamsBlendMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsUnshaded">
            <summary>
            <para>If <c>true</c>, the object is unaffected by lighting. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsVertexLighting">
            <summary>
            <para>If <c>true</c>, lighting is calculated per vertex rather than per pixel. This may increase performance on low-end devices. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsNoDepthTest">
            <summary>
            <para>If <c>true</c>, depth testing is disabled and the object will be drawn in render order.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsUsePointSize">
            <summary>
            <para>If <c>true</c>, render point size can be changed. Note: this is only effective for objects whose geometry is point-based rather than triangle-based. See also <see cref="P:Godot.SpatialMaterial.ParamsPointSize"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsWorldTriplanar">
            <summary>
            <para>If <c>true</c>, triplanar mapping is calculated in world space rather than object local space. See also <see cref="P:Godot.SpatialMaterial.Uv1Triplanar"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsFixedSize">
            <summary>
            <para>If <c>true</c>, the object is rendered at the same size regardless of distance. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsAlbedoTexForceSrgb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsDoNotReceiveShadows">
            <summary>
            <para>If <c>true</c>, the object receives no shadow that would otherwise be cast onto it. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsDisableAmbientLight">
            <summary>
            <para>If <c>true</c>, the object receives no ambient light. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsEnsureCorrectNormals">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.VertexColorUseAsAlbedo">
            <summary>
            <para>If <c>true</c>, the vertex color is used as albedo color. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.VertexColorIsSrgb">
            <summary>
            <para>If <c>true</c>, the model's vertex colors are processed as sRGB mode. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsDiffuseMode">
            <summary>
            <para>The algorithm used for diffuse light scattering. See <see cref="T:Godot.SpatialMaterial.DiffuseMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsSpecularMode">
            <summary>
            <para>The method for rendering the specular blob. See <see cref="T:Godot.SpatialMaterial.SpecularMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsBlendMode">
            <summary>
            <para>The material's blend mode. Note that values other than <c>Mix</c> force the object into the transparent pipeline. See <see cref="T:Godot.SpatialMaterial.BlendMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsCullMode">
            <summary>
            <para>Which side of the object is not drawn when backfaces are rendered. See <see cref="T:Godot.SpatialMaterial.CullMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsDepthDrawMode">
            <summary>
            <para>Determines when depth rendering takes place. See <see cref="T:Godot.SpatialMaterial.DepthDrawMode"/>. See also <see cref="P:Godot.SpatialMaterial.FlagsTransparent"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsLineWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsPointSize">
            <summary>
            <para>The point size in pixels. See <see cref="P:Godot.SpatialMaterial.FlagsUsePointSize"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsBillboardMode">
            <summary>
            <para>Controls how the object faces the camera. See <see cref="T:Godot.SpatialMaterial.BillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsBillboardKeepScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsGrow">
            <summary>
            <para>If <c>true</c>, enables the vertex grow setting. See <see cref="P:Godot.SpatialMaterial.ParamsGrowAmount"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsGrowAmount">
            <summary>
            <para>Grows object vertices in the direction of their normals.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsUseAlphaScissor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsAlphaScissorThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimHFrames">
            <summary>
            <para>The number of horizontal frames in the particle spritesheet. Only enabled when using <c>BillboardMode.BILLBOARD_PARTICLES</c>. See <see cref="P:Godot.SpatialMaterial.ParamsBillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimVFrames">
            <summary>
            <para>The number of vertical frames in the particle spritesheet. Only enabled when using <c>BillboardMode.BILLBOARD_PARTICLES</c>. See <see cref="P:Godot.SpatialMaterial.ParamsBillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimLoop">
            <summary>
            <para>If <c>true</c>, particle animations are looped. Only enabled when using <c>BillboardMode.BILLBOARD_PARTICLES</c>. See <see cref="P:Godot.SpatialMaterial.ParamsBillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AlbedoColor">
            <summary>
            <para>The material's base color.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AlbedoTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Metallic">
            <summary>
            <para>The reflectivity of the object's surface. The higher the value the more light is reflected.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicSpecular">
            <summary>
            <para>General reflectivity amount. Note: unlike <see cref="P:Godot.SpatialMaterial.Metallic"/>, this is not energy-conserving, so it should be left at <c>0.5</c> in most cases.  See also <see cref="P:Godot.SpatialMaterial.Roughness"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicTextureChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Roughness">
            <summary>
            <para>Surface reflection. A value of <c>0</c> represents a perfect mirror while a value of <c>1</c> completely blurs the reflection. See also <see cref="P:Godot.SpatialMaterial.Metallic"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RoughnessTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RoughnessTextureChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionEnabled">
            <summary>
            <para>If <c>true</c>, the body emits light.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Emission">
            <summary>
            <para>The emitted light's color. See <see cref="P:Godot.SpatialMaterial.EmissionEnabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionEnergy">
            <summary>
            <para>The emitted light's strength. See <see cref="P:Godot.SpatialMaterial.EmissionEnabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionOperator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionOnUv2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalEnabled">
            <summary>
            <para>If <c>true</c>, normal mapping is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalScale">
            <summary>
            <para>The strength of the normal map's effect.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimEnabled">
            <summary>
            <para>If <c>true</c>, rim effect is enabled. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Rim">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimTint">
            <summary>
            <para>The amount of to blend light and albedo color when rendering rim effect. If <c>0</c> the light color is used, while <c>1</c> means albedo color is used. An intermediate value generally works best.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatEnabled">
            <summary>
            <para>If <c>true</c>, clearcoat rendering is enabled. Adds a secondary transparent pass to the material. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Clearcoat">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatGloss">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AnisotropyEnabled">
            <summary>
            <para>If <c>true</c>, anisotropy is enabled. Changes the shape of the specular blob and aligns it to tangent space. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Anisotropy">
            <summary>
            <para>The strength of the anisotropy effect.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AnisotropyFlowmap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoEnabled">
            <summary>
            <para>If <c>true</c>, ambient occlusion is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoLightAffect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoOnUv2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoTextureChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthEnabled">
            <summary>
            <para>If <c>true</c>, Depth mapping is enabled. See also <see cref="P:Godot.SpatialMaterial.NormalEnabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthDeepParallax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthMinLayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthMaxLayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthFlipTangent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthFlipBinormal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterEnabled">
            <summary>
            <para>If <c>true</c>, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterStrength">
            <summary>
            <para>The strength of the subsurface scattering effect.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.TransmissionEnabled">
            <summary>
            <para>If <c>true</c>, the transmission effect is enabled. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Transmission">
            <summary>
            <para>The color used by the transmission effect. Represents the light passing through an object.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.TransmissionTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionEnabled">
            <summary>
            <para>If <c>true</c>, the refraction effect is enabled. Distorts transparency based on light from behind the object. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionScale">
            <summary>
            <para>The strength of the refraction effect.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionTextureChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailBlendMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailUvLayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailAlbedo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailNormal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Triplanar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1TriplanarSharpness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Triplanar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2TriplanarSharpness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ProximityFadeEnable">
            <summary>
            <para>If <c>true</c>, the proximity and distance fade effect is enabled. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ProximityFadeDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpatialVelocityTracker.TrackPhysicsStep">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.UpdatePosition(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.GetTrackedLinearVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.Reset(Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SphereMesh">
            <summary>
            <para>Class representing a spherical <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Radius">
            <summary>
            <para>Radius of sphere. Defaults to 1.0.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Height">
            <summary>
            <para>Full height of the sphere. Defaults to 2.0.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the sphere. Defaults to 64.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Rings">
            <summary>
            <para>Number of segments along the height of the sphere. Defaults to 32.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.IsHemisphere">
            <summary>
            <para>Determines whether a full sphere or a hemisphere is created. Attention: To get a regular hemisphere the height and radius of the sphere have to equal. Defaults to false.</para>
            </summary>
        </member>
        <member name="T:Godot.SphereShape">
            <summary>
            <para>Sphere shape for 3D collisions, which can be set into a <see cref="T:Godot.PhysicsBody"/> or <see cref="T:Godot.Area"/>. This shape is useful for modeling sphere-like 3D objects.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereShape.Radius">
            <summary>
            <para>The sphere's radius. The shape's diameter is double the radius.</para>
            </summary>
        </member>
        <member name="T:Godot.SpinBox">
            <summary>
            <para>SpinBox is a numerical input text field. It allows entering integers and floats.</para>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Align">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Editable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Prefix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Suffix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpinBox.GetLineEdit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SplitContainer">
            <summary>
            <para>Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.Visible">
            <summary>
            <para>The split dragger is visible.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.Hidden">
            <summary>
            <para>The split dragger is invisible.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.HiddenCollapsed">
            <summary>
            <para>The split dragger is invisible and collapsed.</para>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.SplitOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.Collapsed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.DraggerVisibility">
            <summary>
            <para>Determines whether the dragger is visible.</para>
            </summary>
        </member>
        <member name="M:Godot.SplitContainer.ClampSplitOffset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SpotLight">
            <summary>
            <para>A SpotLight light is a type of <see cref="T:Godot.Light"/> node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of <see cref="T:Godot.Light"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAttenuation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAngleAttenuation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpringArm.CollisionMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpringArm.Shape">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpringArm.SpringLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpringArm.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpringArm.GetHitLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpringArm.AddExcludedObject(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpringArm.RemoveExcludedObject(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpringArm.ClearExcludedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Sprite">
            <summary>
            <para>A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Texture">
            <summary>
            <para><see cref="T:Godot.Texture"/> object to draw.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.NormalMap">
            <summary>
            <para>The normal map gives depth to the Sprite.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Centered">
            <summary>
            <para>If <c>true</c>, texture is centered. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Vframes">
            <summary>
            <para>The number of rows in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Hframes">
            <summary>
            <para>The number of columns in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.Frame">
            <summary>
            <para>Current frame to display from sprite sheet. <see cref="P:Godot.Sprite.Vframes"/> or <see cref="P:Godot.Sprite.Hframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionEnabled">
            <summary>
            <para>If <c>true</c>, texture is cut from a larger atlas texture. See <c>region_rect</c>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionRect">
            <summary>
            <para>The region of the atlas texture to display. <see cref="P:Godot.Sprite.RegionEnabled"/> must be <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionFilterClip">
            <summary>
            <para>If <c>true</c>, the outermost pixels get blurred out.</para>
            </summary>
        </member>
        <member name="M:Godot.Sprite.IsPixelOpaque(Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Sprite.GetRect">
            <summary>
            <para>Returns a Rect2 representing the Sprite's boundary relative to its local coordinates.</para>
            </summary>
        </member>
        <member name="T:Godot.Sprite3D">
            <summary>
            <para>A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Texture">
            <summary>
            <para><see cref="T:Godot.Texture"/> object to draw.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Vframes">
            <summary>
            <para>The number of rows in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Hframes">
            <summary>
            <para>The number of columns in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Frame">
            <summary>
            <para>Current frame to display from sprite sheet. <see cref="P:Godot.Sprite3D.Vframes"/> or <see cref="P:Godot.Sprite3D.Hframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionEnabled">
            <summary>
            <para>If <c>true</c>, texture will be cut from a larger atlas texture. See <see cref="P:Godot.Sprite3D.RegionRect"/>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionRect">
            <summary>
            <para>The region of the atlas texture to display. <see cref="P:Godot.Sprite3D.RegionEnabled"/> must be <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.SpriteBase3D">
            <summary>
            <para>A node that displays 2D texture information in a 3D environment.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Transparent">
            <summary>
            <para>If set, the texture's transparency and the opacity are used to make those parts of the Sprite invisible.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Shaded">
            <summary>
            <para>If set, the Light in the Environment has effects on the Sprite.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.DoubleSided">
            <summary>
            <para>If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Max">
            <summary>
            <para>Used internally to mark the end of the Flags section.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.Discard">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.OpaquePrepass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Centered">
            <summary>
            <para>If <c>true</c>, texture will be centered. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Modulate">
            <summary>
            <para>A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Opacity">
            <summary>
            <para>The objects visibility on a scale from <c>0</c> fully invisible to <c>1</c> fully visible.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.PixelSize">
            <summary>
            <para>The size of one pixel's width on the Sprite to scale it in 3D.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Axis">
            <summary>
            <para>The direction in which the front of the texture faces.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Transparent">
            <summary>
            <para>If <c>true</c>, the texture's transparency and the opacity are used to make those parts of the Sprite invisible. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Shaded">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.Light"/> in the <see cref="T:Godot.Environment"/> has effects on the Sprite. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.DoubleSided">
            <summary>
            <para>If <c>true</c>, texture can be seen from the back as well, if <c>false</c>, it is invisible when looking at it from behind. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.AlphaCut">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GetItemRect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GenerateTriangleMesh">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SpriteFrames">
            <summary>
            <para>Sprite frame library for <see cref="T:Godot.AnimatedSprite"/>. Contains frames and animation data for playback.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteFrames.Frames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddAnimation(System.String)">
            <summary>
            <para>Adds a new animation to the library.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.HasAnimation(System.String)">
            <summary>
            <para>If <c>true</c>, the named animation exists.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveAnimation(System.String)">
            <summary>
            <para>Removes the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RenameAnimation(System.String,System.String)">
            <summary>
            <para>Changes the animation's name to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationNames">
            <summary>
            <para>Returns an array containing the names associated to each animation. Values are placed in alphabetical order.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationSpeed(System.String,System.Single)">
            <summary>
            <para>The animation's speed in frames per second.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationSpeed(System.String)">
            <summary>
            <para>The animation's speed in frames per second.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationLoop(System.String,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the animation will loop.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationLoop(System.String)">
            <summary>
            <para>If <c>true</c>, the given animation will loop.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddFrame(System.String,Godot.Texture,System.Int32)">
            <summary>
            <para>Adds a frame to the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrameCount(System.String)">
            <summary>
            <para>Returns the number of frames in the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrame(System.String,System.Int32)">
            <summary>
            <para>Returns the animation's selected frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetFrame(System.String,System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the texture of the given frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveFrame(System.String,System.Int32)">
            <summary>
            <para>Removes the animation's selected frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.Clear(System.String)">
            <summary>
            <para>Removes all frames from the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.ClearAll">
            <summary>
            <para>Removes all animations. A "default" animation will be created.</para>
            </summary>
        </member>
        <member name="T:Godot.StaticBody">
            <summary>
            <para>Static body for 3D physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a <see cref="T:Godot.RigidBody"/> so they are great for scenario collision.</para>
            <para>A static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.</para>
            <para>Alternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody.Friction">
            <summary>
            <para>The body friction, from 0 (frictionless) to 1 (full friction).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody.Bounce">
            <summary>
            <para>The body bounciness.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody.PhysicsMaterialOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StaticBody.ConstantLinearVelocity">
            <summary>
            <para>The constant linear velocity for the body. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody.ConstantAngularVelocity">
            <summary>
            <para>The constant angular velocity for the body. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.</para>
            </summary>
        </member>
        <member name="T:Godot.StaticBody2D">
            <summary>
            <para>Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.</para>
            <para>Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantLinearVelocity">
            <summary>
            <para>Constant linear velocity for the body. This does not move the body, but affects colliding bodies, as if it were moving.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantAngularVelocity">
            <summary>
            <para>Constant angular velocity for the body. This does not rotate the body, but affects colliding bodies, as if it were rotating.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.Friction">
            <summary>
            <para>The body's friction. Values range from <c>0</c> (no friction) to <c>1</c> (full friction).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.Bounce">
            <summary>
            <para>The body's bounciness. Values range from <c>0</c> (no bounce) to <c>1</c> (full bounciness).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.PhysicsMaterialOverride">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.StreamPeer">
            <summary>
            <para>StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.</para>
            </summary>
        </member>
        <member name="P:Godot.StreamPeer.BigEndian">
            <summary>
            <para>If <c>true</c>, this <c>StreamPeer</c> will using big-endian format for encoding and decoding.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutData(System.Byte[])">
            <summary>
            <para>Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutPartialData(System.Byte[])">
            <summary>
            <para>Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetData(System.Int32)">
            <summary>
            <para>Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetPartialData(System.Int32)">
            <summary>
            <para>Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetAvailableBytes">
            <summary>
            <para>Return the amount of bytes this <c>StreamPeer</c> has available.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put8(System.Int32)">
            <summary>
            <para>Put a signed byte into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU8(System.Int32)">
            <summary>
            <para>Put an unsigned byte into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put16(System.Int32)">
            <summary>
            <para>Put a signed 16 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU16(System.Int32)">
            <summary>
            <para>Put an unsigned 16 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put32(System.Int32)">
            <summary>
            <para>Put a signed 32 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU32(System.Int32)">
            <summary>
            <para>Put an unsigned 32 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put64(System.Int32)">
            <summary>
            <para>Put a signed 64 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU64(System.Int32)">
            <summary>
            <para>Put an unsigned 64 bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutFloat(System.Single)">
            <summary>
            <para>Put a single-precision float into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutDouble(System.Single)">
            <summary>
            <para>Put a double-precision float into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutString(System.String)">
            <summary>
            <para>Put a zero-terminated ascii string into the stream prepended by a 32 bits unsigned integer representing its size.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutUtf8String(System.String)">
            <summary>
            <para>Put a zero-terminated utf8 string into the stream prepended by a 32 bits unsigned integer representing its size.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutVar(System.Object,System.Boolean)">
            <summary>
            <para>Put a Variant into the stream. When <c>full_objects</c> is <c>true</c> encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get8">
            <summary>
            <para>Get a signed byte from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU8">
            <summary>
            <para>Get an unsigned byte from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get16">
            <summary>
            <para>Get a signed 16 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU16">
            <summary>
            <para>Get an unsigned 16 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get32">
            <summary>
            <para>Get a signed 32 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU32">
            <summary>
            <para>Get an unsigned 32 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get64">
            <summary>
            <para>Get a signed 64 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU64">
            <summary>
            <para>Get an unsigned 64 bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetFloat">
            <summary>
            <para>Get a single-precision float from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetDouble">
            <summary>
            <para>Get a double-precision float from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetString(System.Int32)">
            <summary>
            <para>Get a string with byte-length <c>bytes</c> from the stream. If <c>bytes</c> is negative (default) the length will be read from the stream using the reverse process of <see cref="M:Godot.StreamPeer.PutString(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetUtf8String(System.Int32)">
            <summary>
            <para>Get a utf8 string with byte-length <c>bytes</c> from the stream (this decodes the string sent as utf8). If <c>bytes</c> is negative (default) the length will be read from the stream using the reverse process of <see cref="M:Godot.StreamPeer.PutUtf8String(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetVar(System.Boolean)">
            <summary>
            <para>Get a Variant from the stream. When <c>allow_objects</c> is <c>true</c> decoding objects is allowed.</para>
            <para>WARNING: Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).</para>
            </summary>
        </member>
        <member name="P:Godot.StreamPeerBuffer.DataArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Seek(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.GetSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.GetPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Resize(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Duplicate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.StreamPeerSSL">
            <summary>
            <para>SSL Stream peer. This object can be used to connect to SSL servers.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Disconnected">
            <summary>
            <para>A status representing a <c>StreamPeerSSL</c> that is disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Handshaking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Connected">
            <summary>
            <para>A status representing a <c>StreamPeerSSL</c> that is connected to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.ErrorHostnameMismatch">
            <summary>
            <para>An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation.</para>
            </summary>
        </member>
        <member name="P:Godot.StreamPeerSSL.BlockingHandshake">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.Poll">
            <summary>
            <para>Poll the connection to check for incoming bytes. Call this right before "get_available_bytes()" for it to work properly.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.ConnectToStream(Godot.StreamPeer,System.Boolean,System.String)">
            <summary>
            <para>Connect to a peer using an underlying <see cref="T:Godot.StreamPeer"/> "stream", when "validate_certs" is true, <c>StreamPeerSSL</c> will validate that the certificate presented by the peer matches the "for_hostname".</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.GetStatus">
            <summary>
            <para>Return the status of the connection, one of STATUS_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.DisconnectFromStream">
            <summary>
            <para>Disconnect from host.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamPeerTCP">
            <summary>
            <para>TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a TCP server.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.None">
            <summary>
            <para>The initial status of the <c>StreamPeerTCP</c>, also the status after a disconnect.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Connecting">
            <summary>
            <para>A status representing a <c>StreamPeerTCP</c> that is connecting to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Connected">
            <summary>
            <para>A status representing a <c>StreamPeerTCP</c> that is connected to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Error">
            <summary>
            <para>A status representing a <c>StreamPeerTCP</c> in error state.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.ConnectToHost(System.String,System.Int32)">
            <summary>
            <para>Connect to the specified host:port pair. A hostname will be resolved if valid. Returns <c>OK</c> on success or <c>FAILED</c> on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.IsConnectedToHost">
            <summary>
            <para>Returns <c>true</c> if this peer is currently connected to a host, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetStatus">
            <summary>
            <para>Return the status of the connection, see <see cref="T:Godot.StreamPeerTCP.Status"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedHost">
            <summary>
            <para>Return the IP of this peer.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedPort">
            <summary>
            <para>Return the port of this peer.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.DisconnectFromHost">
            <summary>
            <para>Disconnect from host.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.SetNoDelay(System.Boolean)">
            <summary>
            <para>Disable Nagle algorithm to improve latency for small packets.</para>
            <para>Note that for applications that send large packets, or need to transfer a lot of data, this can reduce total bandwidth.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamTexture">
            <summary>
            <para>A texture that is loaded from a .stex file.</para>
            </summary>
        </member>
        <member name="P:Godot.StreamTexture.LoadPath">
            <summary>
            <para>The StreamTexture's filepath to a .stex file.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBox">
            <summary>
            <para>StyleBox is <see cref="T:Godot.Resource"/> that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginLeft">
            <summary>
            <para>The left margin for the contents of this style box.Increasing this value reduces the space available to the contents from the left.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginRight">
            <summary>
            <para>The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginTop">
            <summary>
            <para>The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginBottom">
            <summary>
            <para>The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom.</para>
            <para>If this value is negative, it is ignored and a child-specific margin is used instead. For example for <see cref="T:Godot.StyleBoxFlat"/> the border thickness (if any) is used instead.</para>
            <para>It is up to the code using this style box to decide what these contents are: for example, a <see cref="T:Godot.Button"/> respects this content margin for the textual contents of the button.</para>
            <para><see cref="M:Godot.StyleBox.GetMargin(Godot.Margin)"/> should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.TestMask(Godot.Vector2,Godot.Rect2)">
            <summary>
            <para>Test a position in a rectangle, return whether it passes the mask test.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMargin(Godot.Margin)">
            <summary>
            <para>Return the content margin offset for the specified margin</para>
            <para>Positive values reduce size inwards, unlike <see cref="T:Godot.Control"/>'s margin values.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMinimumSize">
            <summary>
            <para>Return the minimum size that this stylebox can be shrunk to.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetCenterSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetOffset">
            <summary>
            <para>Return the "offset" of a stylebox, this is a helper function, like writing <c>Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetCurrentItemDrawn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBox.Draw(Godot.RID,Godot.Rect2)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.StyleBoxEmpty">
            <summary>
            <para>Empty stylebox (really does not display anything).</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxFlat">
            <summary>
            <para>This stylebox can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:</para>
            <para>- Color</para>
            <para>- Border width (individual width for each border)</para>
            <para>- Rounded corners (individual radius for each corner)</para>
            <para>- Shadow</para>
            <para>Setting corner radius to high values is allowed. As soon as corners would overlap the stylebox will switch to a relative system. Example:</para>
            <para><code>
            height = 30
            corner_radius_top_left = 50
            corner_radius_bottom_left = 100
            </code></para>
            <para>The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will never be more than the height. Result:</para>
            <para><code>
            corner_radius_top_left: 10
            corner_radius_bottom_left: 20
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BgColor">
            <summary>
            <para>The background color of the stylebox.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.DrawCenter">
            <summary>
            <para>Toggels drawing of the inner part of the stylebox.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthLeft">
            <summary>
            <para>Border width for the left border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthTop">
            <summary>
            <para>Border width for the top border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthRight">
            <summary>
            <para>Border width for the right border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthBottom">
            <summary>
            <para>Border width for the bottom border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderColor">
            <summary>
            <para>Sets the color of the border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderBlend">
            <summary>
            <para>When set to true, the border will fade into the background color.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopLeft">
            <summary>
            <para>The corner radius of the top left corner. When set to 0 the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopRight">
            <summary>
            <para>The corner radius of the top right corner. When set to 0 the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomRight">
            <summary>
            <para>The corner radius of the bottom right corner. When set to 0 the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomLeft">
            <summary>
            <para>The corner radius of the bottom left corner. When set to 0 the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerDetail">
            <summary>
            <para>This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value you should take the corner radius (<see cref="M:Godot.StyleBoxFlat.SetCornerRadiusAll(System.Int32)"/>) into account.</para>
            <para>For corner radius smaller than 10, 4-5 should be enough.</para>
            <para>For corner radius smaller than 30, 8-12 should be enough.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginLeft">
            <summary>
            <para>Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left. To draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginRight">
            <summary>
            <para>Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right. To draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginTop">
            <summary>
            <para>Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top. To draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginBottom">
            <summary>
            <para>Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom. To draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowColor">
            <summary>
            <para>The color of the shadow. (This has no effect when shadow_size &lt; 1)</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowSize">
            <summary>
            <para>The shadow size in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasing">
            <summary>
            <para>Anti Aliasing draws a small ring around edges. This ring fades to transparent. As a result edges look much smoother. This is only noticeable when using rounded corners.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasingSize">
            <summary>
            <para>This changes the size of the faded ring. Higher values can be used to achieve a "blurry" effect.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetBorderWidthAll(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetBorderWidthMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusIndividual(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusAll(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginAll(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.GrowBegin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.GrowEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Thickness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.StyleBoxTexture">
            <summary>
            <para>Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.</para>
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.Stretch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.Tile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.TileFit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.Texture">
            <summary>
            <para>The texture to use when drawing this style box.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.NormalMap">
            <summary>
            <para>The normal map to use when drawing this style box.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.RegionRect">
            <summary>
            <para>Species a sub region of the texture to use.</para>
            <para>This is equivalent to first wrapping the texture in an <see cref="T:Godot.AtlasTexture"/> with the same region.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginLeft">
            <summary>
            <para>Increases the left margin of the 3x3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the left border of the 3x3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginLeft"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginRight">
            <summary>
            <para>Increases the right margin of the 3x3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the right border of the 3x3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginRight"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginTop">
            <summary>
            <para>Increases the top margin of the 3x3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the top border of the 3x3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginTop"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginBottom">
            <summary>
            <para>Increases the bottom margin of the 3x3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the bottom border of the 3x3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginBottom"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginLeft">
            <summary>
            <para>Expands the left margin of this style box when drawing, causing it be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginRight">
            <summary>
            <para>Expands the right margin of this style box when drawing, causing it be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginTop">
            <summary>
            <para>Expands the top margin of this style box when drawing, causing it be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginBottom">
            <summary>
            <para>Expands the bottom margin of this style box when drawing, causing it be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchHorizontal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchVertical">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ModulateColor">
            <summary>
            <para>Modulates the color of the texture when this style box is drawn.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.DrawCenter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginAll(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.SurfaceTool">
            <summary>
            <para>The <c>SurfaceTool</c> is used to construct a <see cref="T:Godot.Mesh"/> by specifying vertex attributes individually. It can be used to construct a <see cref="T:Godot.Mesh"/> from script. All properties except index need to be added before a call to <see cref="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)"/>. For example adding vertex colors and UVs looks like</para>
            <para><code>
            var st = SurfaceTool.new()
            st.begin(Mesh.PRIMITIVE_TRIANGLES)
            st.add_color(Color(1, 0, 0))
            st.add_uv(Vector2(0, 0))
            st.add_vertex(Vector3(0, 0, 0))
            </code></para>
            <para>The <c>SurfaceTool</c> now contains one vertex of a triangle which has a UV coordinate and a specified <see cref="T:Godot.Color"/>. If another vertex were added without calls to <see cref="M:Godot.SurfaceTool.AddUv(Godot.Vector2)"/> or <see cref="M:Godot.SurfaceTool.AddColor(Godot.Color)"/> then the last values would be used.</para>
            <para>It is very important that vertex attributes are passed before the call to <see cref="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)"/>, failure to do this will result in an error when committing the vertex information to a mesh.</para>
            <para>Additionally, the attributes used before the first vertex is added determine the format of the mesh. For example if you only add UVs to the first vertex, you cannot add color to any of the subsequent vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Begin(Godot.Mesh.PrimitiveType)">
            <summary>
            <para>Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)">
            <summary>
            <para>Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddColor(Godot.Color)">
            <summary>
            <para>Specify a <see cref="T:Godot.Color"/> for the next Vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddNormal(Godot.Vector3)">
            <summary>
            <para>Specify a normal for the next Vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddTangent(Godot.Plane)">
            <summary>
            <para>Specify a Tangent for the next Vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddUv(Godot.Vector2)">
            <summary>
            <para>Specify UV Coordinate for next Vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddUv2(Godot.Vector2)">
            <summary>
            <para>Specify an optional second set of UV coordinates for next Vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddBones(System.Int32[])">
            <summary>
            <para>Add an array of bones for the next Vertex to use. Array must contain 4 integers.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddWeights(System.Single[])">
            <summary>
            <para>Specify weight values for next Vertex to use. Array must contain 4 values.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddSmoothGroup(System.Boolean)">
            <summary>
            <para>Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddTriangleFan(Godot.Vector3[],Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Vector3[],Godot.Collections.Array)">
            <summary>
            <para>Insert a triangle fan made of array data into <see cref="T:Godot.Mesh"/> being constructed.</para>
            <para>Requires primitive type be set to <c>PRIMITIVE_TRIANGLES</c>.</para>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="colors">If the parameter is null, then the default value is new Color[] {}</param>
            <param name="uv2s">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="normals">If the parameter is null, then the default value is new Vector3[] {}</param>
            <param name="tangents">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddIndex(System.Int32)">
            <summary>
            <para>Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Index">
            <summary>
            <para>Shrinks Vertex array by creating an index array. Avoids reusing Vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Deindex">
            <summary>
            <para>Removes index array by expanding Vertex array.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateNormals(System.Boolean)">
            <summary>
            <para>Generates normals from Vertices so you do not have to do it manually.</para>
            <para>Setting "flip" <c>true</c> inverts resulting normals.</para>
            <para>Requires primitive type to be set to <c>PRIMITIVE_TRIANGLES</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateTangents">
            <summary>
            <para>Generates a tangent vector for each vertex.</para>
            <para>Requires that each vertex have UVs and normals set already.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetMaterial(Godot.Material)">
            <summary>
            <para>Sets <see cref="T:Godot.Material"/> to be used by the <see cref="T:Godot.Mesh"/> you are constructing.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Clear">
            <summary>
            <para>Clear all information passed into the surface tool so far.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.CreateFrom(Godot.Mesh,System.Int32)">
            <summary>
            <para>Creates a vertex array from an existing <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AppendFrom(Godot.Mesh,System.Int32,Godot.Transform)">
            <summary>
            <para>Append vertices from a given <see cref="T:Godot.Mesh"/> surface onto the current vertex array with specified <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Commit(Godot.ArrayMesh,System.Int32)">
            <summary>
            <para>Returns a constructed <see cref="T:Godot.ArrayMesh"/> from current information passed in. If an existing <see cref="T:Godot.ArrayMesh"/> is passed in as an argument, will add an extra surface to the existing <see cref="T:Godot.ArrayMesh"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.TabContainer">
            <summary>
            <para>Sets the active tab's <c>visible</c> property to the value <c>true</c>. Sets all other children's to <c>false</c>.</para>
            <para>Ignores non-<see cref="T:Godot.Control"/> children.</para>
            <para>Individual tabs are always visible unless you use <see cref="M:Godot.TabContainer.SetTabDisabled(System.Int32,System.Boolean)"/> and <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/> to hide it.</para>
            <para>To hide only a tab's content, nest the content inside a child <see cref="T:Godot.Control"/>, so it receives the <c>TabContainer</c>'s visibility setting instead.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Left">
            <summary>
            <para>Align the tabs to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Center">
            <summary>
            <para>Align the tabs to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Right">
            <summary>
            <para>Align the tabs to the right.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabAlign">
            <summary>
            <para>The alignment of all tabs in the tab container. See the <c>ALIGN_*</c> constants for details.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.CurrentTab">
            <summary>
            <para>The current tab index. When set, this index's <see cref="T:Godot.Control"/> node's <c>visible</c> property is set to <c>true</c> and all others are set to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabsVisible">
            <summary>
            <para>If <c>true</c>, tabs are visible. If <c>false</c>, tabs' content and titles are hidden. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.DragToRearrangeEnabled">
            <summary>
            <para>If <c>true</c>, tabs can be rearranged with mouse drag.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabCount">
            <summary>
            <para>Returns the number of tabs.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPreviousTab">
            <summary>
            <para>Returns the previously active tab index.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetCurrentTabControl">
            <summary>
            <para>Returns the child <see cref="T:Godot.Control"/> node located at the active tab index.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabControl(System.Int32)">
            <summary>
            <para>Returns the currently visible tab's <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)">
            <summary>
            <para>Sets a title for the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabTitle(System.Int32)">
            <summary>
            <para>Returns the title of the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabIcon(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets an icon for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabIcon(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture"/> for the tab at index <c>tab_idx</c> or null if the tab has no <see cref="T:Godot.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>disabled</c> is false, hides the tab at index <c>tab_idx</c>. Note that its title text will remain, unless also removed with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the tab at index <c>tab_idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetPopup(Godot.Node)">
            <summary>
            <para>If set on a <see cref="T:Godot.Popup"/> node instance, a popup menu icon appears in the top-right corner of the <c>TabContainer</c>. Clicking it will expand the <see cref="T:Godot.Popup"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPopup">
            <summary>
            <para>Returns the <see cref="T:Godot.Popup"/> node instance if one has been set already with <see cref="M:Godot.TabContainer.SetPopup(Godot.Node)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabsRearrangeGroup(System.Int32)">
            <summary>
            <para>Defines rearrange group id, choose for each <c>TabContainer</c> the same value to enable tab drag between <c>TabContainer</c>. Enable drag with <c>set_drag_to_rearrange_enabled(true)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabsRearrangeGroup">
            <summary>
            <para>Returns the <c>TabContainer</c> rearrange group id.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs">
            <summary>
            <para>Simple tabs control, similar to <see cref="T:Godot.TabContainer"/> but is only in charge of drawing tabs, not interact with children.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowNever">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowActiveOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowAlways">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Left">
            <summary>
            <para>Align the tabs to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Center">
            <summary>
            <para>Align the tabs to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Right">
            <summary>
            <para>Align the tabs to the right.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Tabs.CurrentTab">
            <summary>
            <para>Select tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabAlign">
            <summary>
            <para>The alignment of all tabs. See enum <c>TabAlign</c> constants for details.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabCloseDisplayPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Tabs.ScrollingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Tabs.DragToRearrangeEnabled">
            <summary>
            <para>If <c>true</c>, tabs can be rearranged with mouse drag.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabCount">
            <summary>
            <para>Returns the number of tabs.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)">
            <summary>
            <para>Sets a title for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabTitle(System.Int32)">
            <summary>
            <para>Returns the title of the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabIcon(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets an icon for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabIcon(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture"/> for the tab at index <c>tab_idx</c> or null if the tab has no <see cref="T:Godot.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>disabled</c> is false, hides the tab at index <c>tab_idx</c>. Note that its title text will remain, unless also removed with <see cref="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the tab at index <c>tab_idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.RemoveTab(System.Int32)">
            <summary>
            <para>Removes tab at index <c>tab_idx</c></para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.AddTab(System.String,Godot.Texture)">
            <summary>
            <para>Adds a new tab.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetOffsetButtonsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Tabs.EnsureTabVisible(System.Int32)">
            <summary>
            <para>Moves the Scroll view to make the tab visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabRect(System.Int32)">
            <summary>
            <para>Returns tab <see cref="T:Godot.Rect2"/> with local position and size.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.MoveTab(System.Int32,System.Int32)">
            <summary>
            <para>Rearrange tab.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabsRearrangeGroup(System.Int32)">
            <summary>
            <para>Defines rearrange group id, choose for each <c>Tabs</c> the same value to enable tab drag between <c>Tabs</c>. Enable drag with <c>set_drag_to_rearrange_enabled(true)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabsRearrangeGroup">
            <summary>
            <para>Returns the <c>Tabs</c> rearrange group id.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetSelectWithRmb(System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables selecting a tab with right mouse button.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetSelectWithRmb">
            <summary>
            <para>Returns <c>true</c> if select with right mouse button is enabled.</para>
            </summary>
        </member>
        <member name="T:Godot.TCP_Server">
            <summary>
            <para>TCP Server class. Listens to connections on a port and returns a <see cref="T:Godot.StreamPeerTCP"/> when got a connection.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Listen(System.Int32,System.String)">
            <summary>
            <para>Listen on the "port" binding to "bind_address".</para>
            <para>If "bind_address" is set as "*" (default), the server will listen on all available addresses (both IPv4 and IPv6).</para>
            <para>If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the server will listen on all available addresses matching that IP type.</para>
            <para>If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.IsConnectionAvailable">
            <summary>
            <para>Return true if a connection is available for taking.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.TakeConnection">
            <summary>
            <para>If a connection is available, return a StreamPeerTCP with the connection/</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Stop">
            <summary>
            <para>Stop listening.</para>
            </summary>
        </member>
        <member name="T:Godot.TextEdit">
            <summary>
            <para>TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.MatchCase">
            <summary>
            <para>Match case when searching.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.WholeWords">
            <summary>
            <para>Match whole words when searching.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.Backwards">
            <summary>
            <para>Search from end to beginning.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Cut">
            <summary>
            <para>Cuts (Copies and clears) the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Copy">
            <summary>
            <para>Copies the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Paste">
            <summary>
            <para>Pastes the clipboard text over the selected text (or at the cursor's position).</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Clear">
            <summary>
            <para>Erases the whole <see cref="T:Godot.TextEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.SelectAll">
            <summary>
            <para>Selects the whole <see cref="T:Godot.TextEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Undo">
            <summary>
            <para>Undoes the previous action.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Redo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Text">
            <summary>
            <para>String value of the <see cref="T:Godot.TextEdit"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Readonly">
            <summary>
            <para>If <c>true</c>, read-only mode is enabled. Existing text cannot be modified and new text cannot be added.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightCurrentLine">
            <summary>
            <para>If <c>true</c>, the line containing the cursor is highlighted.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SyntaxHighlighting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ShowLineNumbers">
            <summary>
            <para>If <c>true</c>, line numbers are displayed to the left of the text.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.BreakpointGutter">
            <summary>
            <para>If <c>true</c>, the breakpoint gutter is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightAllOccurrences">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.OverrideSelectedFontColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ContextMenuEnabled">
            <summary>
            <para>If <c>true</c>, a right click displays the context menu.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SmoothScrolling">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.VScrollSpeed">
            <summary>
            <para>Vertical scroll sensitivity.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HidingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextEdit.WrapEnabled">
            <summary>
            <para>If <c>true</c>, enables text wrapping when it goes beyond the edge of what is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlockMode">
            <summary>
            <para>If <c>true</c>, the caret displays as a rectangle.</para>
            <para>If <c>false</c>, the caret displays as a bar.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlink">
            <summary>
            <para>If <c>true</c>, the caret (visual cursor) blinks.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlinkSpeed">
            <summary>
            <para>Duration (in seconds) of a caret's blinking cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretMovingByRightClick">
            <summary>
            <para>If <c>true</c>, a right click moves the cursor at the mouse position before displaying the context menu.</para>
            <para>If <c>false</c>, the context menu disregards mouse location.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.InsertTextAtCursor(System.String)">
            <summary>
            <para>Insert a given text at the cursor position.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLineCount">
            <summary>
            <para>Return the amount of total lines in the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLine(System.Int32)">
            <summary>
            <para>Return the text of a specific line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetColumn(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetLine(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetColumn">
            <summary>
            <para>Return the column the editing cursor is at.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetLine">
            <summary>
            <para>Return the line the editing cursor is at.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Cut">
            <summary>
            <para>Cut the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Copy">
            <summary>
            <para>Copy the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Paste">
            <summary>
            <para>Paste the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Perform selection, from line/column to line/column.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SelectAll">
            <summary>
            <para>Select all the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Deselect">
            <summary>
            <para>Clears the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsSelectionActive">
            <summary>
            <para>Return true if the selection is active.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromLine">
            <summary>
            <para>Return the selection begin line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromColumn">
            <summary>
            <para>Return the selection begin column.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToLine">
            <summary>
            <para>Return the selection end line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToColumn">
            <summary>
            <para>Return the selection end column.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionText">
            <summary>
            <para>Return the text inside the selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetWordUnderCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Search(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Undo">
            <summary>
            <para>Perform undo operation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Redo">
            <summary>
            <para>Perform redo operation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearUndoHistory">
            <summary>
            <para>Clear the undo history.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsLineHidden(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldAllLines">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnhideAllLines">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldLine(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnfoldLine(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ToggleFoldLine(System.Int32)">
            <summary>
            <para>Toggle the folding of the code block at the given line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CanFold(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsFolded(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.AddKeywordColor(System.String,Godot.Color)">
            <summary>
            <para>Add a keyword and its color.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.HasKeywordColor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetKeywordColor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.AddColorRegion(System.String,System.String,Godot.Color,System.Boolean)">
            <summary>
            <para>Add color region (given the delimiters) and its colors.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearColors">
            <summary>
            <para>Clear all the syntax coloring information.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.MenuOption(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetMenu">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetBreakpoints">
            <summary>
            <para>Return an array containing the line number of each breakpoint.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.RemoveBreakpoints">
            <summary>
            <para>Removes all the breakpoints (without firing "breakpoint_toggled" signal).</para>
            </summary>
        </member>
        <member name="T:Godot.Texture">
            <summary>
            <para>A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D <see cref="T:Godot.Sprite"/> or GUI <see cref="T:Godot.Control"/>.</para>
            <para>Textures are often created by loading them from a file. See <c>@GDScript.load</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.Default">
            <summary>
            <para>Default flags. Generate mipmaps, repeat, and filter are enabled.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.Mipmaps">
            <summary>
            <para>Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.Repeat">
            <summary>
            <para>Repeats texture (instead of clamp to edge).</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.Filter">
            <summary>
            <para>Magnifying filter, to enable smooth zooming in of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.AnisotropicFilter">
            <summary>
            <para>Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.</para>
            <para>More effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.ConvertToLinear">
            <summary>
            <para>Converts texture to SRGB color space.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.MirroredRepeat">
            <summary>
            <para>Repeats texture with alternate sections mirrored.</para>
            </summary>
        </member>
        <member name="F:Godot.Texture.FlagsEnum.VideoSurface">
            <summary>
            <para>Texture is a video surface.</para>
            </summary>
        </member>
        <member name="P:Godot.Texture.Flags">
            <summary>
            <para>The texture's flags.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture.GetWidth">
            <summary>
            <para>Return the texture width.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture.GetHeight">
            <summary>
            <para>Return the texture height.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture.GetSize">
            <summary>
            <para>Return the texture size.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture.HasAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Texture.Draw(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.Texture.DrawRect(Godot.RID,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.Texture.DrawRectRegion(Godot.RID,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture,System.Boolean)">
            <summary>
            
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            </summary>
        </member>
        <member name="M:Godot.Texture.GetData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.TextureButton">
            <summary>
            <para><c>TextureButton</c> has the same functionality as <see cref="T:Godot.Button"/>, except it uses sprites instead of Godot's <see cref="T:Godot.Theme"/> resource. It is faster to create, but it doesn't support localization like more complex Controls.</para>
            <para>The Normal state's texture is required. Others are optional.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Scale">
            <summary>
            <para>Scale to fit the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Tile">
            <summary>
            <para>Tile inside the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Keep">
            <summary>
            <para>The texture keeps its original size and stays in the bounding rectangle's top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepCentered">
            <summary>
            <para>The texture keeps its original size and stays centered in the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspect">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspectCentered">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspectCovered">
            <summary>
            <para>Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureNormal">
            <summary>
            <para>Texture to display by default, when the node is not in the disabled, focused, hover or pressed state.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TexturePressed">
            <summary>
            <para>Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the enter key or if the player presses the <see cref="P:Godot.BaseButton.Shortcut"/> key.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureHover">
            <summary>
            <para>Texture to display when the mouse hovers the node.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureDisabled">
            <summary>
            <para>Texture to display when the node is disabled. See <see cref="P:Godot.BaseButton.Disabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureFocused">
            <summary>
            <para>Texture to display when the node has mouse or keyboard focus.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureClickMask">
            <summary>
            <para>Pure black and white <see cref="T:Godot.BitMap"/> image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.Expand">
            <summary>
            <para>If <c>true</c>, the texture stretches to the edges of the node's bounding rectangle using the <see cref="P:Godot.TextureButton.StretchMode"/>. If <c>false</c>, the texture will not scale with the node. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.StretchMode">
            <summary>
            <para>Controls the texture's behavior when you resize the node's bounding rectangle, only if <see cref="P:Godot.TextureButton.Expand"/> is <c>true</c>. Set it to one of the <c>STRETCH_*</c> constants. See the constants to learn more.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureLayered.FlagsEnum.Mipmaps">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TextureLayered.FlagsEnum.Repeat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TextureLayered.FlagsEnum.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TextureLayered.FlagsEnum.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextureLayered.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TextureLayered.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetDepth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.Create(System.Int32,System.Int32,System.Int32,Godot.Image.Format,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.SetLayerData(Godot.Image,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetLayerData(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.SetDataPartial(Godot.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.TextureProgress">
            <summary>
            <para>TextureProgress works like <see cref="T:Godot.ProgressBar"/> but it uses up to 3 textures instead of Godot's <see cref="T:Godot.Theme"/> resource. Works horizontally, vertically, and radially.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.LeftToRight">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from left to right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.RightToLeft">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from right to left.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.TopToBottom">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from top to bototm.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.BottomToTop">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from bottom to top.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.Clockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills clockwise. See <see cref="P:Godot.TextureProgress.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgress.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgress.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.CounterClockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills counter-clockwise. See <see cref="P:Godot.TextureProgress.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgress.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgress.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.BilinearLeftAndRight">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from the center, expanding both towards the left and the right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.BilinearTopAndBottom">
            <summary>
            <para>The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills from the center, expanding both towards the top and the bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgress.FillModeEnum.ClockwiseAndCounterClockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgress.TextureProgress_"/> fills radially from the center, expanding both clockwise and counter-clockwise. See <see cref="P:Godot.TextureProgress.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgress.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgress.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureUnder">
            <summary>
            <para><see cref="T:Godot.Texture"/> that draws under the progress bar. The bar's background.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureOver">
            <summary>
            <para><see cref="T:Godot.Texture"/> that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of <see cref="P:Godot.TextureProgress.TextureProgress_"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureProgress_">
            <summary>
            <para><see cref="T:Godot.Texture"/> that clips based on the node's <c>value</c> and <see cref="P:Godot.TextureProgress.FillMode"/>. As <c>value</c> increased, the texture fills up. It shows entirely when <c>value</c> reaches <c>max_value</c>. It doesn't show at all if <c>value</c> is equal to <c>min_value</c>.</para>
            <para>The <c>value</c> property comes from <see cref="T:Godot.Range"/>. See <see cref="P:Godot.Range.Value"/>, <see cref="P:Godot.Range.MinValue"/>, <see cref="P:Godot.Range.MaxValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.FillMode">
            <summary>
            <para>The fill direction. Uses FILL_* constants.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TintUnder">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_under</c> texture.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TintOver">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_over</c> texture. The effect is similar to <see cref="P:Godot.CanvasItem.Modulate"/>, except it only affects this specific texture instead of the entire node.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TintProgress">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_progress</c> texture.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialInitialAngle">
            <summary>
            <para>Starting angle for the fill of <see cref="P:Godot.TextureProgress.TextureProgress_"/> if <see cref="P:Godot.TextureProgress.FillMode"/> is <c>FILL_CLOCKWISE</c> or <c>FILL_COUNTER_CLOCKWISE</c>. When the node's <c>value</c> is equal to its <c>min_value</c>, the texture doesn't show up at all. When the <c>value</c> increases, the texture fills and tends towards <see cref="P:Godot.TextureProgress.RadialFillDegrees"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialFillDegrees">
            <summary>
            <para>Upper limit for the fill of <see cref="P:Godot.TextureProgress.TextureProgress_"/> if <see cref="P:Godot.TextureProgress.FillMode"/> is <c>FILL_CLOCKWISE</c> or <c>FILL_COUNTER_CLOCKWISE</c>. When the node's <c>value</c> is equal to its <c>max_value</c>, the texture fills up to this angle.</para>
            <para>See <see cref="P:Godot.Range.Value"/>, <see cref="P:Godot.Range.MaxValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialCenterOffset">
            <summary>
            <para>Offsets <see cref="P:Godot.TextureProgress.TextureProgress_"/> if <see cref="P:Godot.TextureProgress.FillMode"/> is <c>FILL_CLOCKWISE</c> or <c>FILL_COUNTER_CLOCKWISE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.NinePatchStretch">
            <summary>
            <para>If <c>true</c>, Godot treats the bar's textures like <see cref="T:Godot.NinePatchRect"/>. Use <c>stretch_margin_*</c>, like <see cref="P:Godot.TextureProgress.StretchMarginBottom"/>, to set up the nine patch's 3x3 grid. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginLeft">
            <summary>
            <para>The width of the 9-patch's left column.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginTop">
            <summary>
            <para>The height of the 9-patch's top row.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginRight">
            <summary>
            <para>The width of the 9-patch's right column.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginBottom">
            <summary>
            <para>The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="T:Godot.TextureRect">
            <summary>
            <para>Used to draw icons and sprites in a user interface. The texture's placement can be controlled with the <see cref="P:Godot.TextureRect.StretchMode"/> property. It can scale, tile, or stay centered inside its bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.ScaleOnExpand">
            <summary>
            <para>Scale to fit the node's bounding rectangle, only if <c>expand</c> is <c>true</c>. Default <c>stretch_mode</c>, for backwards compatibility. Until you set <c>expand</c> to <c>true</c>, the texture will behave like <c>STRETCH_KEEP</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Scale">
            <summary>
            <para>Scale to fit the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Tile">
            <summary>
            <para>Tile inside the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Keep">
            <summary>
            <para>The texture keeps its original size and stays in the bounding rectangle's top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepCentered">
            <summary>
            <para>The texture keeps its original size and stays centered in the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspect">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspectCentered">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspectCovered">
            <summary>
            <para>Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Texture">
            <summary>
            <para>The node's <see cref="T:Godot.Texture"/> resource.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Expand">
            <summary>
            <para>If <c>true</c>, the texture scales to fit its bounding rectangle. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.StretchMode">
            <summary>
            <para>Controls the texture's behavior when resizing the node's bounding rectangle. See <see cref="T:Godot.TextureRect.StretchModeEnum"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Theme">
            <summary>
            <para>Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any <see cref="T:Godot.Control"/>, and it and its children will automatically use it.</para>
            <para>Theme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.</para>
            </summary>
        </member>
        <member name="P:Godot.Theme.DefaultFont">
            <summary>
            <para>The theme's default font.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetIcon(System.String,System.String,Godot.Texture)">
            <summary>
            <para>Sets Theme's icon <see cref="T:Godot.Texture"/> to <c>texture</c> at <c>name</c> in <c>type</c>.</para>
            <para>Does nothing if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIcon(System.String,System.String)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.Texture"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasIcon(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if icon <see cref="T:Godot.Texture"/> with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearIcon(System.String,System.String)">
            <summary>
            <para>Clears icon at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIconList(System.String)">
            <summary>
            <para>Returns all of the icons as a <see cref="T:System.String"/> filled with each <see cref="T:Godot.Texture"/>'s name, for use in <see cref="M:Godot.Theme.GetIcon(System.String,System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetStylebox(System.String,System.String,Godot.StyleBox)">
            <summary>
            <para>Sets Theme's <see cref="T:Godot.StyleBox"/> to <c>stylebox</c> at <c>name</c> in <c>type</c>.</para>
            <para>Does nothing if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStylebox(System.String,System.String)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.StyleBox"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasStylebox(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.StyleBox"/> with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearStylebox(System.String,System.String)">
            <summary>
            <para>Clears <see cref="T:Godot.StyleBox"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxList(System.String)">
            <summary>
            <para>Returns all of the <see cref="T:Godot.StyleBox"/>s as a <see cref="T:System.String"/> filled with each <see cref="T:Godot.StyleBox"/>'s name, for use in <see cref="M:Godot.Theme.GetStylebox(System.String,System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxTypes">
            <summary>
            <para>Returns all of the <see cref="T:Godot.StyleBox"/> types as a <see cref="T:System.String"/> filled with each <see cref="T:Godot.StyleBox"/>'s type, for use in <see cref="M:Godot.Theme.GetStylebox(System.String,System.String)"/> and/or <see cref="M:Godot.Theme.GetStyleboxList(System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetFont(System.String,System.String,Godot.Font)">
            <summary>
            <para>Sets Theme's <see cref="T:Godot.Font"/> to <c>font</c> at <c>name</c> in <c>type</c>.</para>
            <para>Does nothing if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFont(System.String,System.String)">
            <summary>
            <para>Returns the <see cref="T:Godot.Font"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasFont(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Font"/> with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearFont(System.String,System.String)">
            <summary>
            <para>Clears <see cref="T:Godot.Font"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontList(System.String)">
            <summary>
            <para>Returns all of the <see cref="T:Godot.Font"/>s as a <see cref="T:System.String"/> filled with each <see cref="T:Godot.Font"/>'s name, for use in <see cref="M:Godot.Theme.GetFont(System.String,System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetColor(System.String,System.String,Godot.Color)">
            <summary>
            <para>Sets Theme's <see cref="T:Godot.Color"/> to <c>color</c> at <c>name</c> in <c>type</c>.</para>
            <para>Does nothing if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColor(System.String,System.String)">
            <summary>
            <para>Returns the <see cref="T:Godot.Color"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasColor(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Color"/> with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearColor(System.String,System.String)">
            <summary>
            <para>Clears theme <see cref="T:Godot.Color"/> at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColorList(System.String)">
            <summary>
            <para>Returns all of the <see cref="T:Godot.Color"/>s as a <see cref="T:System.String"/> filled with each <see cref="T:Godot.Color"/>'s name, for use in <see cref="M:Godot.Theme.GetColor(System.String,System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetConstant(System.String,System.String,System.Int32)">
            <summary>
            <para>Sets Theme's constant to <c>constant</c> at <c>name</c> in <c>type</c>.</para>
            <para>Does nothing if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstant(System.String,System.String)">
            <summary>
            <para>Returns the constant at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasConstant(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if constant with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if Theme does not have <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearConstant(System.String,System.String)">
            <summary>
            <para>Clears theme constant at <c>name</c> if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstantList(System.String)">
            <summary>
            <para>Returns all of the constants as a <see cref="T:System.String"/> filled with each constant's name, for use in <see cref="M:Godot.Theme.GetConstant(System.String,System.String)"/>, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Theme.GetTypeList(System.String)">
            <summary>
            <para>Returns all of the types in <c>type</c> as a <see cref="T:System.String"/> for use in any of the get_* functions, if Theme has <c>type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.CopyDefaultTheme">
            <summary>
            <para>Sets theme values to a copy of the default theme values.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.CopyTheme(Godot.Theme)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Thread">
            <summary>
            <para>A unit of execution in a process. Can run methods on <see cref="T:Godot.Object"/>s simultaneously. The use of synchronization via <see cref="T:Godot.Mutex"/>, <see cref="T:Godot.Semaphore"/> is advised if working with shared objects.</para>
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.High">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Thread.Start(Godot.Object,System.String,System.Object,System.Int32)">
            <summary>
            <para>Starts a new <c>Thread</c> that runs "method" on object "instance" with "userdata" passed as an argument. The "priority" of the <c>Thread</c> can be changed by passing a PRIORITY_* enum.</para>
            <para>Returns OK on success, or ERR_CANT_CREATE on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.GetId">
            <summary>
            <para>Returns the current <c>Thread</c>s id, uniquely identifying it among all threads.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.IsActive">
            <summary>
            <para>Returns true if this <c>Thread</c> is currently active. An active <c>Thread</c> cannot start work on a new method but can be joined with <see cref="M:Godot.Thread.WaitToFinish"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.WaitToFinish">
            <summary>
            <para>Joins the <c>Thread</c> and waits for it to finish. Returns what the method called returned.</para>
            </summary>
        </member>
        <member name="T:Godot.TileMap">
            <summary>
            <para>Node for 2D tile-based maps. Tilemaps use a <see cref="T:Godot.TileSet"/> which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.InvalidCell">
            <summary>
            <para>Returned when a cell doesn't exist.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Square">
            <summary>
            <para>Orthogonal orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Isometric">
            <summary>
            <para>Isometric orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Custom">
            <summary>
            <para>Custom orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.TopLeft">
            <summary>
            <para>Tile origin at its top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.Center">
            <summary>
            <para>Tile origin at its center.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.BottomLeft">
            <summary>
            <para>Tile origin at its bottom-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.X">
            <summary>
            <para>Half offset on the X coordinate.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.Y">
            <summary>
            <para>Half offset on the Y coordinate.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.Disabled">
            <summary>
            <para>Half offset disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.Mode">
            <summary>
            <para>The TileMap orientation mode. Uses MODE_* constants. Default value: MODE_SQUARE.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.TileSet">
            <summary>
            <para>The assigned <see cref="T:Godot.TileSet"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellSize">
            <summary>
            <para>The TileMap's cell size.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellQuadrantSize">
            <summary>
            <para>The TileMap's quadrant size. Optimizes drawing by batching, using chunks of this size. Default value: 16.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellCustomTransform">
            <summary>
            <para>The custom <see cref="T:Godot.Transform2D"/> to be applied to the TileMap's cells.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellHalfOffset">
            <summary>
            <para>Amount to offset alternating tiles. Uses HALF_OFFSET_* constants. Default value: HALF_OFFSET_DISABLED.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellTileOrigin">
            <summary>
            <para>Position for tile origin. Uses TILE_ORIGIN_* constants. Default value: TILE_ORIGIN_TOP_LEFT.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellYSort">
            <summary>
            <para>If <c>true</c>, the TileMap's children will be drawn in order of their Y coordinate. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellClipUv">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionUseKinematic">
            <summary>
            <para>If <c>true</c>, TileMap collisions will be handled as a kinematic body. If <c>false</c>, collisions will be handled as static body. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionFriction">
            <summary>
            <para>Friction value for static body collisions (see <c>collision_use_kinematic</c>). Default value: 1.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionBounce">
            <summary>
            <para>Bounce value for static body collisions (see <c>collision_use_kinematic</c>). Default value: 0.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionLayer">
            <summary>
            <para>The collision layer(s) for all colliders in the TileMap.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionMask">
            <summary>
            <para>The collision mask(s) for all colliders in the TileMap.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.OccluderLightMask">
            <summary>
            <para>The light mask assigned to all light occluders in the TileMap. The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the given collision layer bit.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given collision layer bit is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the given collision mask bit.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given collision mask bit is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCell(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets the tile index for the cell given by a Vector2.</para>
            <para>An index of <c>-1</c> clears the cell.</para>
            <para>Optionally, the tile can also be flipped, transposed, or given autotile coordinates.</para>
            <para>Note that data such as navigation polygons and collision shapes are not immediately updated for performance reasons.</para>
            <para>If you need these to be immediately updated, you can call <see cref="M:Godot.TileMap.UpdateDirtyQuadrants"/>.</para>
            <param name="autotileCoord">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCellv(Godot.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Sets the tile index for the given cell.</para>
            <para>An index of <c>-1</c> clears the cell.</para>
            <para>Optionally, the tile can also be flipped or transposed.</para>
            <para>Note that data such as navigation polygons and collision shapes are not immediately updated for performance reasons.</para>
            <para>If you need these to be immediately updated, you can call <see cref="M:Godot.TileMap.UpdateDirtyQuadrants"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCell(System.Int32,System.Int32)">
            <summary>
            <para>Returns the tile index of the given cell. If no tile exists in the cell, returns [constant INVALID_CELL].</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCellv(Godot.Vector2)">
            <summary>
            <para>Returns the tile index of the cell given by a Vector2. If no tile exists in the cell, returns [constant INVALID_CELL].</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellXFlipped(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is flipped in the x axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellYFlipped(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is flipped in the y axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellTransposed(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is transposed, i.e. the x and y axes are swapped.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCellAutotileCoord(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileMap.FixInvalidTiles">
            <summary>
            <para>Clears cells that do not exist in the tileset.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.Clear">
            <summary>
            <para>Clears all cells.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCells">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2"/> array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from <c>-1</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCellsById(System.Int32)">
            <summary>
            <para>Returns an array of all cells with the given tile id.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedRect">
            <summary>
            <para>Returns a rectangle enclosing the used (non-empty) tiles of the map.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.MapToWorld(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the global position corresponding to the given tilemap (grid-based) coordinates.</para>
            <para>Optionally, the tilemap's half offset can be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.WorldToMap(Godot.Vector2)">
            <summary>
            <para>Returns the tilemap (grid-based) coordinates corresponding to the given local position.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateDirtyQuadrants">
            <summary>
            <para>Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskArea(Godot.Vector2)">
            <summary>
            <para>Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based x and y coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskRegion(System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            <para>Applies autotiling rules to the cells in the given region (specified by grid-based x and y coordinates).</para>
            <para>Calling with invalid (or missing) parameters applies autotiling rules for the entire tilemap.</para>
            <param name="start">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="end">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="T:Godot.TileSet">
            <summary>
            <para>A TileSet is a library of tiles for a <see cref="T:Godot.TileMap"/>. It contains a list of tiles, each consisting of a sprite and optional collision shapes.</para>
            <para>Tiles are referenced by a unique integer ID.</para>
            </summary>
        </member>
        <member name="F:Godot.TileSet.TileMode.SingleTile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.TileMode.AutoTile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.TileMode.AtlasTile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Topleft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Topright">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Bottomleft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.AutotileBindings.Bottomright">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.BitmaskMode.Bitmask2x2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.BitmaskMode.Bitmask3x3Minimal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TileSet.BitmaskMode.Bitmask3x3">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileSet._ForwardSubtileSelection(System.Int32,System.Int32,Godot.Object,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileSet._IsTileBound(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileSet.CreateTile(System.Int32)">
            <summary>
            <para>Creates a new tile with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileClearBitmaskMap(System.Int32)">
            <summary>
            <para>Clears all bitmask info of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetIconCoordinate(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the subtile that will be used as an icon in an atlas/autotile given its coordinates.</para>
            <para>The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask info is incomplete. It will also be used to represent it in the TileSet editor.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetIconCoordinate(System.Int32)">
            <summary>
            <para>Returns the subtile that's being used as an icon in an atlas/autotile given its coordinates.</para>
            <para>The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask info is incomplete. It will also be used to represent it in the TileSet editor.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSubtilePriority(System.Int32,Godot.Vector2,System.Int32)">
            <summary>
            <para>Sets the priority of the subtile from an autotile given its coordinates.</para>
            <para>When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSubtilePriority(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the priority of the subtile from an autotile given its coordinates.</para>
            <para>When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetZIndex(System.Int32,Godot.Vector2,System.Int32)">
            <summary>
            <para>Sets the drawing index of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetZIndex(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the drawing index of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetLightOccluder(System.Int32,Godot.OccluderPolygon2D,Godot.Vector2)">
            <summary>
            <para>Sets the light occluder of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetLightOccluder(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the light occluder of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetNavigationPolygon(System.Int32,Godot.NavigationPolygon,Godot.Vector2)">
            <summary>
            <para>Sets the navigation polygon of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetNavigationPolygon(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the navigation polygon of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetBitmask(System.Int32,Godot.Vector2,System.Int32)">
            <summary>
            <para>Sets the bitmask of the subtile from an autotile given its coordinates.</para>
            <para>The value is the sum of the values in <see cref="T:Godot.TileSet.AutotileBindings"/> present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetBitmask(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the bitmask of the subtile from an autotile given its coordinates.</para>
            <para>The value is the sum of the values in <see cref="T:Godot.TileSet.AutotileBindings"/> present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetBitmaskMode(System.Int32,Godot.TileSet.BitmaskMode)">
            <summary>
            <para>Sets the <see cref="T:Godot.TileSet.BitmaskMode"/> of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetBitmaskMode(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.TileSet.BitmaskMode"/> of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSpacing(System.Int32,System.Int32)">
            <summary>
            <para>Sets the spacing between subtiles of the atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSpacing(System.Int32)">
            <summary>
            <para>Returns the spacing between subtiles of the atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSize(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the size of the subtiles in an atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSize(System.Int32)">
            <summary>
            <para>Returns the size of the subtiles in an atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetName(System.Int32,System.String)">
            <summary>
            <para>Sets the tile's name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetName(System.Int32)">
            <summary>
            <para>Returns the tile's name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTexture(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the tile's texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTexture(System.Int32)">
            <summary>
            <para>Returns the tile's texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNormalMap(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the tile's normal map texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNormalMap(System.Int32)">
            <summary>
            <para>Returns the tile's normal map texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetMaterial(System.Int32,Godot.ShaderMaterial)">
            <summary>
            <para>Sets the tile's material.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetMaterial(System.Int32)">
            <summary>
            <para>Returns the tile's material.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetModulate(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the tile's modulation color.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetModulate(System.Int32)">
            <summary>
            <para>Returns the tile's modulation color.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTextureOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the tile's texture offset.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTextureOffset(System.Int32)">
            <summary>
            <para>Returns the texture offset of the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetRegion(System.Int32,Godot.Rect2)">
            <summary>
            <para>Sets the tile's sub-region in the texture. This is common in texture atlases.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetRegion(System.Int32)">
            <summary>
            <para>Returns the tile sub-region in the texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShape(System.Int32,System.Int32,Godot.Shape2D)">
            <summary>
            <para>Sets a shape for the tile, enabling collision.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShape(System.Int32,System.Int32)">
            <summary>
            <para>Returns a tile's given shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOffset(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the offset of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOffset(System.Int32,System.Int32)">
            <summary>
            <para>Returns the offset of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeTransform(System.Int32,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets a <see cref="T:Godot.Transform2D"/> on a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeTransform(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOneWay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Enables one-way collision on a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOneWay(System.Int32,System.Int32)">
            <summary>
            <para>Returns the one-way collision value of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOneWayMargin(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOneWayMargin(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileAddShape(System.Int32,Godot.Shape2D,Godot.Transform2D,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a shape to the tile.</para>
            <param name="autotileCoord">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeCount(System.Int32)">
            <summary>
            <para>Returns the number of shapes assigned to a tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapes(System.Int32,Godot.Collections.Array)">
            <summary>
            <para>Sets an array of shapes for the tile, enabling collision.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapes(System.Int32)">
            <summary>
            <para>Returns an array of the tile's shapes.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTileMode(System.Int32,Godot.TileSet.TileMode)">
            <summary>
            <para>Sets the tile's <see cref="T:Godot.TileSet.TileMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTileMode(System.Int32)">
            <summary>
            <para>Returns the tile's <see cref="T:Godot.TileSet.TileMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygon(System.Int32,Godot.NavigationPolygon)">
            <summary>
            <para>Sets the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygon(System.Int32)">
            <summary>
            <para>Returns the navigation polygon of the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygonOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets an offset for the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygonOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetLightOccluder(System.Int32,Godot.OccluderPolygon2D)">
            <summary>
            <para>Sets a light occluder for the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetLightOccluder(System.Int32)">
            <summary>
            <para>Returns the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetOccluderOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets an offset for the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetOccluderOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetZIndex(System.Int32,System.Int32)">
            <summary>
            <para>Sets the tile's drawing index.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetZIndex(System.Int32)">
            <summary>
            <para>Returns the tile's z-index (drawing layer).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.RemoveTile(System.Int32)">
            <summary>
            <para>Removes the given tile ID.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.Clear">
            <summary>
            <para>Clears all tiles.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetLastUnusedTileId">
            <summary>
            <para>Returns the ID following the last currently used ID, useful when creating a new tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.FindTileByName(System.String)">
            <summary>
            <para>Returns the first tile matching the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetTilesIds">
            <summary>
            <para>Returns an array of all currently used tile IDs.</para>
            </summary>
        </member>
        <member name="T:Godot.Timer">
            <summary>
            <para>Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one shot" mode.</para>
            </summary>
        </member>
        <member name="F:Godot.Timer.TimerProcessMode.Physics">
            <summary>
            <para>Update the timer during the physics step at each frame (fixed framerate processing).</para>
            </summary>
        </member>
        <member name="F:Godot.Timer.TimerProcessMode.Idle">
            <summary>
            <para>Update the timer during the idle time at each frame.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.ProcessMode">
            <summary>
            <para>Processing mode. See <see cref="T:Godot.Timer.TimerProcessMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.WaitTime">
            <summary>
            <para>Wait time in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.OneShot">
            <summary>
            <para>If <c>true</c>, the timer will stop when reaching 0. If <c>false</c>, it will restart. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.Autostart">
            <summary>
            <para>If <c>true</c>, the timer will automatically start when entering the scene tree. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.Paused">
            <summary>
            <para>If <c>true</c>, the timer is paused and will not process until it is unpaused again, even if <see cref="M:Godot.Timer.Start(System.Single)"/> is called.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.TimeLeft">
            <summary>
            <para>The timer's remaining time in seconds. Returns 0 if the timer is inactive.</para>
            <para>Note: You cannot set this value. To change the timer's remaining time, use <see cref="P:Godot.Timer.WaitTime"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.Start(System.Single)">
            <summary>
            <para>Starts the timer. Sets <c>wait_time</c> to <c>time_sec</c> if <c>time_sec &gt; 0</c>. This also resets the remaining time to <c>wait_time</c>.</para>
            <para>Note: this method will not resume a paused timer. See <see cref="P:Godot.Timer.Paused"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.Stop">
            <summary>
            <para>Stops the timer.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.IsStopped">
            <summary>
            <para>Returns <c>true</c> if the timer is stopped.</para>
            </summary>
        </member>
        <member name="T:Godot.ToolButton">
            <summary>
            <para>This is a helper class to generate a flat <see cref="T:Godot.Button"/> (see <see cref="P:Godot.Button.Flat"/>), creating a <c>ToolButton</c> is equivalent to:</para>
            <para><code>
            var btn = Button.new()
            btn.flat = true
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.TouchScreenButton">
            <summary>
            <para>Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.</para>
            </summary>
        </member>
        <member name="F:Godot.TouchScreenButton.VisibilityModeEnum.Always">
            <summary>
            <para>Always visible.</para>
            </summary>
        </member>
        <member name="F:Godot.TouchScreenButton.VisibilityModeEnum.TouchscreenOnly">
            <summary>
            <para>Visible on touch screens only.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Normal">
            <summary>
            <para>The button's texture for the normal state.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Pressed">
            <summary>
            <para>The button's texture for the pressed state.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Bitmask">
            <summary>
            <para>The button's bitmask.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Shape">
            <summary>
            <para>The button's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeCentered">
            <summary>
            <para>If <c>true</c>, the button's shape is centered.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeVisible">
            <summary>
            <para>If <c>true</c>, the button's shape is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.PassbyPress">
            <summary>
            <para>If <c>true</c>, passby presses are enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Action">
            <summary>
            <para>The button's action. Actions can be handled with <see cref="T:Godot.InputEventAction"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.VisibilityMode">
            <summary>
            <para>The button's visibility mode. See <c>VISIBILITY_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.TouchScreenButton.IsPressed">
            <summary>
            <para>Returns <c>true</c> if this button is currently pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.Translation">
            <summary>
            <para>Translations are resources that can be loaded/unloaded on demand. They map a string to another string.</para>
            </summary>
        </member>
        <member name="P:Godot.Translation.Locale">
            <summary>
            <para>The locale of the translation.</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.AddMessage(System.String,System.String)">
            <summary>
            <para>Adds a message if nonexistent, followed by its translation.</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessage(System.String)">
            <summary>
            <para>Returns a message's translation.</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.EraseMessage(System.String)">
            <summary>
            <para>Erases a message.</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessageList">
            <summary>
            <para>Returns all the messages (keys).</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessageCount">
            <summary>
            <para>Returns the number of existing messages.</para>
            </summary>
        </member>
        <member name="T:Godot.TranslationServer">
            <summary>
            <para>Server that manages all translations. Translations can be set to it and removed from it.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.SetLocale(System.String)">
            <summary>
            <para>Sets the locale of the game.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocale">
            <summary>
            <para>Returns the current locale of the game.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocaleName(System.String)">
            <summary>
            <para>Returns a locale's language and its variant (e.g. "en_US" would return "English (United States)").</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Translate(System.String)">
            <summary>
            <para>Returns the current locale's translation for the given message (key).</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.AddTranslation(Godot.Translation)">
            <summary>
            <para>Adds a <see cref="T:Godot.Translation"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.RemoveTranslation(Godot.Translation)">
            <summary>
            <para>Removes the given translation from the server.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Clear">
            <summary>
            <para>Clears the server from all translations.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree">
            <summary>
            <para>This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.</para>
            <para>Trees are built via code, using <see cref="T:Godot.TreeItem"/> objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.</para>
            <para><code>
            func _ready():
                var tree = Tree.new()
                var root = tree.create_item()
                tree.set_hide_root(true)
                var child1 = tree.create_item(root)
                var child2 = tree.create_item(root)
                var subchild1 = tree.create_item(child1)
                subchild1.set_text(0, "Subchild1")
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Single">
            <summary>
            <para>Allow selection of a single item at a time.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Row">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Multi">
            <summary>
            <para>Allow selection of multiple items at the same time.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.OnItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.Inbetween">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Tree.Columns">
            <summary>
            <para>The amount of columns.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowReselect">
            <summary>
            <para>If <c>true</c>, the currently selected cell may be selected again.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowRmbSelect">
            <summary>
            <para>If <c>true</c>, a right mouse button click can select items.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.HideFolding">
            <summary>
            <para>If <c>true</c>, the folding arrow is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.HideRoot">
            <summary>
            <para>If <c>true</c>, the tree's root is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.DropModeFlags">
            <summary>
            <para>The drop mode as an OR combination of flags. See <c>DROP_MODE_*</c> constants. Once dropping is done, reverts to <c>DROP_MODE_DISABLED</c>. Setting this during <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> is recommended.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.SelectMode">
            <summary>
            <para>Allow single or multiple selection. See the <c>SELECT_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.Clear">
            <summary>
            <para>Clears the tree. This removes all items.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.CreateItem(Godot.Object,System.Int32)">
            <summary>
            <para>Create an item in the tree and add it as the last child of <c>parent</c>. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetRoot">
            <summary>
            <para>Returns the tree's root item.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnMinWidth(System.Int32,System.Int32)">
            <summary>
            <para>Set the minimum width of a column.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnExpand(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the column will have the "Expand" flag of <see cref="T:Godot.Control"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnWidth(System.Int32)">
            <summary>
            <para>Returns the column's width in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetNextSelected(Godot.Object)">
            <summary>
            <para>Returns the next selected item after the given one.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelected">
            <summary>
            <para>Returns the currently selected item.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelectedColumn">
            <summary>
            <para>Returns the current selection's column.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetPressedButton">
            <summary>
            <para>Returns the last pressed button's index.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEdited">
            <summary>
            <para>Returns the currently edited item. This is only available for custom cell mode.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEditedColumn">
            <summary>
            <para>Returns the column for the currently edited item. This is only available for custom cell mode.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetCustomPopupRect">
            <summary>
            <para>Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See <see cref="M:Godot.TreeItem.SetCellMode(System.Int32,Godot.TreeItem.TreeCellMode)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAreaRect(Godot.Object,System.Int32)">
            <summary>
            <para>Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAtPosition(Godot.Vector2)">
            <summary>
            <para>Returns the tree item at the specified position (relative to the tree origin position).</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnAtPosition(Godot.Vector2)">
            <summary>
            <para>Returns the column index under the given point.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetDropSectionAtPosition(Godot.Vector2)">
            <summary>
            <para>If <see cref="P:Godot.Tree.DropModeFlags"/> includes <c>DROP_MODE_INBETWEEN</c>, returns -1 if <c>position</c> is the upper part of a tree item at that position, 1 for the lower part, and additionally 0 for the middle part if <see cref="P:Godot.Tree.DropModeFlags"/> includes <c>DROP_MODE_ON_ITEM</c>.</para>
            <para>Otherwise, returns 0. If there are no tree item at <c>position</c>, returns -100.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.EnsureCursorIsVisible">
            <summary>
            <para>Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitlesVisible(System.Boolean)">
            <summary>
            <para>If <c>true</c>, column titles are visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.AreColumnTitlesVisible">
            <summary>
            <para>Returns <c>true</c> if the column titles are being shown.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitle(System.Int32,System.String)">
            <summary>
            <para>Set the title of a column.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitle(System.Int32)">
            <summary>
            <para>Returns the column's title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetScroll">
            <summary>
            <para>Returns the current scrolling position.</para>
            </summary>
        </member>
        <member name="T:Godot.TreeItem">
            <summary>
            <para>Control for a single item inside a <see cref="T:Godot.Tree"/>. May have child <c>TreeItem</c>s and be styled as well as contain buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.String">
            <summary>
            <para>Cell contains a string.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Check">
            <summary>
            <para>Cell can be checked.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Range">
            <summary>
            <para>Cell contains a range.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Icon">
            <summary>
            <para>Cell contains an icon.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Left">
            <summary>
            <para>Align text to the left. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Center">
            <summary>
            <para>Center text. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Right">
            <summary>
            <para>Align text to the right. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.Collapsed">
            <summary>
            <para>If <c>true</c>, the TreeItem is collapsed.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.DisableFolding">
            <summary>
            <para>If <c>true</c>, folding is disabled for this TreeItem.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.CustomMinimumHeight">
            <summary>
            <para>The custom minimum height.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCellMode(System.Int32,Godot.TreeItem.TreeCellMode)">
            <summary>
            <para>Sets the given column's cell mode to <c>mode</c>. See <c>CELL_MODE_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCellMode(System.Int32)">
            <summary>
            <para>Returns the column's cell mode. See <c>CELL_MODE_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetChecked(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the column <c>column</c> is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsChecked(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given column is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetText(System.Int32,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetText(System.Int32)">
            <summary>
            <para>Returns the given column's text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIcon(System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the given column's icon <see cref="T:Godot.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIcon(System.Int32)">
            <summary>
            <para>Returns the given column's icon <see cref="T:Godot.Texture"/>. Error if no icon is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            <para>Sets the given column's icon's texture region.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconRegion(System.Int32)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.Texture"/> region as <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconMaxWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the given column's icon's maximum width.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconMaxWidth(System.Int32)">
            <summary>
            <para>Returns the column's icon's maximum width.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetRange(System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetRange(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetRangeConfig(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetRangeConfig(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetMetadata(System.Int32,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetMetadata(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomDraw(System.Int32,Godot.Object,System.String)">
            <summary>
            <para>Sets the given column's custom draw callback to <c>callback</c> method on <c>object</c>.</para>
            <para>The <c>callback</c> should accept two arguments: the <see cref="T:Godot.TreeItem"/> that is drawn and its position and size as a <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNext">
            <summary>
            <para>Returns the next TreeItem in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrev">
            <summary>
            <para>Returns the previous TreeItem in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetParent">
            <summary>
            <para>Returns the parent TreeItem.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetChildren">
            <summary>
            <para>Returns the TreeItem's child items.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNextVisible">
            <summary>
            <para>Returns the next visible TreeItem in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrevVisible">
            <summary>
            <para>Returns the previous visible TreeItem in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.RemoveChild(Godot.Object)">
            <summary>
            <para>Removes the given child TreeItem.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetSelectable(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the given column is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelectable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelected(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is selected.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Select(System.Int32)">
            <summary>
            <para>Selects the column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Deselect(System.Int32)">
            <summary>
            <para>Deselects the given column.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetEditable(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, column <c>column</c> is editable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsEditable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is editable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the given column's custom color.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomColor(System.Int32)">
            <summary>
            <para>Resets the color for the given column to default.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomBgColor(System.Int32,Godot.Color,System.Boolean)">
            <summary>
            <para>Sets the given column's custom background color and whether to just use it as an outline.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomBgColor(System.Int32)">
            <summary>
            <para>Resets the background color for the given column to default.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCustomBgColor(System.Int32)">
            <summary>
            <para>Returns the custom background color of column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomAsButton(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsCustomSetAsButton(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.TreeItem.AddButton(System.Int32,Godot.Texture,System.Int32,System.Boolean,System.String)">
            <summary>
            <para>Adds a button with <see cref="T:Godot.Texture"/> <c>button</c> at column <c>column</c>. The <c>button_idx</c> index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling <see cref="M:Godot.TreeItem.GetButtonCount(System.Int32)"/> immediately after this method. Optionally, the button can be <c>disabled</c> and have a <c>tooltip</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButtonCount(System.Int32)">
            <summary>
            <para>Returns the number of buttons in column <c>column</c>. May be used to get the most recently added button's index, if no index was specified.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButton(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture"/> of the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetButton(System.Int32,System.Int32,Godot.Texture)">
            <summary>
            <para>Sets the given column's button <see cref="T:Godot.Texture"/> at index <c>button_idx</c> to <c>button</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.EraseButton(System.Int32,System.Int32)">
            <summary>
            <para>Removes the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsButtonDisabled(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the button at index <c>button_idx</c> for the given column is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetExpandRight(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, column <c>column</c> is expanded to the right.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetExpandRight(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if <c>expand_right</c> is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTooltip(System.Int32,System.String)">
            <summary>
            <para>Sets the given column's tooltip text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTooltip(System.Int32)">
            <summary>
            <para>Returns the given column's tooltip.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTextAlign(System.Int32,Godot.TreeItem.TextAlign)">
            <summary>
            <para>Sets the given column's text alignment. See <c>ALIGN_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTextAlign(System.Int32)">
            <summary>
            <para>Returns the given column's text alignment.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToTop">
            <summary>
            <para>Moves this TreeItem to the top in the <see cref="T:Godot.Tree"/> hierarchy.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToBottom">
            <summary>
            <para>Moves this TreeItem to the bottom in the <see cref="T:Godot.Tree"/> hierarchy.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween">
            <summary>
            <para>Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name *tween* comes from *in-betweening*, an animation technique where you specify *keyframes* and the computer interpolates the frames that appear between them.</para>
            <para>Here is a brief usage example that causes a 2D node to move smoothly between two positions:</para>
            <para><code>
            var tween = get_node("Tween")
            tween.interpolate_property($Node2D, "position",
                    Vector2(0, 0), Vector2(100, 100), 1,
                    Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
            tween.start()
            </code></para>
            <para>Many methods require a property name, such as "position" above. You can find the correct property name by hovering over the property in the Inspector. You can also provide the components of a property directly by using "property:component" (eg. <c>position:x</c>), where it would only apply to that particular component.</para>
            <para>Many of the methods accept <c>trans_type</c> and <c>ease_type</c>. The first accepts an <see cref="T:Godot.Tween.TransitionType"/> constant, and refers to the way the timing of the animation is handled (see <c>http://easings.net/</c> for some examples). The second accepts an <see cref="T:Godot.Tween.EaseType"/> constant, and controls the where <c>trans_type</c> is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different <see cref="T:Godot.Tween.TransitionType"/> constants with <c>EASE_IN_OUT</c>, and use the one that looks best.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Linear">
            <summary>
            <para>The animation is interpolated linearly.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Sine">
            <summary>
            <para>The animation is interpolated using a sine function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quint">
            <summary>
            <para>The animation is interpolated with a quintic (to the power of 5) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quart">
            <summary>
            <para>The animation is interpolated with a quartic (to the power of 4) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quad">
            <summary>
            <para>The animation is interpolated with a quadratic (to the power of 2) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Expo">
            <summary>
            <para>The animation is interpolated with an exponential (to the power of x) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Elastic">
            <summary>
            <para>The animation is interpolated with elasticity, wiggling around the edges.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Cubic">
            <summary>
            <para>The animation is interpolated with a cubic (to the power of 3) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Circ">
            <summary>
            <para>The animation is interpolated with a function using square roots.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Bounce">
            <summary>
            <para>The animation is interpolated by bouncing at the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Back">
            <summary>
            <para>The animation is interpolated backing out at ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TweenProcessMode.Physics">
            <summary>
            <para>The tween updates with the <c>_physics_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TweenProcessMode.Idle">
            <summary>
            <para>The tween updates with the <c>_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.In">
            <summary>
            <para>The interpolation starts slowly and speeds up towards the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.Out">
            <summary>
            <para>The interpolation starts quickly and slows down towards the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.InOut">
            <summary>
            <para>A combination of EASE_IN and EASE_OUT. The interpolation is slowest at both ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.OutIn">
            <summary>
            <para>A combination of EASE_IN and EASE_OUT. The interpolation is fastest at both ends.</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.Repeat">
            <summary>
            <para>If <c>true</c>, the tween loops.</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackProcessMode">
            <summary>
            <para>The tween's animation process thread. See <see cref="T:Godot.Tween.TweenProcessMode"/>. Default value: [constant TWEEN_PROCESS_IDLE].</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackSpeed">
            <summary>
            <para>The tween's speed multiplier. For example, set it to <c>1.0</c> for normal speed, <c>2.0</c> for two times normal speed, or <c>0.5</c> for half of the normal speed. A value of <c>0</c> pauses the animation, but see also <see cref="M:Godot.Tween.SetActive(System.Boolean)"/> or <see cref="M:Godot.Tween.StopAll"/> for this.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.IsActive">
            <summary>
            <para>Returns <c>true</c> if any tweens are currently running. Note that this method doesn't consider tweens that have ended.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.SetActive(System.Boolean)">
            <summary>
            <para>Activates/deactivates the tween. See also <see cref="M:Godot.Tween.StopAll"/> and <see cref="M:Godot.Tween.ResumeAll"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Start">
            <summary>
            <para>Starts the tween. You can define animations both before and after this.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Reset(Godot.Object,System.String)">
            <summary>
            <para>Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless <c>key</c> is specified.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.ResetAll">
            <summary>
            <para>Resets all tweens to their initial values (the ones given, not those before the tween).</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Stop(Godot.Object,System.String)">
            <summary>
            <para>Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless <c>key</c> is specified.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.StopAll">
            <summary>
            <para>Stops animating all tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Resume(Godot.Object,System.String)">
            <summary>
            <para>Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless <c>key</c> is specified.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.ResumeAll">
            <summary>
            <para>Continues animating all stopped tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Remove(Godot.Object,System.String)">
            <summary>
            <para>Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless <c>key</c> is specified.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.RemoveAll">
            <summary>
            <para>Stops animation and removes all tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Seek(System.Single)">
            <summary>
            <para>Sets the interpolation to the given <c>time</c> in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Tell">
            <summary>
            <para>Returns the current time of the tween.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.GetRuntime">
            <summary>
            <para>Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateProperty(Godot.Object,Godot.NodePath,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>property</c> of <c>object</c> from <c>initial_val</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Setting the initial value to <c>null</c> uses the current value of the property.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateMethod(Godot.Object,System.String,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>method</c> of <c>object</c> from <c>initial_val</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Methods are called with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Calls <c>callback</c> of <c>object</c> after <c>duration</c>. <c>arg1</c>-<c>arg5</c> are arguments to be passed to the callback.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateDeferredCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Calls <c>callback</c> of <c>object</c> after <c>duration</c> on the main thread (similar to <see cref="M:Godot.Object.CallDeferred(System.String,System.Object[])"/>). <c>arg1</c>-<c>arg5</c> are arguments to be passed to the callback.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowProperty(Godot.Object,Godot.NodePath,System.Object,Godot.Object,Godot.NodePath,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Follows <c>property</c> of <c>object</c> and applies it on <c>target_property</c> of <c>target</c>, beginning from <c>initial_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowMethod(Godot.Object,System.String,System.Object,Godot.Object,System.String,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Follows <c>method</c> of <c>object</c> and applies the returned value on <c>target_method</c> of <c>target</c>, beginning from <c>initial_val</c> for <c>duration</c> seconds, <c>delay</c> later. Methods are called with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingProperty(Godot.Object,Godot.NodePath,Godot.Object,Godot.NodePath,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>property</c> of <c>object</c> from the current value of the <c>initial_val</c> property of <c>initial</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingMethod(Godot.Object,System.String,Godot.Object,System.String,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>method</c> of <c>object</c> from the value returned by <c>initial_method</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Methods are animated by calling them with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information</para>
            </summary>
        </member>
        <member name="T:Godot.UndoRedo">
            <summary>
            <para>Helper to manage UndoRedo in the editor or custom tools. It works by registering methods and property changes inside 'actions'.</para>
            <para>Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.</para>
            <para>Here's an example on how to add an action to Godot editor's own 'undoredo':</para>
            <para><code>
            var undo_redo = get_undo_redo() # Method of EditorPlugin.
            
            func do_something():
                pass # Put your code here.
            
            func undo_something():
                pass # Put here the code that reverts what's done by "do_something()".
            
            func _on_MyButton_pressed():
                var node = get_node("MyNode2D")
                undo_redo.create_action("Move the node")
                undo_redo.add_do_method(self, "do_something")
                undo_redo.add_undo_method(self, "undo_something")
                undo_redo.add_do_property(node, "position", Vector2(100,100))
                undo_redo.add_undo_property(node, "position", node.position)
                undo_redo.commit_action()
            </code></para>
            <para><see cref="M:Godot.UndoRedo.CreateAction(System.String,Godot.UndoRedo.MergeMode)"/>, <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,System.String,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,System.String,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddDoProperty(Godot.Object,System.String,System.Object)"/>, <see cref="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,System.String,System.Object)"/>, and <see cref="M:Godot.UndoRedo.CommitAction"/> should be called one after the other, like in the example. Not doing so could lead to crashes.</para>
            <para>If you don't need to register a method you can leave <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,System.String,System.Object[])"/> and <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,System.String,System.Object[])"/> out, and so it goes for properties. You can register more than one method/property.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.Disable">
            <summary>
            <para>Makes <c>do</c>/<c>undo</c> operations stay in separate actions.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.Ends">
            <summary>
            <para>Makes so that the action's <c>do</c> operation is from the first action created and the <c>undo</c> operation is from the last subsequent action with the same name.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.All">
            <summary>
            <para>Makes subsequent actions with the same name be merged into one.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CreateAction(System.String,Godot.UndoRedo.MergeMode)">
            <summary>
            <para>Create a new action. After this is called, do all your calls to <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,System.String,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,System.String,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddDoProperty(Godot.Object,System.String,System.Object)"/>, and <see cref="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,System.String,System.Object)"/>, then commit the action with <see cref="M:Godot.UndoRedo.CommitAction"/>.</para>
            <para>The way actions are merged is dictated by the <c>merge_mode</c> argument. See <see cref="T:Godot.UndoRedo.MergeMode"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CommitAction">
            <summary>
            <para>Commit the action. All 'do' methods/properties are called/set when this function is called.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.IsCommitingAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoMethod(Godot.Object,System.String,System.Object[])">
            <summary>
            <para>Register a method that will be called when the action is committed.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,System.String,System.Object[])">
            <summary>
            <para>Register a method that will be called when the action is undone.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoProperty(Godot.Object,System.String,System.Object)">
            <summary>
            <para>Register a property value change for 'do'.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,System.String,System.Object)">
            <summary>
            <para>Register a property value change for 'undo'.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoReference(Godot.Object)">
            <summary>
            <para>Register a reference for 'do' that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoReference(Godot.Object)">
            <summary>
            <para>Register a reference for 'undo' that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.ClearHistory(System.Boolean)">
            <summary>
            <para>Clear the undo/redo history and associated references.</para>
            <para>Passing <c>false</c> to <c>increase_version</c> will prevent the version number to be increased from this.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetCurrentActionName">
            <summary>
            <para>Get the name of the current action.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetVersion">
            <summary>
            <para>Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.</para>
            <para>This is useful mostly to check if something changed from a saved version.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Redo">
            <summary>
            <para>Redo last action.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Undo">
            <summary>
            <para>Undo last action.</para>
            </summary>
        </member>
        <member name="T:Godot.UPNP">
            <summary>
            <para>Provides UPNP functionality to discover <see cref="T:Godot.UPNPDevice"/>s on the local network and execute commands on them, like managing port mappings (port forwarding) and querying the local and remote network IP address. Note that methods on this class are synchronous and block the calling thread.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.Success">
            <summary>
            <para>UPNP command or discovery was successful.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NotAuthorized">
            <summary>
            <para>Not authorized to use the command on the <see cref="T:Godot.UPNPDevice"/>. May be returned when the user disabled UPNP on their router.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.PortMappingNotFound">
            <summary>
            <para>No port mapping was found for the given port, protocol combination on the given <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InconsistentParameters">
            <summary>
            <para>Inconsistent parameters.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoSuchEntryInArray">
            <summary>
            <para>No such entry in array. May be returned if a given port, protocol combination is not found on an <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ActionFailed">
            <summary>
            <para>The action failed.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SrcIpWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the source IP address.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ExtPortWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the external port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.IntPortWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the internal port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.RemoteHostMustBeWildcard">
            <summary>
            <para>The remote host value must be a wildcard.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ExtPortMustBeWildcard">
            <summary>
            <para>The external port value must be a wildcard.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoPortMapsAvailable">
            <summary>
            <para>No port maps are available. May also be returned if port mapping functionality is not available.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ConflictWithOtherMechanism">
            <summary>
            <para>Conflict with other mechanism. May be returned instead of <c>UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING</c> if a port mapping conflicts with an existing one.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ConflictWithOtherMapping">
            <summary>
            <para>Conflict with an existing port mapping.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SamePortValuesRequired">
            <summary>
            <para>External and internal port values must be the same.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.OnlyPermanentLeaseSupported">
            <summary>
            <para>Only permanent leases are supported. Do not use the <c>duration</c> parameter when adding port mappings.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidGateway">
            <summary>
            <para>Invalid gateway.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidPort">
            <summary>
            <para>Invalid port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidProtocol">
            <summary>
            <para>Invalid protocol.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidDuration">
            <summary>
            <para>Invalid duration.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidArgs">
            <summary>
            <para>Invalid arguments.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidResponse">
            <summary>
            <para>Invalid response.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidParam">
            <summary>
            <para>Invalid parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.HttpError">
            <summary>
            <para>HTTP error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SocketError">
            <summary>
            <para>Socket error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.MemAllocError">
            <summary>
            <para>Error allocating memory.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoGateway">
            <summary>
            <para>No gateway available. You may need to call <see cref="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)"/> first, or discovery didn't detect any valid IGDs (InternetGatewayDevices).</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoDevices">
            <summary>
            <para>No devices available. You may need to call <see cref="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)"/> first, or discovery didn't detect any valid <see cref="T:Godot.UPNPDevice"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.UnknownError">
            <summary>
            <para>Unknown error.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverMulticastIf">
            <summary>
            <para>Multicast interface to use for discovery. Uses the default multicast interface if empty.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverLocalPort">
            <summary>
            <para>If <c>0</c>, the local port to use for discovery is chosen automatically by the system. If <c>1</c>, discovery will be done from the source port 1900 (same as destination port). Otherwise, the value will be used as the port.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverIpv6">
            <summary>
            <para>If <c>true</c>, IPv6 is used for <see cref="T:Godot.UPNPDevice"/> discovery.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetDeviceCount">
            <summary>
            <para>Returns the number of discovered <see cref="T:Godot.UPNPDevice"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetDevice(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.UPNPDevice"/> at the given <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.AddDevice(Godot.UPNPDevice)">
            <summary>
            <para>Adds the given <see cref="T:Godot.UPNPDevice"/> to the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.SetDevice(System.Int32,Godot.UPNPDevice)">
            <summary>
            <para>Sets the device at <c>index</c> from the list of discovered devices to <c>device</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.RemoveDevice(System.Int32)">
            <summary>
            <para>Removes the device at <c>index</c> from the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.ClearDevices">
            <summary>
            <para>Clears the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetGateway">
            <summary>
            <para>Returns the default gateway. That is the first discovered <see cref="T:Godot.UPNPDevice"/> that is also a valid IGD (InternetGatewayDevice).</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Discovers local <see cref="T:Godot.UPNPDevice"/>s. Clears the list of previously discovered devices.</para>
            <para>Filters for IGD (InternetGatewayDevice) type devices by default, as those manage port forwarding. <c>timeout</c> is the time to wait for responses in milliseconds. <c>ttl</c> is the time-to-live; only touch this if you know what you're doing.</para>
            <para>See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.QueryExternalAddress">
            <summary>
            <para>Returns the external <see cref="T:Godot.IP"/> address of the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) as string. Returns an empty string on error.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            <para>Adds a mapping to forward the external <c>port</c> (between 1 and 65535) on the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) to the <c>internal_port</c> on the local machine for the given protocol <c>proto</c> (either <c>TCP</c> or <c>UDP</c>, with UDP being the default). If a port mapping for the given port and protocol combination already exists on that gateway device, this method tries to overwrite it. If that is not desired, you can retrieve the gateway manually with <see cref="M:Godot.UPNP.GetGateway"/> and call <see cref="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)"/> on it, if any.</para>
            <para>If <c>internal_port</c> is <c>0</c> (the default), the same port number is used for both the external and the internal port (the <c>port</c> value).</para>
            <para>The description (<c>desc</c>) is shown in some router UIs and can be used to point out which application added the mapping, and the lifetime of the mapping can be limited by <c>duration</c>. However, some routers are incompatible with one or both of these, so use with caution and add fallback logic in case of errors to retry without them if in doubt.</para>
            <para>See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.DeletePortMapping(System.Int32,System.String)">
            <summary>
            <para>Deletes the port mapping for the given port and protocol combination on the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) if one exists. <c>port</c> must be a valid port between 1 and 65535, <c>proto</c> can be either <c>TCP</c> or <c>UDP</c>. See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="T:Godot.UPNPDevice">
            <summary>
            <para>UPNP device. See <see cref="T:Godot.UPNP"/> for UPNP discovery and utility functions. Provides low-level access to UPNP control commands. Allows to manage port mappings (port forwarding) and to query network information of the device (like local and external IP address and status). Note that methods on this class are synchronous and block the calling thread.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.Ok">
            <summary>
            <para>OK.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.HttpError">
            <summary>
            <para>HTTP error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.HttpEmpty">
            <summary>
            <para>Empty HTTP response.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.NoUrls">
            <summary>
            <para>Returned response contained no URLs.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.NoIgd">
            <summary>
            <para>Not a valid IGD.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.Disconnected">
            <summary>
            <para>Disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.UnknownDevice">
            <summary>
            <para>Unknown device.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.InvalidControl">
            <summary>
            <para>Invalid control.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.MallocError">
            <summary>
            <para>Memory allocation error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.UnknownError">
            <summary>
            <para>Unknown error.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.DescriptionUrl">
            <summary>
            <para>URL to the device description.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.ServiceType">
            <summary>
            <para>Service type.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdControlUrl">
            <summary>
            <para>IDG control URL.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdServiceType">
            <summary>
            <para>IGD service type.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdOurAddr">
            <summary>
            <para>Address of the local machine in the network connecting it to this <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdStatus">
            <summary>
            <para>IGD status. See <see cref="T:Godot.UPNPDevice.IGDStatus"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.IsValidGateway">
            <summary>
            <para>Returns <c>true</c> if this is a valid IGD (InternetGatewayDevice) which potentially supports port forwarding.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.QueryExternalAddress">
            <summary>
            <para>Returns the external IP address of this <see cref="T:Godot.UPNPDevice"/> or an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            <para>Adds a port mapping to forward the given external port on this <see cref="T:Godot.UPNPDevice"/> for the given protocol to the local machine. See <see cref="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.DeletePortMapping(System.Int32,System.String)">
            <summary>
            <para>Deletes the port mapping identified by the given port and protocol combination on this device. See <see cref="M:Godot.UPNP.DeletePortMapping(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VBoxContainer">
            <summary>
            <para>Vertical box container. See <see cref="T:Godot.BoxContainer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VehicleBody">
            <summary>
            <para>This nodes implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a <see cref="T:Godot.CollisionShape"/> for the main body of your vehicle and add <see cref="T:Godot.VehicleWheel"/> nodes for the wheels. You should also add a <see cref="T:Godot.MeshInstance"/> to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the <see cref="P:Godot.VehicleBody.Brake"/>, <see cref="P:Godot.VehicleBody.EngineForce"/>, and <see cref="P:Godot.VehicleBody.Steering"/> properties and not change the position or orientation of this node directly.</para>
            <para>Note that the origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the <see cref="T:Godot.CollisionShape"/> and <see cref="T:Godot.MeshInstance"/> upwards.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.EngineForce">
            <summary>
            <para>Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have <see cref="P:Godot.VehicleWheel.UseAsTraction"/> set to true and are in contact with a surface. The <see cref="P:Godot.RigidBody.Mass"/> of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration. Note that the simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.</para>
            <para>A negative value will result in the vehicle reversing.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.Brake">
            <summary>
            <para>Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the <see cref="P:Godot.RigidBody.Mass"/> of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.Steering">
            <summary>
            <para>The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have <see cref="P:Godot.VehicleWheel.UseAsSteering"/> set to true will automatically be rotated.</para>
            </summary>
        </member>
        <member name="T:Godot.VehicleWheel">
            <summary>
            <para>This node needs to be used as a child node of <see cref="T:Godot.VehicleBody"/> and simulates the behaviour of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.UseAsTraction">
            <summary>
            <para>If true this wheel transfers engine force to the ground to propel the vehicle forward.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.UseAsSteering">
            <summary>
            <para>If true this wheel will be turned when the car steers.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRollInfluence">
            <summary>
            <para>This value effects the roll of your vehicle. If set to 0.0 for all wheels your vehicle will be prone to rolling over while a value of 1.0 will resist body roll.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRadius">
            <summary>
            <para>The radius of the wheel in meters.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRestLength">
            <summary>
            <para>This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelFrictionSlip">
            <summary>
            <para>This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.</para>
            <para>It's best to set this to 1.0 when starting out.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionTravel">
            <summary>
            <para>This is the distance the suspension can travel. As Godot measures are in meters keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car .</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionStiffness">
            <summary>
            <para>This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionMaxForce">
            <summary>
            <para>The maximum force the spring can resist. This value should be higher than a quarter of the <see cref="P:Godot.RigidBody.Mass"/> of the <see cref="T:Godot.VehicleBody"/> or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3x to 4x this number.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.DampingCompression">
            <summary>
            <para>The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.DampingRelaxation">
            <summary>
            <para>The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the <see cref="P:Godot.VehicleWheel.DampingCompression"/> property. For a <see cref="P:Godot.VehicleWheel.DampingCompression"/> value of 0.3, try a relaxation value of 0.5</para>
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel.IsInContact">
            <summary>
            <para>Returns true if this wheel is in contact with a surface.</para>
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel.GetSkidinfo">
            <summary>
            <para>Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is not skidding, 1.0 means the wheel has lost grip.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoPlayer">
            <summary>
            <para>Control node for playing video streams. Supported formats are WebM and OGV Theora.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.AudioTrack">
            <summary>
            <para>The embedded audio track to play.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.VolumeDb">
            <summary>
            <para>Audio volume in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Volume">
            <summary>
            <para>Audio volume as a linear value.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Autoplay">
            <summary>
            <para>If <c>true</c>, playback starts when the scene loads. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Paused">
            <summary>
            <para>If <c>true</c>, the video is paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Expand">
            <summary>
            <para>If <c>true</c>, the video scales to the control size. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.BufferingMsec">
            <summary>
            <para>Amount of time in milliseconds to store in buffer while playing.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.StreamPosition">
            <summary>
            <para>The current position of the stream, in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Bus">
            <summary>
            <para>Audio bus to use for sound playback.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Play">
            <summary>
            <para>Starts the video playback.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Stop">
            <summary>
            <para>Stops the video playback.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if the video is playing.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetStreamName">
            <summary>
            <para>Returns the video stream's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetVideoTexture">
            <summary>
            <para>Returns the current frame as a <see cref="T:Godot.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamGDNative.SetFile(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VideoStreamGDNative.GetFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.SetFile(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.GetFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.SetFile(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.GetFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.Viewport">
            <summary>
            <para>A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.</para>
            <para>Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.</para>
            <para>If a viewport is a child of a <see cref="T:Godot.ViewportContainer"/>, it will automatically take up its size, otherwise it must be set manually.</para>
            <para>Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.</para>
            <para>Also, viewports can be assigned to different screens in case the devices have multiple screens.</para>
            <para>Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ClearMode.Always">
            <summary>
            <para>Always clear the render target before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ClearMode.Never">
            <summary>
            <para>Never clear the render target.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ClearMode.OnlyNextFrame">
            <summary>
            <para>Clear the render target next frame, then switch to <c>CLEAR_MODE_NEVER</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.ObjectsInFrame">
            <summary>
            <para>Amount of objects in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.VerticesInFrame">
            <summary>
            <para>Amount of vertices in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.MaterialChangesInFrame">
            <summary>
            <para>Amount of material changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.ShaderChangesInFrame">
            <summary>
            <para>Amount of shader changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.SurfaceChangesInFrame">
            <summary>
            <para>Amount of surface changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.DrawCallsInFrame">
            <summary>
            <para>Amount of draw calls in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.Max">
            <summary>
            <para>Enum limiter. Do not use it directly.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.UsageEnum.Usage2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.UsageEnum.Usage2dNoSampling">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.UsageEnum.Usage3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.UsageEnum.Usage3dNoEffects">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Disabled">
            <summary>
            <para>Objects are displayed normally.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Unshaded">
            <summary>
            <para>Objects are displayed without light information.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Overdraw">
            <summary>
            <para>Objected are displayed semi-transparent with additive blending so you can see where they intersect.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Wireframe">
            <summary>
            <para>Objects are displayed in wireframe style.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv16">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv64">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv256">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv1024">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Max">
            <summary>
            <para>Enum limiter. Do not use it directly.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.UpdateMode.Disabled">
            <summary>
            <para>Do not update the render target.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.UpdateMode.Once">
            <summary>
            <para>Update the render target once, then switch to <c>UPDATE_DISABLED</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.UpdateMode.WhenVisible">
            <summary>
            <para>Update the render target only when it is visible. This is the default value.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.UpdateMode.Always">
            <summary>
            <para>Always update the render target.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Disabled">
            <summary>
            <para>Multisample anti-aliasing mode disabled. This is the default value.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa2x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa4x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa8x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa16x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Viewport.Arvr">
            <summary>
            <para>If <c>true</c>, the viewport will be used in AR/VR process. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Size">
            <summary>
            <para>The width and height of viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.OwnWorld">
            <summary>
            <para>If <c>true</c>, the viewport will use <see cref="T:Godot.World"/> defined in <c>world</c> property. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.World">
            <summary>
            <para>The custom <see cref="T:Godot.World"/> which can be used as 3D environment source.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.World2d">
            <summary>
            <para>The custom <see cref="T:Godot.World2D"/> which can be used as 2D environment source.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.TransparentBg">
            <summary>
            <para>If <c>true</c>, the viewport should render its background as transparent. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.HandleInputLocally">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.Viewport.Msaa">
            <summary>
            <para>The multisample anti-aliasing mode. Default value: <c>MSAA_DISABLED</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Hdr">
            <summary>
            <para>If <c>true</c>, the viewport rendering will receive benefits from High Dynamic Range algorithm. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Disable3d">
            <summary>
            <para>If <c>true</c>, the viewport will disable 3D rendering. For actual disabling use <c>usage</c>. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Keep3dLinear">
            <summary>
            <para>If <c>true</c>, the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Usage">
            <summary>
            <para>The rendering mode of viewport. Default value: <c>USAGE_3D</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.DebugDraw">
            <summary>
            <para>The overlay mode for test rendered geometry in debug purposes. Default value: <c>DEBUG_DRAW_DISABLED</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetVFlip">
            <summary>
            <para>If <c>true</c>, the result of rendering will be flipped vertically. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetClearMode">
            <summary>
            <para>The clear mode when viewport used as a render target. Default value: <c>CLEAR_MODE_ALWAYS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetUpdateMode">
            <summary>
            <para>The update mode when viewport used as a render target. Default value: <c>UPDATE_WHEN_VISIBLE</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable2d">
            <summary>
            <para>If <c>true</c>, the viewport will process 2D audio streams. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable3d">
            <summary>
            <para>If <c>true</c>, the viewport will process 3D audio streams. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.PhysicsObjectPicking">
            <summary>
            <para>If <c>true</c>, the objects rendered by viewport become subjects of mouse picking process. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiDisableInput">
            <summary>
            <para>If <c>true</c>, the viewport will not receive input event. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiSnapControlsToPixels">
            <summary>
            <para>If <c>true</c>, the GUI controls on the viewport will lay pixel perfectly. Default value: <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasSize">
            <summary>
            <para>The resolution of shadow atlas. Both width and height is equal to one value.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad0">
            <summary>
            <para>The subdivision amount of first quadrant on shadow atlas. Default value: <c>SHADOW_ATLAS_QUADRANT_SUBDIV_4</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad1">
            <summary>
            <para>The subdivision amount of second quadrant on shadow atlas. Default value: <c>SHADOW_ATLAS_QUADRANT_SUBDIV_4</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad2">
            <summary>
            <para>The subdivision amount of third quadrant on shadow atlas. Default value: <c>SHADOW_ATLAS_QUADRANT_SUBDIV_16</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad3">
            <summary>
            <para>The subdivision amount of fourth quadrant on shadow atlas. Default value: <c>SHADOW_ATLAS_QUADRANT_SUBDIV_64</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.CanvasTransform">
            <summary>
            <para>The canvas transform of the viewport, useful for changing the on-screen positions of all child <see cref="T:Godot.CanvasItem"/>s. This is relative to the global canvas transform of the viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GlobalCanvasTransform">
            <summary>
            <para>The global canvas transform of the viewport. The canvas transform is relative to this.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld2d">
            <summary>
            <para>Returns the 2D world of the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld">
            <summary>
            <para>Returns the 3D world of the viewport, or if none the world of the parent viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetFinalTransform">
            <summary>
            <para>Returns the total transform of the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetVisibleRect">
            <summary>
            <para>Returns the visible rectangle in global screen coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetSizeOverride(System.Boolean,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets the size override of the viewport. If the <c>enable</c> parameter is <c>true</c> the override is used, otherwise it uses the default size. If the size parameter is <c>(-1, -1)</c>, it won't update the size.</para>
            <param name="size">If the parameter is null, then the default value is new Vector2(-1, -1)</param>
            <param name="margin">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetSizeOverride">
            <summary>
            <para>Returns the size override set with <see cref="M:Godot.Viewport.SetSizeOverride(System.Boolean,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.IsSizeOverrideEnabled">
            <summary>
            <para>Returns <c>true</c> if the size override is enabled. See <see cref="M:Godot.Viewport.SetSizeOverride(System.Boolean,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetSizeOverrideStretch(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the size override affects stretch as well.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.IsSizeOverrideStretchEnabled">
            <summary>
            <para>Returns <c>true</c> if the size stretch override is enabled. See <see cref="M:Godot.Viewport.SetSizeOverrideStretch(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetRenderInfo(Godot.Viewport.RenderInfo)">
            <summary>
            <para>Returns information about the viewport from the rendering pipeline.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetTexture">
            <summary>
            <para>Returns the viewport's texture. Note that due to the way OpenGL works, the resulting <see cref="T:Godot.ViewportTexture"/> is flipped vertically. You can use <see cref="M:Godot.Image.FlipY"/> on the result of <see cref="M:Godot.Texture.GetData"/> to flip it back, for example:</para>
            <para><code>
            var img = get_viewport().get_texture().get_data()
            img.flip_y()
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetViewportRid">
            <summary>
            <para>Returns the viewport's RID from the <see cref="T:Godot.VisualServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.Input(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Viewport.UnhandledInput(Godot.InputEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Viewport.UpdateWorlds">
            <summary>
            <para>Forces update of the 2D and 3D worlds.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetCamera">
            <summary>
            <para>Returns the active 3D camera.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetAttachToScreenRect(Godot.Rect2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetMousePosition">
            <summary>
            <para>Returns the mouse position relative to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.WarpMouse(Godot.Vector2)">
            <summary>
            <para>Warps the mouse to a position relative to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiHasModalStack">
            <summary>
            <para>Returns <c>true</c> if there are visible modals on-screen.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiGetDragData">
            <summary>
            <para>Returns the drag data from the GUI, that was previously returned by <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiIsDragging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetModalStackTop">
            <summary>
            <para>Returns the topmost modal in the stack.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetInputAsHandled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.Viewport.IsInputHandled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ViewportContainer">
            <summary>
            <para>A <see cref="T:Godot.Container"/> node that holds a <see cref="T:Godot.Viewport"/>, automatically setting its size.</para>
            </summary>
        </member>
        <member name="P:Godot.ViewportContainer.Stretch">
            <summary>
            <para>If <c>true</c>, the viewport will be scaled to the control's size. Default value:<c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ViewportContainer.StretchShrink">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.ViewportTexture">
            <summary>
            <para>Displays the content of a <see cref="T:Godot.Viewport"/> node as a dynamic <see cref="T:Godot.Texture"/>. This can be used to mix controls, 2D, and 3D elements in the same scene.</para>
            <para>To create a ViewportTexture in code, use the <see cref="M:Godot.Viewport.GetTexture"/> method on the target viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.ViewportTexture.ViewportPath">
            <summary>
            <para>The path to the <see cref="T:Godot.Viewport"/> node to display. This is relative to the scene root, not to the node which uses the texture.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler">
            <summary>
            <para>The VisibilityEnabler will disable <see cref="T:Godot.RigidBody"/> and <see cref="T:Godot.AnimationPlayer"/> nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler.Enabler.PauseAnimations">
            <summary>
            <para>This enabler will pause <see cref="T:Godot.AnimationPlayer"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler.Enabler.FreezeBodies">
            <summary>
            <para>This enabler will freeze <see cref="T:Godot.RigidBody"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler.Enabler.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler.PauseAnimations">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimationPlayer"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler.FreezeBodies">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.RigidBody"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler2D">
            <summary>
            <para>The VisibilityEnabler2D will disable <see cref="T:Godot.RigidBody2D"/>, <see cref="T:Godot.AnimationPlayer"/>, and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseAnimations">
            <summary>
            <para>This enabler will pause <see cref="T:Godot.AnimationPlayer"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.FreezeBodies">
            <summary>
            <para>This enabler will freeze <see cref="T:Godot.RigidBody2D"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseParticles">
            <summary>
            <para>This enabler will stop <see cref="T:Godot.Particles2D"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.ParentProcess">
            <summary>
            <para>This enabler will stop the parent's _process function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.ParentPhysicsProcess">
            <summary>
            <para>This enabler will stop the parent's _physics_process function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseAnimatedSprites">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimations">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimationPlayer"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.FreezeBodies">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.RigidBody2D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseParticles">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.Particles2D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimatedSprites">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimatedSprite"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.ProcessParent">
            <summary>
            <para>If <c>true</c>, the parent's <see cref="M:Godot.Node._Process(System.Single)"/> will be stopped.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PhysicsProcessParent">
            <summary>
            <para>If <c>true</c>, the parent's <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> will be stopped.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier">
            <summary>
            <para>The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a <see cref="T:Godot.Camera"/>'s view.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier.Aabb">
            <summary>
            <para>The VisibilityNotifier's bounding box.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier.IsOnScreen">
            <summary>
            <para>If <c>true</c>, the bounding box is on the screen.</para>
            <para>Note: It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return <c>false</c> right after it is instantiated, even if it will be on screen in the draw pass.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D">
            <summary>
            <para>The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier2D.Rect">
            <summary>
            <para>The VisibilityNotifier2D's bounding rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier2D.IsOnScreen">
            <summary>
            <para>If <c>true</c>, the bounding rectangle is on the screen.</para>
            <para>Note: It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return <c>false</c> right after it is instantiated, even if it will be on screen in the draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualInstance.Layers">
            <summary>
            <para>The render layer(s) this VisualInstance is drawn on.</para>
            <para>This object will only be visible for <see cref="T:Godot.Camera"/>s whose cull mask includes the render object this VisualInstance is set to.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.SetBase(Godot.RID)">
            <summary>
            <para>Sets the base of the VisualInstance, which changes how the engine handles the VisualInstance under the hood.</para>
            <para>It is recommended to only use set_base if you know what you're doing.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.SetLayerMaskBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetLayerMaskBit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetTransformedAabb">
            <summary>
            <para>Returns the transformed <see cref="T:Godot.AABB"/> (also known as the bounding box) for this VisualInstance.</para>
            <para>Transformed in this case means the <see cref="T:Godot.AABB"/> plus the position, rotation, and scale of the <see cref="T:Godot.Spatial"/>s <see cref="T:Godot.Transform"/></para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetAabb">
            <summary>
            <para>Returns the <see cref="T:Godot.AABB"/> (also known as the bounding box) for this VisualInstance.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScript">
            <summary>
            <para>A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.</para>
            <para><see cref="M:Godot.Object.SetScript(Godot.Reference)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            <para>You are most likely to use this class via the Visual Script editor or when writing plugins for it.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddFunction(System.String)">
            <summary>
            <para>Add a function with the specified name to the VisualScript.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasFunction(System.String)">
            <summary>
            <para>Returns whether a function exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveFunction(System.String)">
            <summary>
            <para>Remove a specific function and its nodes from the script.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameFunction(System.String,System.String)">
            <summary>
            <para>Change the name of a function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetFunctionScroll(System.String,Godot.Vector2)">
            <summary>
            <para>Position the center of the screen for a function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionScroll(System.String)">
            <summary>
            <para>Returns the position of the center of the screen for a given function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddNode(System.String,System.Int32,Godot.VisualScriptNode,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Add a node to a function of the VisualScript.</para>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveNode(System.String,System.Int32)">
            <summary>
            <para>Remove a specific node.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionNodeId(System.String)">
            <summary>
            <para>Returns the id of a function's entry point node.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNode(System.String,System.Int32)">
            <summary>
            <para>Returns a node given its id and its function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasNode(System.String,System.Int32)">
            <summary>
            <para>Returns whether a node exists with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetNodePosition(System.String,System.Int32,Godot.Vector2)">
            <summary>
            <para>Position a node on the screen.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNodePosition(System.String,System.Int32)">
            <summary>
            <para>Returns a node's position in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceConnect(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connect two sequence ports. The execution will flow from of <c>from_node</c>'s <c>from_output</c> into <c>to_node</c>.</para>
            <para>Unlike <see cref="M:Godot.VisualScript.DataConnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>, there isn't a <c>to_port</c>, since the target node can have only one sequence port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceDisconnect(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Disconnect two sequence ports previously connected with <see cref="M:Godot.VisualScript.SequenceConnect(System.String,System.Int32,System.Int32,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasSequenceConnection(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns whether the specified sequence ports are connected.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataConnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connect two data ports. The value of <c>from_node</c>'s <c>from_port</c> would be fed into <c>to_node</c>'s <c>to_port</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataDisconnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Disconnect two data ports previously connected with <see cref="M:Godot.VisualScript.DataConnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasDataConnection(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns whether the specified data ports are connected.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddVariable(System.String,System.Object,System.Boolean)">
            <summary>
            <para>Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasVariable(System.String)">
            <summary>
            <para>Returns whether a variable exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveVariable(System.String)">
            <summary>
            <para>Remove a variable with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableDefaultValue(System.String,System.Object)">
            <summary>
            <para>Change the default (initial) value of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableDefaultValue(System.String)">
            <summary>
            <para>Returns the default (initial) value of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableInfo(System.String,Godot.Collections.Dictionary)">
            <summary>
            <para>Set a variable's info, using the same format as <see cref="M:Godot.VisualScript.GetVariableInfo(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableInfo(System.String)">
            <summary>
            <para>Returns the info for a given variable as a dictionary. The information includes its name, type, hint and usage.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableExport(System.String,System.Boolean)">
            <summary>
            <para>Change whether a variable is exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableExport(System.String)">
            <summary>
            <para>Returns whether a variable is exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameVariable(System.String,System.String)">
            <summary>
            <para>Change the name of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddCustomSignal(System.String)">
            <summary>
            <para>Add a custom signal with the specified name to the VisualScript.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasCustomSignal(System.String)">
            <summary>
            <para>Returns whether a signal exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalAddArgument(System.String,Godot.Variant.Type,System.String,System.Int32)">
            <summary>
            <para>Add an argument to a custom signal added with <see cref="M:Godot.VisualScript.AddCustomSignal(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentType(System.String,System.Int32,Godot.Variant.Type)">
            <summary>
            <para>Change the type of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentType(System.String,System.Int32)">
            <summary>
            <para>Get the type of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentName(System.String,System.Int32,System.String)">
            <summary>
            <para>Rename a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentName(System.String,System.Int32)">
            <summary>
            <para>Get the name of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalRemoveArgument(System.String,System.Int32)">
            <summary>
            <para>Remove a specific custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentCount(System.String)">
            <summary>
            <para>Get the count of a custom signal's arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSwapArgument(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Swap two of the arguments of a custom signal.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveCustomSignal(System.String)">
            <summary>
            <para>Remove a custom signal with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameCustomSignal(System.String,System.String)">
            <summary>
            <para>Change the name of a custom signal.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetInstanceBaseType(System.String)">
            <summary>
            <para>Set the base type of the script.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBasicTypeConstant">
            <summary>
            <para>A Visual Script node representing a constant from base types, such as [constant Vector3.AXIS_X].</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.BasicType">
            <summary>
            <para>The type to get the constant from.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.Constant">
            <summary>
            <para>The name of the constant to return.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBuiltinFunc">
            <summary>
            <para>A built-in function used inside a <see cref="T:Godot.VisualScript"/>. It is usually a math function or an utility function.</para>
            <para>See also <c>@GDScript</c>, for the same functions in the GDScript language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSin">
            <summary>
            <para>Return the sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCos">
            <summary>
            <para>Return the cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathTan">
            <summary>
            <para>Return the tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSinh">
            <summary>
            <para>Return the hyperbolic sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCosh">
            <summary>
            <para>Return the hyperbolic cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathTanh">
            <summary>
            <para>Return the hyperbolic tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAsin">
            <summary>
            <para>Return the arc sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAcos">
            <summary>
            <para>Return the arc cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAtan">
            <summary>
            <para>Return the arc tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAtan2">
            <summary>
            <para>Return the arc tangent of the input, using the signs of both parameters to determine the exact angle.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSqrt">
            <summary>
            <para>Return the square root of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFmod">
            <summary>
            <para>Return the remainder of one input divided by the other, using floating-point numbers.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFposmod">
            <summary>
            <para>Return the positive remainder of one input divided by the other, using floating-point numbers.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFloor">
            <summary>
            <para>Return the input rounded down.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCeil">
            <summary>
            <para>Return the input rounded up.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRound">
            <summary>
            <para>Return the input rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAbs">
            <summary>
            <para>Return the absolute value of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSign">
            <summary>
            <para>Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathPow">
            <summary>
            <para>Return the input raised to a given power.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLog">
            <summary>
            <para>Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathExp">
            <summary>
            <para>Return the mathematical constant e raised to the specified power of the input. e has an approximate value of 2.71828.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathIsnan">
            <summary>
            <para>Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathIsinf">
            <summary>
            <para>Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathEase">
            <summary>
            <para>Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDecimals">
            <summary>
            <para>Return the number of digit places after the decimal that the first non-zero digit occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathStepify">
            <summary>
            <para>Return the input snapped to a given step.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLerp">
            <summary>
            <para>Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula <c>a + (a - b) * t</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathInverseLerp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRangeLerp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDectime">
            <summary>
            <para>Return the result of 'value' decreased by 'step' * 'amount'.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandomize">
            <summary>
            <para>Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRand">
            <summary>
            <para>Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandf">
            <summary>
            <para>Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandom">
            <summary>
            <para>Return a random floating-point value between the two inputs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSeed">
            <summary>
            <para>Set the seed for the random number generator.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandseed">
            <summary>
            <para>Return a random value from the given seed, along with the new seed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDeg2rad">
            <summary>
            <para>Convert the input from degrees to radians.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRad2deg">
            <summary>
            <para>Convert the input from radians to degrees.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLinear2db">
            <summary>
            <para>Convert the input from linear volume to decibel volume.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDb2linear">
            <summary>
            <para>Convert the input from decibel volume to linear volume.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathPolar2cartesian">
            <summary>
            <para>Converts a 2D point expressed in the polar coordinate system (a distance from the origin <c>r</c> and an angle <c>th</c>) to the cartesian coordinate system (x and y axis).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCartesian2polar">
            <summary>
            <para>Converts a 2D point expressed in the cartesian coordinate system (x and y axis) to the polar coordinate system (a distance from the origin and an angle).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathWrap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathWrapf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicMax">
            <summary>
            <para>Return the greater of the two numbers, also known as their maximum.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicMin">
            <summary>
            <para>Return the lesser of the two numbers, also known as their minimum.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicClamp">
            <summary>
            <para>Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to <c>min(max(input, range_low), range_high)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicNearestPo2">
            <summary>
            <para>Return the nearest power of 2 to the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.ObjWeakref">
            <summary>
            <para>Create a <see cref="T:Godot.WeakRef"/> from the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.FuncFuncref">
            <summary>
            <para>Create a <see cref="T:Godot.FuncRef"/> from the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeConvert">
            <summary>
            <para>Convert between types.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeOf">
            <summary>
            <para>Return the type of the input as an integer. Check <see cref="T:Godot.Variant.Type"/> for the integers that might be returned.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeExists">
            <summary>
            <para>Checks if a type is registered in the <see cref="T:Godot.ClassDB"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextChar">
            <summary>
            <para>Return a character with the given ascii value.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextStr">
            <summary>
            <para>Convert the input to a string.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrint">
            <summary>
            <para>Print the given string to the output window.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrinterr">
            <summary>
            <para>Print the given string to the standard error output.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrintraw">
            <summary>
            <para>Print the given string to the standard output, without adding a newline.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.VarToStr">
            <summary>
            <para>Serialize a <c>Variant</c> to a string.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.StrToVar">
            <summary>
            <para>Deserialize a <c>Variant</c> from a string serialized using <c>VAR_TO_STR</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.VarToBytes">
            <summary>
            <para>Serialize a <c>Variant</c> to a <see cref="T:System.Byte"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.BytesToVar">
            <summary>
            <para>Deserialize a <c>Variant</c> from a <see cref="T:System.Byte"/> serialized using <c>VAR_TO_BYTES</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.Colorn">
            <summary>
            <para>Return the <see cref="T:Godot.Color"/> with the given name and alpha ranging from 0 to 1. Note: names are defined in color_names.inc.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSmoothstep">
            <summary>
            <para>Return a number smoothly interpolated between the first two inputs, based on the third input. Similar to <c>MATH_LERP</c>, but interpolates faster at the beginning and slower at the end. Using Hermite interpolation formula:</para>
            <para><code>
            var t = clamp((weight - from) / (to - from), 0.0, 1.0)
            return t * t * (3.0 - 2.0 * t)
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.FuncMax">
            <summary>
            <para>The maximum value the <see cref="P:Godot.VisualScriptBuiltinFunc.Function"/> property can have.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBuiltinFunc.Function">
            <summary>
            <para>The function to be executed.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptClassConstant">
            <summary>
            <para>This node returns a constant from a given class, such as [constant @GlobalScope.TYPE_INT]. See the given class' documentation for available constants.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>value</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.BaseType">
            <summary>
            <para>The constant's parent class.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.Constant">
            <summary>
            <para>The constant to return. See the given class for its available constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptComment">
            <summary>
            <para>A Visual Script node used to display annotations in the script, so that code may be documented.</para>
            <para>Comment nodes can be resized so they encompass a group of nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Title">
            <summary>
            <para>The comment node's title.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Description">
            <summary>
            <para>The text inside the comment node.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Size">
            <summary>
            <para>The comment node's size (in pixels).</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCondition">
            <summary>
            <para>A Visual Script node that checks a <see cref="T:System.Boolean"/> input port. If <c>true</c>, it will exit via the "true" sequence port. If <c>false</c>, it will exit via the "false" sequence port. After exiting either, it exits via the "done" port. Sequence ports may be left disconnected.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>if (cond) is</c></para>
            <para>- Data (boolean): <c>cond</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>true</c></para>
            <para>- Sequence: <c>false</c></para>
            <para>- Sequence: <c>done</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstant">
            <summary>
            <para>This node returns a constant's value.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Type">
            <summary>
            <para>The constant's type.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Value">
            <summary>
            <para>The constant's value.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstructor">
            <summary>
            <para>A Visual Script node which calls a base type constructor. It can be used for type conversion as well.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.SetConstructorType(Godot.Variant.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.GetConstructorType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.SetConstructor(Godot.Collections.Dictionary)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.GetConstructor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCustomNode">
            <summary>
            <para>A custom Visual Script node which can be scripted in powerful ways.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepPushStackBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should return to it when there is no other node left to execute.</para>
            <para>This is used by <see cref="T:Godot.VisualScriptCondition"/> to redirect the sequence to the "Done" port after the true/false branch has finished execution.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepGoBackBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should return back, either hitting a previous STEP_PUSH_STACK_BIT or exiting the function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepNoAdvanceBit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepExitFunctionBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should stop and exit the function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepYieldBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that the function should be yielded.</para>
            <para>Using this requires you to have at least one working memory slot, which is used for the <see cref="T:Godot.VisualScriptFunctionState"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.BeginSequence">
            <summary>
            <para>The start mode used the first time when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.ContinueSequence">
            <summary>
            <para>The start mode used when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called after coming back from a STEP_PUSH_STACK_BIT.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.ResumeYield">
            <summary>
            <para>The start mode used when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called after resuming from STEP_YIELD_BIT.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCaption">
            <summary>
            <para>Return the node's title.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCategory">
            <summary>
            <para>Return the node's category.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortCount">
            <summary>
            <para>Return the count of input value ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortName(System.Int32)">
            <summary>
            <para>Return the specified input port's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortType(System.Int32)">
            <summary>
            <para>Return the specified input port's type. See the TYPE_* enum in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortCount">
            <summary>
            <para>Return the amount of output sequence ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortText(System.Int32)">
            <summary>
            <para>Return the specified sequence output's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortCount">
            <summary>
            <para>Return the amount of output value ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortName(System.Int32)">
            <summary>
            <para>Return the specified output's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortType(System.Int32)">
            <summary>
            <para>Return the specified output's type. See the TYPE_* enum in <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetText">
            <summary>
            <para>Return the custom node's text, which is shown right next to the input sequence port (if there is none, on the place that is usually taken by it).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetWorkingMemorySize">
            <summary>
            <para>Return the size of the custom node's working memory. See <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._HasInputSequencePort">
            <summary>
            <para>Return whether the custom node has an input sequence port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)">
            <summary>
            <para>Execute the custom node's logic, returning the index of the output sequence port to use or a <see cref="T:System.String"/> when there is an error.</para>
            <para>The <c>inputs</c> array contains the values of the input ports.</para>
            <para><c>outputs</c> is an array whose indices should be set to the respective outputs.</para>
            <para>The <c>start_mode</c> is usually <c>START_MODE_BEGIN_SEQUENCE</c>, unless you have used the STEP_* constants.</para>
            <para><c>working_mem</c> is an array which can be used to persist information between runs of the custom node.</para>
            <para>When returning, you can mask the returned value with one of the STEP_* constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptDeconstruct">
            <summary>
            <para>A Visual Script node which deconstructs a base type instance into its parts.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptDeconstruct.Type">
            <summary>
            <para>The type to deconstruct.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEmitSignal">
            <summary>
            <para>Emits a specified signal when it is executed.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>emit</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEmitSignal.Signal">
            <summary>
            <para>The signal to emit.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEngineSingleton">
            <summary>
            <para>A Visual Script node returning a singleton from <c>@GlobalScope</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEngineSingleton.Constant">
            <summary>
            <para>The singleton's name.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.RPCCallMode.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.RPCCallMode.Reliable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.RPCCallMode.Unreliable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.RPCCallMode.ReliableToId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.RPCCallMode.UnreliableToId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.CallModeEnum.Self">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.CallModeEnum.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.CallModeEnum.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.CallModeEnum.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptFunctionCall.CallModeEnum.Singleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.CallMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BaseScript">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Singleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Function">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.UseDefaultArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.RpcCallMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.ConnectToSignal(Godot.Object,System.String,Godot.Collections.Array)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.Resume(Godot.Collections.Array)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptGlobalConstant.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptInputAction.ModeEnum.Pressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptInputAction.ModeEnum.Released">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptInputAction.ModeEnum.JustPressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptInputAction.ModeEnum.JustReleased">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptInputAction.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptInputAction.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptIterator">
            <summary>
            <para>This node steps through each item in a given input. Input can be any sequence data type, such as an <see cref="T:Godot.Collections.Array"/> or <see cref="T:System.String"/>. When each item has been processed, execution passed out the <c>exit</c> Sequence port.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>for (elem) in (input)</c></para>
            <para>- Data (variant): <c>input</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>each</c></para>
            <para>- Sequence: <c>exit</c></para>
            <para>- Data (variant): <c>elem</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVar">
            <summary>
            <para>Returns a local variable's value. "Var Name" must be supplied, with an optional type.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.VarName">
            <summary>
            <para>The local variable's name.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.Type">
            <summary>
            <para>The local variable's type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVarSet">
            <summary>
            <para>Changes a local variable's value to the given input. The new value is also provided on an output Data port.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>set</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.VarName">
            <summary>
            <para>The local variable's name.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.Type">
            <summary>
            <para>The local variable's type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptMathConstant">
            <summary>
            <para>Provides common math constants, such as Pi, on an output Data port.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.One">
            <summary>
            <para>Unity: <c>1</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Pi">
            <summary>
            <para>Pi: <c>3.141593</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.HalfPi">
            <summary>
            <para>Pi divided by two: <c>1.570796</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Tau">
            <summary>
            <para>Tau: <c>6.283185</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.E">
            <summary>
            <para>Mathematical constant <c>e</c>, the natural log base: <c>2.718282</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Sqrt2">
            <summary>
            <para>Square root of two: <c>1.414214</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Inf">
            <summary>
            <para>Infinity: <c>inf</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Nan">
            <summary>
            <para>Not a number: <c>nan</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptMathConstant.Constant">
            <summary>
            <para>The math constant.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptNode">
            <summary>
            <para>A node which is part of a <see cref="T:Godot.VisualScript"/>. Not to be confused with <see cref="T:Godot.Node"/>, which is a part of a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetVisualScript">
            <summary>
            <para>Returns the <see cref="T:Godot.VisualScript"/> instance the node is bound to.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.SetDefaultInputValue(System.Int32,System.Object)">
            <summary>
            <para>Change the default value of a given port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetDefaultInputValue(System.Int32)">
            <summary>
            <para>Returns the default value of a given port. The default value is used when nothing is connected to the port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.PortsChangedNotify">
            <summary>
            <para>Notify that the node's ports have changed. Usually used in conjunction with <see cref="T:Godot.VisualScriptCustomNode"/> .</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptOperator">
            <summary>
            <para>Input Ports:</para>
            <para>- Data (variant): <c>A</c></para>
            <para>- Data (variant): <c>B</c></para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>result</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptOperator.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptOperator.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptPreload">
            <summary>
            <para>Creates a new <see cref="T:Godot.Resource"/> or loads one from the filesystem.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (object): <c>res</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPreload.Resource">
            <summary>
            <para>The <see cref="T:Godot.Resource"/> to load.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertyGet.CallMode.Self">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertyGet.CallMode.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertyGet.CallMode.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.SetMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BaseScript">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.Index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.Div">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.Mod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.ShiftLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.ShiftRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.BitAnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.BitOr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.AssignOpEnum.BitXor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.CallMode.Self">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.CallMode.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.CallMode.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptPropertySet.CallMode.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.SetMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BaseScript">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.AssignOp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptResourcePath.Path">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptReturn">
            <summary>
            <para>Ends the execution of a function and returns control to the calling function. Optionally, it can return a <c>Variant</c> value.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>result</c> (optional)</para>
            <para>Output Ports:</para>
            <para>none</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnEnabled">
            <summary>
            <para>If <c>true</c>, the <c>return</c> input port is available.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnType">
            <summary>
            <para>The return value's data type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSceneNode">
            <summary>
            <para>A direct reference to a node.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data: <c>node</c> (obj)</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSceneNode.NodePath">
            <summary>
            <para>The node's path in the scene tree.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelect">
            <summary>
            <para>Chooses between two input values based on a Boolean condition.</para>
            <para>Input Ports:</para>
            <para>- Data (boolean): <c>cond</c></para>
            <para>- Data (variant): <c>a</c></para>
            <para>- Data (variant): <c>b</c></para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>out</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSelect.Type">
            <summary>
            <para>The input variables' type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelf">
            <summary>
            <para>Provides a reference to the node running the visual script.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (object): <c>instance</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSequence">
            <summary>
            <para>Steps through a series of one or more output Sequence ports. The <c>current</c> data port outputs the currently executing item.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>in order</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>1</c></para>
            <para>- Sequence: <c>2 - n</c> (optional)</para>
            <para>- Data (int): <c>current</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSequence.Steps">
            <summary>
            <para>The number of steps in the sequence.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptSubCall._Subcall(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSwitch">
            <summary>
            <para>Branches the flow based on an input's value. Use "Case Count" in the Inspector to set the number of branches and each comparison's optional type.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>'input' is</c></para>
            <para>- Data (variant): <c>=</c></para>
            <para>- Data (variant): <c>=</c> (optional)</para>
            <para>- Data (variant): <c>input</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            <para>- Sequence (optional)</para>
            <para>- Sequence: <c>done</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptTypeCast.BaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptTypeCast.BaseScript">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableGet">
            <summary>
            <para>Returns a variable's value. "Var Name" must be supplied, with an optional type.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>value</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableGet.VarName">
            <summary>
            <para>The variable's name.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableSet">
            <summary>
            <para>Changes a variable's value to the given input.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>set</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableSet.VarName">
            <summary>
            <para>The variable's name.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptWhile">
            <summary>
            <para>Loops while a condition is <c>true</c>. Execution continues out the <c>exit</c> Sequence port when the loop terminates.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>while(cond)</c></para>
            <para>- Data (bool): <c>cond</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>repeat</c></para>
            <para>- Sequence: <c>exit</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYield.YieldMode.Frame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYield.YieldMode.PhysicsFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYield.YieldMode.Wait">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYield.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYield.WaitTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYieldSignal.CallModeEnum.Self">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYieldSignal.CallModeEnum.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualScriptYieldSignal.CallModeEnum.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.CallMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.BaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.NodePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.Signal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VisualServer">
            <summary>
            <para>Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.</para>
            <para>The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.NoIndexArray">
            <summary>
            <para>Marks an error that shows that the index array is empty.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayWeightsSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasItemZMin">
            <summary>
            <para>The minimum Z-layer for canvas items.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasItemZMax">
            <summary>
            <para>The maximum Z-layer for canvas items.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MaxGlowLevels">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MaxCursors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MaterialRenderPriorityMin">
            <summary>
            <para>The minimum renderpriority of all materials.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MaterialRenderPriorityMax">
            <summary>
            <para>The maximum renderpriority of all materials.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ReflectionProbeUpdateMode.Once">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ReflectionProbeUpdateMode.Always">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightDirectionalShadowDepthRangeMode.Stable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightDirectionalShadowDepthRangeMode.Optimized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.BlendShapeMode.Normalized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.BlendShapeMode.Relative">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.Points">
            <summary>
            <para>Primitive to draw consists of points.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.Lines">
            <summary>
            <para>Primitive to draw consists of lines.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.LineStrip">
            <summary>
            <para>Primitive to draw consists of a line strip from start to end.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.LineLoop">
            <summary>
            <para>Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.Triangles">
            <summary>
            <para>Primitive to draw consists of triangles.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.TriangleStrip">
            <summary>
            <para>Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.TriangleFan">
            <summary>
            <para>Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.PrimitiveType.Max">
            <summary>
            <para>Marks the primitive types endpoint. used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureType.Type2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureType.Cubemap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureType.Type2dArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureType.Type3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOQuality.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOQuality.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOQuality.High">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentDOFBlurQuality.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentDOFBlurQuality.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentDOFBlurQuality.High">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.ObjectsInFrame">
            <summary>
            <para>The amount of objects in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.VerticesInFrame">
            <summary>
            <para>The amount of vertices in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.MaterialChangesInFrame">
            <summary>
            <para>The amount of modified materials in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.ShaderChangesInFrame">
            <summary>
            <para>The amount of shader rebinds in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.SurfaceChangesInFrame">
            <summary>
            <para>The amount of surface changes in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.DrawCallsInFrame">
            <summary>
            <para>The amount of draw calls in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.UsageVideoMemTotal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.VideoMemUsed">
            <summary>
            <para>The amount of vertex memory and texture memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.TextureMemUsed">
            <summary>
            <para>The amount of texture memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.RenderInfo.VertexMemUsed">
            <summary>
            <para>The amount of vertex memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.NinePatchAxisMode.Stretch">
            <summary>
            <para>The nine patch gets stretched where needed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.NinePatchAxisMode.Tile">
            <summary>
            <para>The nine patch gets filled with tiles where needed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.NinePatchAxisMode.TileFit">
            <summary>
            <para>The nine patch gets filled with tiles where needed and stretches them a bit if needed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.ObjectsInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.VerticesInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.MaterialChangesInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.ShaderChangesInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.SurfaceChangesInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.DrawCallsInFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportRenderInfo.Max">
            <summary>
            <para>Marks end of VIEWPORT_RENDER_INFO* constants. Used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportClearMode.Always">
            <summary>
            <para>The viewport is always cleared before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportClearMode.Never">
            <summary>
            <para>The viewport is never cleared before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportClearMode.OnlyNextFrame">
            <summary>
            <para>The viewport is cleared once, then the clear mode is set to <c>VIEWPORT_CLEAR_NEVER</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightOmniShadowDetail.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightOmniShadowDetail.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShaderMode.Spatial">
            <summary>
            <para>Shader is a 3D shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShaderMode.CanvasItem">
            <summary>
            <para>Shader is a 2D shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShaderMode.Particles">
            <summary>
            <para>Shader is a particle shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShaderMode.Max">
            <summary>
            <para>Marks maximum of the shader types array. used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshTransformFormat.Transform2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshTransformFormat.Transform3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShadowCastingSetting.Off">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShadowCastingSetting.On">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShadowCastingSetting.DoubleSided">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ShadowCastingSetting.ShadowsOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportDebugDraw.Disabled">
            <summary>
            <para>Debug draw is disabled. Default setting.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportDebugDraw.Unshaded">
            <summary>
            <para>Debug draw sets objects to unshaded.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportDebugDraw.Overdraw">
            <summary>
            <para>Overwrites clear color to <c>(0,0,0,0)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportDebugDraw.Wireframe">
            <summary>
            <para>Debug draw draws objects in wireframe.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUsage.Usage2d">
            <summary>
            <para>The Viewport does not render 3D but samples.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUsage.Usage2dNoSampling">
            <summary>
            <para>The Viewport does not render 3D and does not sample.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUsage.Usage3d">
            <summary>
            <para>The Viewport renders 3D with effects.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUsage.Usage3dNoEffects">
            <summary>
            <para>The Viewport renders 3D but without effects.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.ClearColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.Sky">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.ColorSky">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.Canvas">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.Keep">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentBG.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshCustomDataFormat.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshCustomDataFormat.Data8bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshCustomDataFormat.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightOmniShadowMode.DualParaboloid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightOmniShadowMode.Cube">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.Mipmaps">
            <summary>
            <para>Generate mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.Repeat">
            <summary>
            <para>Repeat (instead of clamp to edge).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.Filter">
            <summary>
            <para>Turn on magnifying filter, to enable smooth zooming in of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.AnisotropicFilter">
            <summary>
            <para>Anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.</para>
            <para>More effective on planes often shown going to the horrizon as those textures (Walls or Ground for example) get squashed in the viewport to different aspect ratios and regular mipmaps keep the aspect ratio so they don't optimize storage that well in those cases.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.ConvertToLinear">
            <summary>
            <para>Converts texture to SRGB color space.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.MirroredRepeat">
            <summary>
            <para>Repeat texture with alternate sections mirrored.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.UsedForStreaming">
            <summary>
            <para>Texture is a video surface.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.TextureFlags.Default">
            <summary>
            <para>Default flags. Generate mipmaps, repeat, and filter are enabled.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.Features.Shaders">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.Features.Multithreaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.None">
            <summary>
            <para>The instance does not have a type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Mesh">
            <summary>
            <para>The instance is a mesh.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Multimesh">
            <summary>
            <para>The instance is a multimesh.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Immediate">
            <summary>
            <para>The instance is an immediate geometry.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Particles">
            <summary>
            <para>The instance is a particle emitter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Light">
            <summary>
            <para>The instance is a light.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.ReflectionProbe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.GiProbe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.LightmapCapture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.Max">
            <summary>
            <para>The max value for INSTANCE_* constants, used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceType.GeometryMask">
            <summary>
            <para>A combination of the flags of geometry instances (mesh, multimesh, immediate and particles).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOBlur.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOBlur.Blur1x1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOBlur.Blur2x2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentSSAOBlur.Blur3x3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentToneMapper.Linear">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentToneMapper.Reinhard">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentToneMapper.Filmic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentToneMapper.Aces">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentGlowBlendMode.Additive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentGlowBlendMode.Screen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentGlowBlendMode.Softlight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.EnvironmentGlowBlendMode.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshColorFormat.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshColorFormat.Color8bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.MultimeshColorFormat.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.Pcf3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.Pcf5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.Pcf7">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.Pcf9">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightShadowFilter.Pcf13">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ScenarioDebugMode.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ScenarioDebugMode.Wireframe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ScenarioDebugMode.Overdraw">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ScenarioDebugMode.Shadeless">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUpdateMode.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUpdateMode.Once">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUpdateMode.WhenVisible">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportUpdateMode.Always">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatVertex">
            <summary>
            <para>Flag used to mark a vertex array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatNormal">
            <summary>
            <para>Flag used to mark a normal array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatTangent">
            <summary>
            <para>Flag used to mark a tangent array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatColor">
            <summary>
            <para>Flag used to mark a color array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatTexUv">
            <summary>
            <para>Flag used to mark a uv coordinates array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatTexUv2">
            <summary>
            <para>Flag used to mark a uv coordinates array for the second uv coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatBones">
            <summary>
            <para>Flag used to mark a bone information array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatWeights">
            <summary>
            <para>Flag used to mark a weights array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FormatIndex">
            <summary>
            <para>Flag used to mark a index array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressVertex">
            <summary>
            <para>Flag used to mark a compressed (half float) vertex array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressNormal">
            <summary>
            <para>Flag used to mark a compressed (half float) normal array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressTangent">
            <summary>
            <para>Flag used to mark a compressed (half float) tangent array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressColor">
            <summary>
            <para>Flag used to mark a compressed (half float) color array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressTexUv">
            <summary>
            <para>Flag used to mark a compressed (half float) uv coordinates array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressTexUv2">
            <summary>
            <para>Flag used to mark a compressed (half float) uv coordinates array for the second uv coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressBones">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressWeights">
            <summary>
            <para>Flag used to mark a compressed (half float) weight array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FlagUse2dVertices">
            <summary>
            <para>Flag used to mark that the array contains 2D vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.FlagUse16BitBones">
            <summary>
            <para>Flag used to mark that the array uses 16 bit bones instead of 8 bit.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayFormat.CompressDefault">
            <summary>
            <para>Used to set flags ARRAY_COMPRESS_VERTEX, ARRAY_COMPRESS_NORMAL, ARRAY_COMPRESS_TANGENT, ARRAY_COMPRESS_COLOR, ARRAY_COMPRESS_TEX_UV, ARRAY_COMPRESS_TEX_UV2 and ARRAY_COMPRESS_WEIGHTS quickly.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ParticlesDrawOrder.Index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ParticlesDrawOrder.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ParticlesDrawOrder.ViewDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightMode.Add">
            <summary>
            <para>Adds light color additive to the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightMode.Sub">
            <summary>
            <para>Adds light color subtractive to the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightMode.Mix">
            <summary>
            <para>The light adds color depending on transparency.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasLightMode.Mask">
            <summary>
            <para>The light adds color depending on mask.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightDirectionalShadowMode.Orthogonal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightDirectionalShadowMode.Parallel2Splits">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightDirectionalShadowMode.Parallel4Splits">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.Energy">
            <summary>
            <para>The light's energy.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.Specular">
            <summary>
            <para>The light's influence on specularity.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.Range">
            <summary>
            <para>The light's range.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.Attenuation">
            <summary>
            <para>The light's attenuation.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.SpotAngle">
            <summary>
            <para>The spotlight's angle.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.SpotAttenuation">
            <summary>
            <para>The spotlight's attenuation.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ContactShadowSize">
            <summary>
            <para>Scales the shadow color.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowSplit1Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowSplit2Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowSplit3Offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowNormalBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.ShadowBiasSplitScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightParam.Max">
            <summary>
            <para>The light parameters endpoint. Used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Vertex">
            <summary>
            <para>Array is a vertex array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Normal">
            <summary>
            <para>Array is a normal array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Tangent">
            <summary>
            <para>Array is a tangent array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Color">
            <summary>
            <para>Array is a color array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.TexUv">
            <summary>
            <para>Array is a uv coordinates array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.TexUv2">
            <summary>
            <para>Array is a uv coordinates array for the second uv coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Bones">
            <summary>
            <para>Array contains bone information.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Weights">
            <summary>
            <para>Array is weight information.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Index">
            <summary>
            <para>Array is index array.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ArrayType.Max">
            <summary>
            <para>Marks the maximum of the array types. Used internally.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasOccluderPolygonCullMode.Disabled">
            <summary>
            <para>Culling of the canvas occluder is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasOccluderPolygonCullMode.Clockwise">
            <summary>
            <para>Culling of the canvas occluder is clockwise.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CanvasOccluderPolygonCullMode.CounterClockwise">
            <summary>
            <para>Culling of the canvas occluder is counterclockwise.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceFlags.UseBakedLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceFlags.DrawNextFrameIfVisible">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.InstanceFlags.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportMSAA.Disabled">
            <summary>
            <para>Multisample antialiasing is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportMSAA.Msaa2x">
            <summary>
            <para>Multisample antialiasing is set to 2X.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportMSAA.Msaa4x">
            <summary>
            <para>Multisample antialiasing is set to 4X.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportMSAA.Msaa8x">
            <summary>
            <para>Multisample antialiasing is set to 8X.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.ViewportMSAA.Msaa16x">
            <summary>
            <para>Multisample antialiasing is set to 16X.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightType.Directional">
            <summary>
            <para>Is a directional (sun) light.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightType.Omni">
            <summary>
            <para>is an omni light.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.LightType.Spot">
            <summary>
            <para>is an spot light.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Left">
            <summary>
            <para>Marks the left side of a cubemap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Right">
            <summary>
            <para>Marks the right side of a cubemap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Bottom">
            <summary>
            <para>Marks the bottom side of a cubemap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Top">
            <summary>
            <para>Marks the top side of a cubemap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Front">
            <summary>
            <para>Marks the front side of a cubemap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualServer.CubeMapSide.Back">
            <summary>
            <para>Marks the back side of a cubemap.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ForceSync">
            <summary>
            <para>Synchronizes threads.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ForceDraw(System.Boolean,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Sync">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Draw(System.Boolean,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureCreate">
            <summary>
            <para>Creates an empty texture.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureCreateFromImage(Godot.Image,System.Int32)">
            <summary>
            <para>Creates a texture, allocates the space for an image, and fills in the image.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureAllocate(Godot.RID,System.Int32,System.Int32,System.Int32,Godot.Image.Format,Godot.VisualServer.TextureType,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetData(Godot.RID,Godot.Image,System.Int32)">
            <summary>
            <para>Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetDataPartial(Godot.RID,Godot.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetData(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the <see cref="T:Godot.RID"/> of the image at one of the cubes sides.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetFlags(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the texture's flags. See <see cref="T:Godot.VisualServer.TextureFlags"/> for options</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetFlags(Godot.RID)">
            <summary>
            <para>Returns the flags of a texture.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetFormat(Godot.RID)">
            <summary>
            <para>Returns the format of the texture's image.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetType(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetTexid(Godot.RID)">
            <summary>
            <para>Returns the opengl id of the texture's image.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetWidth(Godot.RID)">
            <summary>
            <para>Returns the texture's width.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetHeight(Godot.RID)">
            <summary>
            <para>Returns the texture's height.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetDepth(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetSizeOverride(Godot.RID,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetPath(Godot.RID,System.String)">
            <summary>
            <para>Sets the texture's path.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetPath(Godot.RID)">
            <summary>
            <para>Returns the texture's path.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetShrinkAllX2OnSetData(System.Boolean)">
            <summary>
            <para>If <c>true</c>, sets internal processes to shrink all image data to half the size.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureDebugUsage">
            <summary>
            <para>Returns a list of all the textures and their information.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TexturesKeepOriginal(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the image will be stored in the texture's images array if overwritten.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkyCreate">
            <summary>
            <para>Creates an empty sky.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkySetTexture(Godot.RID,Godot.RID,System.Int32)">
            <summary>
            <para>Sets a sky's texture.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderCreate">
            <summary>
            <para>Creates an empty shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderSetCode(Godot.RID,System.String)">
            <summary>
            <para>Sets a shader's code.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetCode(Godot.RID)">
            <summary>
            <para>Returns a shader's code.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetParamList(Godot.RID)">
            <summary>
            <para>Returns the parameters of a shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderSetDefaultTextureParam(Godot.RID,System.String,Godot.RID)">
            <summary>
            <para>Sets a shader's default texture. Overwrites the texture given by name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetDefaultTextureParam(Godot.RID,System.String)">
            <summary>
            <para>Returns a default texture from a shader searched by name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialCreate">
            <summary>
            <para>Returns an empty material.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetShader(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a shader material's shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialGetShader(Godot.RID)">
            <summary>
            <para>Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetParam(Godot.RID,System.String,System.Object)">
            <summary>
            <para>Sets a materials parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialGetParam(Godot.RID,System.String)">
            <summary>
            <para>Returns the value of a certain material's parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialGetParamDefault(Godot.RID,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetRenderPriority(Godot.RID,System.Int32)">
            <summary>
            <para>Sets a material's render priority.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetLineWidth(Godot.RID,System.Single)">
            <summary>
            <para>Sets a materials line width.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetNextPass(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets an objects next material.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshCreate">
            <summary>
            <para>Creates a new mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetFormatOffset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetFormatStride(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshAddSurfaceFromArrays(Godot.RID,Godot.VisualServer.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,System.Int32)">
            <summary>
            <para>Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.</para>
            <param name="blendShapes">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetBlendShapeCount(Godot.RID,System.Int32)">
            <summary>
            <para>Sets a mesh's blend shape count.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetBlendShapeCount(Godot.RID)">
            <summary>
            <para>Returns a mesh's blend shape count.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetBlendShapeMode(Godot.RID,Godot.VisualServer.BlendShapeMode)">
            <summary>
            <para>Sets a mesh's blend shape mode.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetBlendShapeMode(Godot.RID)">
            <summary>
            <para>Returns a mesh's blend shape mode.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceUpdateRegion(Godot.RID,System.Int32,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceSetMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Sets a mesh's surface's material.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetMaterial(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's material.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrayLen(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's amount of vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrayIndexLen(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's amount of indices.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArray(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's vertex buffer.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetIndexArray(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's index buffer.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrays(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's buffer arrays.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetBlendShapeArrays(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's arrays for blend shapes</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetFormat(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the format of a mesh's surface.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetPrimitiveType(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the primitive type of a mesh's surface.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetAabb(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's aabb.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetSkeletonAabb(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the aabb of a mesh's surface's skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshRemoveSurface(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a mesh's surface.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetSurfaceCount(Godot.RID)">
            <summary>
            <para>Returns a mesh's number of surfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            <para>Sets a mesh's custom aabb.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetCustomAabb(Godot.RID)">
            <summary>
            <para>Returns a mesh's custom aabb.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshClear(Godot.RID)">
            <summary>
            <para>Removes all surfaces from a mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshAllocate(Godot.RID,System.Int32,Godot.VisualServer.MultimeshTransformFormat,Godot.VisualServer.MultimeshColorFormat,Godot.VisualServer.MultimeshCustomDataFormat)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetInstanceCount(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshSetMesh(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetColor(Godot.RID,System.Int32,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetCustomData(Godot.RID,System.Int32,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetMesh(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetAabb(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetTransform(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetColor(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetCustomData(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshSetVisibleInstances(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetVisibleInstances(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshSetAsBulkArray(Godot.RID,System.Single[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateBegin(Godot.RID,Godot.VisualServer.PrimitiveType,Godot.RID)">
            <summary>
            
            <param name="texture">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateVertex(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateVertex2d(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateNormal(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateTangent(Godot.RID,Godot.Plane)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateColor(Godot.RID,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateUv(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateUv2(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateEnd(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateClear(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateGetMaterial(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonAllocate(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonGetBoneCount(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneGetTransform(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.DirectionalLightCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.OmniLightCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SpotLightCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetColor(Godot.RID,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetParam(Godot.RID,Godot.VisualServer.LightParam,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetShadow(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetProjector(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetNegative(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetCullMask(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetReverseCullFaceMode(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightOmniSetShadowMode(Godot.RID,Godot.VisualServer.LightOmniShadowMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightOmniSetShadowDetail(Godot.RID,Godot.VisualServer.LightOmniShadowDetail)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetShadowMode(Godot.RID,Godot.VisualServer.LightDirectionalShadowMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetBlendSplits(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetShadowDepthRangeMode(Godot.RID,Godot.VisualServer.LightDirectionalShadowDepthRangeMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetUpdateMode(Godot.RID,Godot.VisualServer.ReflectionProbeUpdateMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetIntensity(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbient(Godot.RID,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbientEnergy(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbientProbeContribution(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetMaxDistance(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetExtents(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetOriginOffset(Godot.RID,Godot.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetAsInterior(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetEnableBoxProjection(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetEnableShadows(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetCullMask(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetBounds(Godot.RID,Godot.AABB)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetBounds(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetCellSize(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetCellSize(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetToCellXform(Godot.RID,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetToCellXform(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetDynamicData(Godot.RID,System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetDynamicData(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetDynamicRange(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetDynamicRange(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetEnergy(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetEnergy(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetBias(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetBias(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetNormalBias(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetNormalBias(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetPropagation(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetPropagation(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetInterior(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeIsInterior(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetCompress(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeIsCompressed(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetBounds(Godot.RID,Godot.AABB)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetBounds(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctree(Godot.RID,System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctreeCellTransform(Godot.RID,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctreeCellTransform(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctreeCellSubdiv(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctreeCellSubdiv(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctree(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetEnergy(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetEnergy(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetEmitting(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesGetEmitting(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetAmount(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetLifetime(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetOneShot(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetPreProcessTime(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetExplosivenessRatio(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetRandomnessRatio(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetSpeedScale(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetUseLocalCoordinates(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetProcessMaterial(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetFixedFps(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetFractionalDelta(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesRestart(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawOrder(Godot.RID,Godot.VisualServer.ParticlesDrawOrder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawPasses(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawPassMesh(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesGetCurrentAabb(Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetEmissionTransform(Godot.RID,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetPerspective(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetOrthogonal(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetCullMask(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetUseVerticalAspect(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportCreate">
            <summary>
            <para>Creates an empty viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUseArvr(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport uses augmented or virtual reality technologies. See <see cref="T:Godot.ARVRInterface"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetSize(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the viewport's width and height.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, sets the viewport active, else sets it inactive.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetParentViewport(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the viewport's parent to another viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachToScreen(Godot.RID,System.Nullable{Godot.Rect2},System.Int32)">
            <summary>
            <para>Attaches a viewport to a screen.</para>
            <param name="rect">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportDetach(Godot.RID)">
            <summary>
            <para>Detaches the viewport from the screen.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUpdateMode(Godot.RID,Godot.VisualServer.ViewportUpdateMode)">
            <summary>
            <para>Sets when the viewport should be updated. See <see cref="T:Godot.VisualServer.ViewportUpdateMode"/> constants for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetVflip(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport's rendering is flipped vertically.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetClearMode(Godot.RID,Godot.VisualServer.ViewportClearMode)">
            <summary>
            <para>Sets the clear mode of a viewport. See <see cref="T:Godot.VisualServer.ViewportClearMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportGetTexture(Godot.RID)">
            <summary>
            <para>Returns the viewport's last rendered frame.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHideScenario(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHideCanvas(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport's canvas is not rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDisableEnvironment(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, rendering of a viewport's environment is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDisable3d(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, a viewport's 3D rendering is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachCamera(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's camera.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetScenario(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's scenario.</para>
            <para>The scenario contains information about the <see cref="T:Godot.VisualServer.ScenarioDebugMode"/>, environment information, reflection atlas etc.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportRemoveCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Detaches a viewport from a canvas and vice versa.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetCanvasTransform(Godot.RID,Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the transformation of a viewport's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetTransparentBackground(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport renders its background as transparent.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetGlobalCanvasTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the viewport's global transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetCanvasStacking(Godot.RID,Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the stacking order for a viewport's canvas.</para>
            <para><c>layer</c> is the actual canvas layer, while <c>sublayer</c> specifies the stacking order of the canvas among those in the same layer.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetShadowAtlasSize(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the size of the shadow atlas's images.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetShadowAtlasQuadrantSubdivision(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the shadow atlas quadrant's subdivision.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetMsaa(Godot.RID,Godot.VisualServer.ViewportMSAA)">
            <summary>
            <para>Sets the anti-aliasing mode. see <see cref="T:Godot.VisualServer.ViewportMSAA"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHdr(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport renders to hdr.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUsage(Godot.RID,Godot.VisualServer.ViewportUsage)">
            <summary>
            <para>Sets the viewport's 2D/3D mode. See <see cref="T:Godot.VisualServer.ViewportUsage"/> constants for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportGetRenderInfo(Godot.RID,Godot.VisualServer.ViewportRenderInfo)">
            <summary>
            <para>Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDebugDraw(Godot.RID,Godot.VisualServer.ViewportDebugDraw)">
            <summary>
            <para>Sets the debug draw mode of a viewport. See <see cref="T:Godot.VisualServer.ViewportDebugDraw"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBackground(Godot.RID,Godot.VisualServer.EnvironmentBG)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSky(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSkyCustomFov(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSkyOrientation(Godot.RID,Godot.Basis)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBgColor(Godot.RID,Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBgEnergy(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetCanvasMaxLayer(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetAmbientLight(Godot.RID,Godot.Color,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetDofBlurNear(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentDOFBlurQuality)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetDofBlurFar(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentDOFBlurQuality)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetGlow(Godot.RID,System.Boolean,System.Int32,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentGlowBlendMode,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetTonemap(Godot.RID,Godot.VisualServer.EnvironmentToneMapper,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetAdjustment(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSsr(Godot.RID,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSsao(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Godot.Color,Godot.VisualServer.EnvironmentSSAOQuality,Godot.VisualServer.EnvironmentSSAOBlur,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFog(Godot.RID,System.Boolean,Godot.Color,Godot.Color,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFogDepth(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFogHeight(Godot.RID,System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetDebug(Godot.RID,Godot.VisualServer.ScenarioDebugMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetReflectionAtlasSize(Godot.RID,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetFallbackEnvironment(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceCreate2(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetBase(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetScenario(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetLayerMask(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetBlendShapeWeight(Godot.RID,System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetSurfaceMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetVisible(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetUseLightmap(Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceAttachSkeleton(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetExterior(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetExtraVisibilityMargin(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetFlag(Godot.RID,Godot.VisualServer.InstanceFlags,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetCastShadowsSetting(Godot.RID,Godot.VisualServer.ShadowCastingSetting)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetMaterialOverride(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetDrawRange(Godot.RID,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetAsInstanceLod(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullAabb(Godot.AABB,Godot.RID)">
            <summary>
            
            <param name="scenario">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullRay(Godot.Vector3,Godot.Vector3,Godot.RID)">
            <summary>
            
            <param name="scenario">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullConvex(Godot.Collections.Array,Godot.RID)">
            <summary>
            
            <param name="scenario">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasCreate">
            <summary>
            <para>Creates a canvas and returns the assigned <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasSetItemMirroring(Godot.RID,Godot.RID,Godot.Vector2)">
            <summary>
            <para>A copy of the canvas item will be drawn with a local offset of the mirroring <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasSetModulate(Godot.RID,Godot.Color)">
            <summary>
            <para>Modulates all colors in the given canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemCreate">
            <summary>
            <para>Creates a new <see cref="T:Godot.CanvasItem"/> and returns its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetParent(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the parent for the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetVisible(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets if the canvas item (including its children) is visible.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetLightMask(Godot.RID,System.Int32)">
            <summary>
            <para>The light mask. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.CanvasItem"/>'s <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetClip(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets clipping for the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDistanceFieldMode(Godot.RID,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetCustomRect(Godot.RID,System.Boolean,System.Nullable{Godot.Rect2})">
            <summary>
            <para>Defines a custom drawing rectangle for the <see cref="T:Godot.CanvasItem"/>.</para>
            <param name="rect">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetModulate(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color that modulates the <see cref="T:Godot.CanvasItem"/> and its children.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetSelfModulate(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color that modulates the <see cref="T:Godot.CanvasItem"/> without children.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDrawBehindParent(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets <see cref="T:Godot.CanvasItem"/> to be drawn behind its parent.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddLine(Godot.RID,Godot.Vector2,Godot.Vector2,Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Adds a line command to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPolyline(Godot.RID,Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            <para>Adds a polyline, which is a line from multiple points with a width, to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddRect(Godot.RID,Godot.Rect2,Godot.Color)">
            <summary>
            <para>Adds a rectangle to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddCircle(Godot.RID,Godot.Vector2,System.Single,Godot.Color)">
            <summary>
            <para>Adds a circle command to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTextureRect(Godot.RID,Godot.Rect2,Godot.RID,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.RID)">
            <summary>
            <para>Adds a textured rect to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTextureRectRegion(Godot.RID,Godot.Rect2,Godot.RID,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.RID,System.Boolean)">
            <summary>
            <para>Adds a texture rect with region setting to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddNinePatch(Godot.RID,Godot.Rect2,Godot.Rect2,Godot.RID,Godot.Vector2,Godot.Vector2,Godot.VisualServer.NinePatchAxisMode,Godot.VisualServer.NinePatchAxisMode,System.Boolean,System.Nullable{Godot.Color},Godot.RID)">
            <summary>
            <para>Adds a nine patch image to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <para>See <see cref="T:Godot.NinePatchRect"/> for more explanation.</para>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPrimitive(Godot.RID,Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.RID,System.Single,Godot.RID)">
            <summary>
            <para>Adds a primitive to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPolygon(Godot.RID,Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.RID,Godot.RID,System.Boolean)">
            <summary>
            <para>Adds a polygon to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="texture">If the parameter is null, then the default value is new RID()</param>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTriangleArray(Godot.RID,System.Int32[],Godot.Vector2[],Godot.Color[],Godot.Vector2[],System.Int32[],System.Single[],Godot.RID,System.Int32,Godot.RID)">
            <summary>
            
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="bones">If the parameter is null, then the default value is new int[] {}</param>
            <param name="weights">If the parameter is null, then the default value is new float[] {}</param>
            <param name="texture">If the parameter is null, then the default value is new RID()</param>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddMesh(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a <see cref="T:Godot.Mesh"/> to the <see cref="T:Godot.CanvasItem"/>'s draw commands. Only affects its aabb at the moment.</para>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddMultimesh(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a <see cref="T:Godot.MultiMesh"/> to the <see cref="T:Godot.CanvasItem"/>'s draw commands. Only affects its aabb at the moment.</para>
            <param name="normalMap">If the parameter is null, then the default value is new RID()</param>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddParticles(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a particles system to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Adds a <see cref="T:Godot.Transform2D"/> command to the <see cref="T:Godot.CanvasItem"/>'s draw commands.</para>
            <para>This sets the extra_matrix uniform when executed. This affects the later commands of the canvas item.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddClipIgnore(Godot.RID,System.Boolean)">
            <summary>
            <para>If ignore is <c>true</c>, the VisualServer does not perform clipping.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetSortChildrenByY(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets if <see cref="T:Godot.CanvasItem"/>'s children should be sorted by y-position.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetZIndex(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the <see cref="T:Godot.CanvasItem"/>'s z-index, i.e. its draw order (lower indexes are drawn first).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetZAsRelativeToParent(Godot.RID,System.Boolean)">
            <summary>
            <para>If this is enabled, the z-index of the parent will be added to the children's z-index.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetCopyToBackbuffer(Godot.RID,System.Boolean,Godot.Rect2)">
            <summary>
            <para>Sets the <see cref="T:Godot.CanvasItem"/> to copy a rect to the backbuffer.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemClear(Godot.RID)">
            <summary>
            <para>Clears the <see cref="T:Godot.CanvasItem"/> and removes all commands in it.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDrawIndex(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the index for the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a new material to the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetUseParentMaterial(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets if the <see cref="T:Godot.CanvasItem"/> uses its parent's material.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightCreate">
            <summary>
            <para>Creates a canvas light.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Attaches the canvas light to the canvas. Removes it from its previous canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables a canvas light.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetScale(Godot.RID,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the canvas light's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTexture(Godot.RID,Godot.RID)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTextureOffset(Godot.RID,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color for a light.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetHeight(Godot.RID,System.Single)">
            <summary>
            <para>Sets a canvas light's height.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetEnergy(Godot.RID,System.Single)">
            <summary>
            <para>Sets a canvas light's energy.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetZRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetLayerRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>The layer range that gets rendered with this light.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetItemCullMask(Godot.RID,System.Int32)">
            <summary>
            <para>The light mask. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetItemShadowCullMask(Godot.RID,System.Int32)">
            <summary>
            <para>The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetMode(Godot.RID,Godot.VisualServer.CanvasLightMode)">
            <summary>
            <para>The mode of the light, see CANVAS_LIGHT_MODE_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables the canvas light's shadow.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowBufferSize(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the width of the shadow buffer, size gets scaled to the next power of two for this.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowGradientLength(Godot.RID,System.Single)">
            <summary>
            <para>Sets the length of the shadow's gradient.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowFilter(Godot.RID,Godot.VisualServer.CanvasLightShadowFilter)">
            <summary>
            <para>Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color of the canvas light's shadow.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowSmooth(Godot.RID,System.Single)">
            <summary>
            <para>Smoothens the shadow. The lower, the more smooth.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderCreate">
            <summary>
            <para>Creates a light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Attaches a light occluder to the canvas. Removes it from its previous canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetPolygon(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a light occluder's polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets a light occluder's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetLightMask(Godot.RID,System.Int32)">
            <summary>
            <para>The light mask. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonCreate">
            <summary>
            <para>Creates a new light occluder polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetShape(Godot.RID,Godot.Vector2[],System.Boolean)">
            <summary>
            <para>Sets the shape of the occluder polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetShapeAsLines(Godot.RID,Godot.Vector2[])">
            <summary>
            <para>Sets the shape of the occluder polygon as lines.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetCullMode(Godot.RID,Godot.VisualServer.CanvasOccluderPolygonCullMode)">
            <summary>
            <para>Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.BlackBarsSetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets margin size, where black bars (or images, if <see cref="M:Godot.VisualServer.BlackBarsSetImages(Godot.RID,Godot.RID,Godot.RID,Godot.RID)"/> was used) are rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.BlackBarsSetImages(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            <para>Sets images to be rendered in the window margin.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.FreeRid(Godot.RID)">
            <summary>
            <para>Tries to free an object in the VisualServer.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.RequestFrameDrawnCallback(Godot.Object,System.String,System.Object)">
            <summary>
            <para>Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn.</para>
            <para>The callback method must use only 1 argument which will be called with 'userdata'.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasChanged">
            <summary>
            <para>Returns <c>true</c> if changes have been made to the VisualServer's data. <see cref="M:Godot.VisualServer.Draw(System.Boolean,System.Single)"/> is usually called if this happens.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Init">
            <summary>
            <para>Initializes the visual server.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Finish">
            <summary>
            <para>Removes buffers and clears testcubes.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetRenderInfo(Godot.VisualServer.RenderInfo)">
            <summary>
            <para>Returns a certain information, see RENDER_INFO_* for options.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MakeSphereMesh(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetTestCube">
            <summary>
            <para>Returns the id of the test cube. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetTestTexture">
            <summary>
            <para>Returns the id of the test texture. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetWhiteTexture">
            <summary>
            <para>Returns the id of a white texture. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetBootImage(Godot.Image,Godot.Color,System.Boolean)">
            <summary>
            <para>Sets a boot image. The color defines the background color and if scale is <c>true</c> the image will be scaled to fit the screen size.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetDefaultClearColor(Godot.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasFeature(Godot.VisualServer.Features)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasOsFeature(System.String)">
            <summary>
            <para>Returns <c>true</c> if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,</para>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetDebugGenerateWireframes(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.NodeIdInvalid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.NodeIdOutput">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Fragment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Light">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShader.GraphOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.SetMode(Godot.Shader.Mode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.AddNode(Godot.VisualShader.Type,Godot.VisualShaderNode,Godot.Vector2,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.SetNodePosition(Godot.VisualShader.Type,System.Int32,Godot.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNode(Godot.VisualShader.Type,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodePosition(Godot.VisualShader.Type,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodeList(Godot.VisualShader.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetValidNodeId(Godot.VisualShader.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.RemoveNode(Godot.VisualShader.Type,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.IsNodeConnection(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.CanConnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.ConnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.DisconnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodeConnections(Godot.VisualShader.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNode.OutputPortForPreview">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNode.DefaultInputValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.SetInputPortDefaultValue(System.Int32,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.GetInputPortDefaultValue(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorConstant.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Screen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Difference">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Darken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Lighten">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Dodge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Burn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.SoftLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.HardLight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorOp.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubeMap.TextureTypeEnum.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubeMap.TextureTypeEnum.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubeMap.TextureTypeEnum.Normalmap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCubeMap.CubeMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCubeMap.TextureType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeInput.InputName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeScalarConstant.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Sin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Cos">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Tan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Asin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Acos">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Atan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Sinh">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Cosh">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Tanh">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Log">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Exp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Sqrt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Abs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Sign">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Floor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Round">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Ceil">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Frac">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Saturate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarFunc.FunctionEnum.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeScalarFunc.Function">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Div">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Mod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Pow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Min">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarOp.OperatorEnum.Atan2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeScalarOp.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.Normalmap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Screen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Source2dTexture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Source2dNormal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.TextureType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Normalmap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Aniso">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.ColorDefaultEnum.White">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.ColorDefaultEnum.Black">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTextureUniform.TextureType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTextureUniform.ColorDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformConstant.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.Axb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.Bxa">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformMult.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Axb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Bxa">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Op3x3Axb">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Op3x3Bxa">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformVecMult.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeUniform.UniformName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVec3Constant.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Saturate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Reciprocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Rgb2hsv">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Hsv2rgb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVectorFunc.Function">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Div">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Mod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Pow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Min">
            <summary>
            
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Cross">
            <summary>
            
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVectorOp.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Godot.VSeparator">
            <summary>
            <para>Vertical version of <see cref="T:Godot.Separator"/>. It is used to separate objects horizontally, though (but it looks vertical!).</para>
            </summary>
        </member>
        <member name="T:Godot.VSlider">
            <summary>
            <para>Vertical slider. See <see cref="T:Godot.Slider"/>. This one goes from bottom (min) to top (max).</para>
            </summary>
        </member>
        <member name="T:Godot.VSplitContainer">
            <summary>
            <para>Vertical split container. See <see cref="T:Godot.SplitContainer"/>. This goes from top to bottom.</para>
            </summary>
        </member>
        <member name="T:Godot.WeakRef">
            <summary>
            <para>A weakref can hold a <see cref="T:Godot.Reference"/>, without contributing to the reference counter. A weakref can be created from an <see cref="T:Godot.Object"/> using <c>@GDScript.weakref</c>. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.</para>
            </summary>
        </member>
        <member name="M:Godot.WeakRef.GetRef">
            <summary>
            <para>Returns the <see cref="T:Godot.Object"/> this weakref is referring to.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient">
            <summary>
            <para>This class implements a WebSocket client compatible with any RFC 6455 complaint WebSocket server.</para>
            <para>This client can be optionally used as a network peer for the <see cref="T:Godot.MultiplayerAPI"/>.</para>
            <para>After starting the client (<see cref="M:Godot.WebSocketClient.ConnectToUrl(System.String,System.String[],System.Boolean)"/>), you will need to <see cref="M:Godot.NetworkedMultiplayerPeer.Poll"/> it at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>).</para>
            <para>You will received appropriate signals when connecting, disconnecting, or when new data is available.</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketClient.VerifySsl">
            <summary>
            <para>Enable or disable SSL certificate verification. Note: You must specify the certificates to be used in the project settings for it to work when exported.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketClient.ConnectToUrl(System.String,System.String[],System.Boolean)">
            <summary>
            <para>Connect to the given URL requesting one of the given <c>protocols</c> as sub-protocol.</para>
            <para>If <c>true</c> is passed as <c>gd_mp_api</c>, the client will behave like a network peer for the <see cref="T:Godot.MultiplayerAPI"/>, connections to non Godot servers will not work, and <c>data_received</c> will not be emitted.</para>
            <para>If <c>false</c> is passed instead (default), you must call <see cref="T:Godot.PacketPeer"/> functions (<c>put_packet</c>, <c>get_packet</c>, etc.) on the <see cref="T:Godot.WebSocketPeer"/> returned via <c>get_peer(1)</c> and not on this object directly (e.g. <c>get_peer(1).put_packet(data)</c>).</para>
            <param name="protocols">If the parameter is null, then the default value is new string[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.WebSocketClient.DisconnectFromHost(System.Int32,System.String)">
            <summary>
            <para>Disconnect this client from the connected host. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more info.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketMultiplayerPeer">
            <summary>
            <para>Base class for WebSocket server and client, allowing them to be used as network peer for the <see cref="T:Godot.MultiplayerAPI"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketMultiplayerPeer.GetPeer(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.WebSocketPeer"/> associated to the given <c>peer_id</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketPeer">
            <summary>
            <para>This class represent a specific WebSocket connection, you can do lower level operations with it.</para>
            <para>You can choose to write to the socket in binary or text mode, and you can recognize the mode used for writing by the other peer.</para>
            </summary>
        </member>
        <member name="F:Godot.WebSocketPeer.WriteMode.Text">
            <summary>
            <para>Specify that WebSockets messages should be transferred as text payload (only valid UTF-8 is allowed).</para>
            </summary>
        </member>
        <member name="F:Godot.WebSocketPeer.WriteMode.Binary">
            <summary>
            <para>Specify that WebSockets messages should be transferred as binary payload (any byte combination is allowed).</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetWriteMode">
            <summary>
            <para>Get the current selected write mode. See <see cref="T:Godot.WebSocketPeer.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.SetWriteMode(Godot.WebSocketPeer.WriteMode)">
            <summary>
            <para>Sets the socket to use the given <see cref="T:Godot.WebSocketPeer.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.IsConnectedToHost">
            <summary>
            <para>Returns <c>true</c> if this peer is currently connected.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.WasStringPacket">
            <summary>
            <para>Returns <c>true</c> if the last received packet was sent as a text payload. See <see cref="T:Godot.WebSocketPeer.WriteMode"/></para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.Close(System.Int32,System.String)">
            <summary>
            <para>Close this WebSocket connection. <c>code</c> is the status code for the closure (see RFC6455 section 7.4 for a list of valid status codes). <c>reason</c> is the human readable reason for closing the connection (can be any UTF8 string, must be less than 123 bytes).</para>
            <para>Note: To achieve a clean close, you will need to keep polling until either <c>WebSocketClient.connection_closed</c> or <c>WebSocketServer.client_disconnected</c> is received.</para>
            <para>Note: HTML5 export might not support all status codes. Please refer to browsers-specific documentation for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetConnectedHost">
            <summary>
            <para>Returns the IP Address of the connected peer. (Not available in HTML5 export)</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetConnectedPort">
            <summary>
            <para>Returns the remote port of the connected peer. (Not available in HTML5 export)</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer">
            <summary>
            <para>This class implements a WebSocket server that can also support the high level multiplayer API.</para>
            <para>After starting the server (<see cref="M:Godot.WebSocketServer.Listen(System.Int32,System.String[],System.Boolean)"/>), you will need to <see cref="M:Godot.NetworkedMultiplayerPeer.Poll"/> it at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>). When clients connect, disconnect, or send data, you will receive the appropriate signal.</para>
            <para>Note: This class will not work in HTML5 exports due to browser restrictions.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.IsListening">
            <summary>
            <para>Returns <c>true</c> if the server is actively listening on a port.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.Listen(System.Int32,System.String[],System.Boolean)">
            <summary>
            <para>Start listening on the given port.</para>
            <para>You can specify the desired subprotocols via the "protocols" array. If the list empty (default), "binary" will be used.</para>
            <para>If <c>true</c> is passed as <c>gd_mp_api</c>, the server will behave like a network peer for the <see cref="T:Godot.MultiplayerAPI"/>, connections from non Godot clients will not work, and <c>data_received</c> will not be emitted.</para>
            <para>If <c>false</c> is passed instead (default), you must call <see cref="T:Godot.PacketPeer"/> functions (<c>put_packet</c>, <c>get_packet</c>, etc.), on the <see cref="T:Godot.WebSocketPeer"/> returned via <c>get_peer(ID)</c> to communicate with the peer with given <c>ID</c> (e.g. <c>get_peer(ID).get_available_packet_count</c>).</para>
            <param name="protocols">If the parameter is null, then the default value is new string[] {}</param>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.Stop">
            <summary>
            <para>Stop the server and clear its state.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.HasPeer(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if a peer with the given ID is connected.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.GetPeerAddress(System.Int32)">
            <summary>
            <para>Returns the IP address of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.GetPeerPort(System.Int32)">
            <summary>
            <para>Returns the remote port of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.DisconnectPeer(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Disconnects the peer identified by <c>id</c> from the server. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more info.</para>
            </summary>
        </member>
        <member name="T:Godot.WindowDialog">
            <summary>
            <para>Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel <see cref="T:Godot.Control"/> that draws a window decoration and allows motion and resizing.</para>
            </summary>
        </member>
        <member name="P:Godot.WindowDialog.WindowTitle">
            <summary>
            <para>The text displayed in the window's title bar.</para>
            </summary>
        </member>
        <member name="P:Godot.WindowDialog.Resizable">
            <summary>
            <para>If <c>true</c>, the user can resize the window. Default value: <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.WindowDialog.GetCloseButton">
            <summary>
            <para>Return the close <see cref="T:Godot.TextureButton"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.World">
            <summary>
            <para>Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.</para>
            </summary>
        </member>
        <member name="P:Godot.World.Environment">
            <summary>
            <para>The World's <see cref="T:Godot.Environment"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.World.FallbackEnvironment">
            <summary>
            <para>The World's fallback_environment will be used if the World's <see cref="T:Godot.Environment"/> fails or is missing.</para>
            </summary>
        </member>
        <member name="P:Godot.World.Space">
            <summary>
            <para>The World's physics space.</para>
            </summary>
        </member>
        <member name="P:Godot.World.Scenario">
            <summary>
            <para>The World's visual scenario.</para>
            </summary>
        </member>
        <member name="P:Godot.World.DirectSpaceState">
            <summary>
            <para>The World's physics direct space state, used for making various queries. Might be used only during <c>_physics_process</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.World2D">
            <summary>
            <para>Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.Canvas">
            <summary>
            <para>The <see cref="T:Godot.RID"/> of this world's canvas resource. Used by the <see cref="T:Godot.VisualServer"/> for 2D drawing.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.Space">
            <summary>
            <para>The <see cref="T:Godot.RID"/> of this world's physics space resource. Used by the <see cref="T:Godot.Physics2DServer"/> for 2D physics, treating it as both a space and an area.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.DirectSpaceState">
            <summary>
            <para>The state of this world's physics space. This allows arbitrary querying for collision.</para>
            </summary>
        </member>
        <member name="T:Godot.WorldEnvironment">
            <summary>
            <para>The <c>WorldEnvironment</c> node is used to configure the default <see cref="T:Godot.Environment"/> for the scene.</para>
            <para>The parameters defined in the <c>WorldEnvironment</c> can be overridden by an <see cref="T:Godot.Environment"/> node set on the current <see cref="T:Godot.Camera"/>. Additionally, only one <c>WorldEnvironment</c> may be instanced in a given scene at a time.</para>
            <para>The <c>WorldEnvironment</c> allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.WorldEnvironment.Environment">
            <summary>
            <para>The <see cref="T:Godot.Environment"/> resource used by this <c>WorldEnvironment</c>, defining the default properties.</para>
            </summary>
        </member>
        <member name="T:Godot.XMLParser">
            <summary>
            <para>This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.None">
            <summary>
            <para>There's no node (no file or buffer opened)</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Element">
            <summary>
            <para>Element (tag)</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.ElementEnd">
            <summary>
            <para>End of element</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Text">
            <summary>
            <para>Text node</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Comment">
            <summary>
            <para>Comment node</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Cdata">
            <summary>
            <para>CDATA content</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Unknown">
            <summary>
            <para>Unknown node</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Read">
            <summary>
            <para>Read the next node of the file. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeType">
            <summary>
            <para>Get the type of the current node. Compare with <c>NODE_*</c> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeName">
            <summary>
            <para>Get the name of the current element node. This will raise an error if the current node type is not <c>NODE_ELEMENT</c> nor <c>NODE_ELEMENT_END</c></para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeData">
            <summary>
            <para>Get the contents of a text node. This will raise an error in any other type of node.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeOffset">
            <summary>
            <para>Get the byte offset of the current node since the beginning of the file or buffer.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeCount">
            <summary>
            <para>Get the amount of attributes in the current element.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeName(System.Int32)">
            <summary>
            <para>Get the name of the attribute specified by the index in <c>idx</c> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeValue(System.Int32)">
            <summary>
            <para>Get the value of the attribute specified by the index in <c>idx</c> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.HasAttribute(System.String)">
            <summary>
            <para>Check whether or not the current element has a certain attribute.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValue(System.String)">
            <summary>
            <para>Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValueSafe(System.String)">
            <summary>
            <para>Get the value of a certain attribute of the current element by name. This will return an empty <see cref="T:System.String"/> if the attribute is not found.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.IsEmpty">
            <summary>
            <para>Check whether the current element is empty (this only works for completely empty tags, e.g. &lt;element \&gt;).</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetCurrentLine">
            <summary>
            <para>Get the current line in the parsed file (currently not implemented).</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.SkipSection">
            <summary>
            <para>Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Seek(System.Int32)">
            <summary>
            <para>Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Open(System.String)">
            <summary>
            <para>Open a XML file for parsing. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.OpenBuffer(System.Byte[])">
            <summary>
            <para>Open a XML raw buffer for parsing. This returns an error code.</para>
            </summary>
        </member>
        <member name="T:Godot.YSort">
            <summary>
            <para>Sort all child nodes based on their Y positions. The child node must inherit from <see cref="T:Godot.CanvasItem"/> for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.</para>
            <para>Nesting of YSort nodes is possible. Children YSort nodes will be sorted in the same space as the parent YSort, allowing to better organize a scene or divide it in multiple ones, yet keep the unique sorting.</para>
            </summary>
        </member>
        <member name="P:Godot.YSort.SortEnabled">
            <summary>
            <para>If <c>true</c>, child nodes are sorted, otherwise sorting is disabled. Default: <c>true</c>.</para>
            </summary>
        </member>
    </members>
</doc>
